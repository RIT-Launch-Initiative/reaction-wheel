
reaction-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  080090b8  080090b8  000190b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009634  08009634  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800963c  0800963c  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009640  08009640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08009644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000024c  08009890  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08009890  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001314e  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b73  00000000  00000000  000333ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00035f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050eb  00000000  00000000  00038260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016629  00000000  00000000  0003d34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ab9  00000000  00000000  00053974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e742d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062bc  00000000  00000000  000e7480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000024c 	.word	0x2000024c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800909c 	.word	0x0800909c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000250 	.word	0x20000250
 80001dc:	0800909c 	.word	0x0800909c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	461a      	mov	r2, r3
 8001014:	460b      	mov	r3, r1
 8001016:	72fb      	strb	r3, [r7, #11]
 8001018:	4613      	mov	r3, r2
 800101a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	685c      	ldr	r4, [r3, #4]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6898      	ldr	r0, [r3, #8]
 8001024:	893b      	ldrh	r3, [r7, #8]
 8001026:	7af9      	ldrb	r1, [r7, #11]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	47a0      	blx	r4
 800102c:	6178      	str	r0, [r7, #20]

  return ret;
 800102e:	697b      	ldr	r3, [r7, #20]
}
 8001030:	4618      	mov	r0, r3
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}

08001038 <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	461a      	mov	r2, r3
 8001044:	460b      	mov	r3, r1
 8001046:	72fb      	strb	r3, [r7, #11]
 8001048:	4613      	mov	r3, r2
 800104a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681c      	ldr	r4, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6898      	ldr	r0, [r3, #8]
 8001054:	893b      	ldrh	r3, [r7, #8]
 8001056:	7af9      	ldrb	r1, [r7, #11]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	47a0      	blx	r4
 800105c:	6178      	str	r0, [r7, #20]

  return ret;
 800105e:	697b      	ldr	r3, [r7, #20]
}
 8001060:	4618      	mov	r0, r3
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <lis3mdl_from_fs4_to_gauss>:
  * @{
  *
  */

float_t lis3mdl_from_fs4_to_gauss(int16_t lsb)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 6842.0f);
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001098 <lis3mdl_from_fs4_to_gauss+0x30>
 8001082:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001086:	eef0 7a66 	vmov.f32	s15, s13
}
 800108a:	eeb0 0a67 	vmov.f32	s0, s15
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	45d5d000 	.word	0x45d5d000

0800109c <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	2301      	movs	r3, #1
 80010ae:	2120      	movs	r1, #32
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffa9 	bl	8001008 <lis3mdl_read_reg>
 80010b6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10f      	bne.n	80010de <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	7c3b      	ldrb	r3, [r7, #16]
 80010c8:	f362 0346 	bfi	r3, r2, #1, #6
 80010cc:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80010ce:	f107 0210 	add.w	r2, r7, #16
 80010d2:	2301      	movs	r3, #1
 80010d4:	2120      	movs	r1, #32
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffae 	bl	8001038 <lis3mdl_write_reg>
 80010dc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d107      	bne.n	80010f4 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 80010e4:	f107 020c 	add.w	r2, r7, #12
 80010e8:	2301      	movs	r3, #1
 80010ea:	2123      	movs	r1, #35	; 0x23
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff8b 	bl	8001008 <lis3mdl_read_reg>
 80010f2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d111      	bne.n	800111e <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	b2da      	uxtb	r2, r3
 8001106:	7b3b      	ldrb	r3, [r7, #12]
 8001108:	f362 0383 	bfi	r3, r2, #2, #2
 800110c:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 800110e:	f107 020c 	add.w	r2, r7, #12
 8001112:	2301      	movs	r3, #1
 8001114:	2123      	movs	r1, #35	; 0x23
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff8e 	bl	8001038 <lis3mdl_write_reg>
 800111c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 800111e:	697b      	ldr	r3, [r7, #20]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001134:	f107 0208 	add.w	r2, r7, #8
 8001138:	2301      	movs	r3, #1
 800113a:	2121      	movs	r1, #33	; 0x21
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff63 	bl	8001008 <lis3mdl_read_reg>
 8001142:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10f      	bne.n	800116a <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 800114a:	78fb      	ldrb	r3, [r7, #3]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	b2da      	uxtb	r2, r3
 8001152:	7a3b      	ldrb	r3, [r7, #8]
 8001154:	f362 1346 	bfi	r3, r2, #5, #2
 8001158:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800115a:	f107 0208 	add.w	r2, r7, #8
 800115e:	2301      	movs	r3, #1
 8001160:	2121      	movs	r1, #33	; 0x21
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff68 	bl	8001038 <lis3mdl_write_reg>
 8001168:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 800117e:	f107 020c 	add.w	r2, r7, #12
 8001182:	2306      	movs	r3, #6
 8001184:	2128      	movs	r1, #40	; 0x28
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff3e 	bl	8001008 <lis3mdl_read_reg>
 800118c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	b21a      	sxth	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	b29b      	uxth	r3, r3
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	7b3b      	ldrb	r3, [r7, #12]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	3302      	adds	r3, #2
 80011b6:	b212      	sxth	r2, r2
 80011b8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3302      	adds	r3, #2
 80011d4:	b212      	sxth	r2, r2
 80011d6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80011d8:	7c7a      	ldrb	r2, [r7, #17]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3304      	adds	r3, #4
 80011de:	b212      	sxth	r2, r2
 80011e0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	7c3b      	ldrb	r3, [r7, #16]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3304      	adds	r3, #4
 80011fc:	b212      	sxth	r2, r2
 80011fe:	801a      	strh	r2, [r3, #0]

  return ret;
 8001200:	697b      	ldr	r3, [r7, #20]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <print_hex>:
#include "../../Dev/lis3mdl/mag.h"
#include<stdio.h>

void print_hex(uint8_t* hexes, uint16_t n)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < n; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e00a      	b.n	8001234 <print_hex+0x28>
	{
		printf("%.2x", hexes[i]);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <print_hex+0x40>)
 800122a:	f004 f857 	bl	80052dc <iprintf>
	for (int i = 0; i < n; i++)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbf0      	blt.n	800121e <print_hex+0x12>
	}
	printf("\n");
 800123c:	200a      	movs	r0, #10
 800123e:	f004 f865 	bl	800530c <putchar>
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	080090b8 	.word	0x080090b8

08001250 <init_mag>:
 *
 * ctx		pointer to control structure
 * handle	platform bus handle (can be used by mag_read and mag_write)
 */
void init_mag(stmdev_ctx_t* ctx, void* handle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]

	ctx->handle = handle;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	609a      	str	r2, [r3, #8]
	ctx->read_reg = (stmdev_read_ptr) mag_read;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <init_mag+0x78>)
 8001264:	605a      	str	r2, [r3, #4]
	ctx->write_reg = (stmdev_write_ptr) mag_write;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <init_mag+0x7c>)
 800126a:	601a      	str	r2, [r3, #0]

	// initalize registers to default values from datasheet;
	uint8_t mag_e_controls[] = {0x10U, 0, 0x03U, 0, 0};
 800126c:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <init_mag+0x80>)
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001276:	6018      	str	r0, [r3, #0]
 8001278:	3304      	adds	r3, #4
 800127a:	7019      	strb	r1, [r3, #0]
	print_hex(mag_e_controls, sizeof(mag_e_controls));
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	2105      	movs	r1, #5
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ffc2 	bl	800120c <print_hex>
	lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1,
 8001288:	f107 0208 	add.w	r2, r7, #8
 800128c:	2305      	movs	r3, #5
 800128e:	2120      	movs	r1, #32
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fed1 	bl	8001038 <lis3mdl_write_reg>
			mag_e_controls, sizeof(mag_e_controls));

	// set desired output properties
	// make sure the conversions in get_mag are consistent with this full-scale
	lis3mdl_full_scale_set(ctx, LIS3MDL_4_GAUSS);
 8001296:	2100      	movs	r1, #0
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff45 	bl	8001128 <lis3mdl_full_scale_set>
	lis3mdl_data_rate_set(ctx, LIS3MDL_UHP_155Hz);
 800129e:	2131      	movs	r1, #49	; 0x31
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fefb 	bl	800109c <lis3mdl_data_rate_set>
//	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);

	// read all of the registers, you can print them if you want
	lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1,
 80012a6:	f107 0208 	add.w	r2, r7, #8
 80012aa:	2305      	movs	r3, #5
 80012ac:	2120      	movs	r1, #32
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff feaa 	bl	8001008 <lis3mdl_read_reg>
			mag_e_controls, sizeof(mag_e_controls));
	print_hex(mag_e_controls, sizeof(mag_e_controls));
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	2105      	movs	r1, #5
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ffa6 	bl	800120c <print_hex>
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	080012d5 	.word	0x080012d5
 80012cc:	08001313 	.word	0x08001313
 80012d0:	080090c0 	.word	0x080090c0

080012d4 <mag_read>:
 * returns	status (ok, busy, error, etc.)
 * MANDATORY: Return value of 0 means success
 * MANDATORY: Do not return -1
 */
int32_t mag_read(void* handle, uint8_t reg, uint8_t* buf, uint16_t len)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af04      	add	r7, sp, #16
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	461a      	mov	r2, r3
 80012e0:	460b      	mov	r3, r1
 80012e2:	72fb      	strb	r3, [r7, #11]
 80012e4:	4613      	mov	r3, r2
 80012e6:	813b      	strh	r3, [r7, #8]
	/* PLATFORM READ IMPLEMENTATION */
	return (int32_t) HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle,
 80012e8:	7afb      	ldrb	r3, [r7, #11]
 80012ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	230a      	movs	r3, #10
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	893b      	ldrh	r3, [r7, #8]
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	2139      	movs	r1, #57	; 0x39
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f001 fbb6 	bl	8002a74 <HAL_I2C_Mem_Read>
 8001308:	4603      	mov	r3, r0
			LIS3MDL_I2C_ADD_L,
			reg | 0x80, 1, buf, len,
			LIS3MDL_TIMEOUT);
	/* PLATFORM READ IMPLEMENTATION END*/
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <mag_write>:
 * returns	status (ok, busy, error, etc.)
 * MANDATORY: Return value of 0 means success
 * MANDATORY: Do not return -1
 */
int32_t mag_write(void* handle, uint8_t reg, uint8_t* buf, uint16_t len)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b088      	sub	sp, #32
 8001316:	af04      	add	r7, sp, #16
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	461a      	mov	r2, r3
 800131e:	460b      	mov	r3, r1
 8001320:	72fb      	strb	r3, [r7, #11]
 8001322:	4613      	mov	r3, r2
 8001324:	813b      	strh	r3, [r7, #8]
	/* PLATFORM WRITE IMPLEMENTATION */
	return (int32_t) HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle,
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b29a      	uxth	r2, r3
 8001330:	230a      	movs	r3, #10
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	893b      	ldrh	r3, [r7, #8]
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	2139      	movs	r1, #57	; 0x39
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f001 fa9d 	bl	8002880 <HAL_I2C_Mem_Write>
 8001346:	4603      	mov	r3, r0
			LIS3MDL_I2C_ADD_L,
			reg | 0x80, 1, buf, len,
			LIS3MDL_TIMEOUT);
	/* PLATFORM WRITE IMPLEMENTATION END*/
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <get_mag>:
 * output	pointer to where the result should be written
 *
 * returns	status: -1 no data, 0 ok, otherwise - interface status as returned by mag_read
 */
int32_t get_mag(stmdev_ctx_t* ctx, vector3_t* output)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
//	}
//	if (!status.zyxda)
//	{
//		return -1; // no data ready
//	}
	ret = lis3mdl_magnetic_raw_get(ctx, buf);
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff07 	bl	8001174 <lis3mdl_magnetic_raw_get>
 8001366:	61f8      	str	r0, [r7, #28]
	if (ret)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <get_mag+0x22>
	{
		return ret; // failed to read raw data
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	e02d      	b.n	80013ce <get_mag+0x7e>
	}

	// nothing failed and we have new data -> convert and store it
	float_t factor = 1;
 8001372:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001376:	61bb      	str	r3, [r7, #24]

	output->x = lis3mdl_from_fs4_to_gauss(buf[0]) * factor;
 8001378:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe73 	bl	8001068 <lis3mdl_from_fs4_to_gauss>
 8001382:	eeb0 7a40 	vmov.f32	s14, s0
 8001386:	edd7 7a06 	vldr	s15, [r7, #24]
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	edc3 7a00 	vstr	s15, [r3]
	output->y = lis3mdl_from_fs4_to_gauss(buf[1]) * factor;
 8001394:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe65 	bl	8001068 <lis3mdl_from_fs4_to_gauss>
 800139e:	eeb0 7a40 	vmov.f32	s14, s0
 80013a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	edc3 7a01 	vstr	s15, [r3, #4]
	output->z = lis3mdl_from_fs4_to_gauss(buf[2]) * factor;
 80013b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe57 	bl	8001068 <lis3mdl_from_fs4_to_gauss>
 80013ba:	eeb0 7a40 	vmov.f32	s14, s0
 80013be:	edd7 7a06 	vldr	s15, [r7, #24]
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	edc3 7a02 	vstr	s15, [r3, #8]

	return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <run_tasks>:
 */

#include "badsched.h"

void run_tasks(bad_task_t* taskv, uint16_t taskc)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]
	uint32_t time;
	for (uint32_t i = 0; i < taskc; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e041      	b.n	800146c <run_tasks+0x96>
	{
		time = SCHED_TIMER_GET(taskv[i].timer);
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	60bb      	str	r3, [r7, #8]

		if (time - taskv[i].last > taskv[i].period)
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	1ad1      	subs	r1, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	461a      	mov	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4299      	cmp	r1, r3
 800142a:	d91c      	bls.n	8001466 <run_tasks+0x90>
		{
			taskv[i].last = time;
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	461a      	mov	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	611a      	str	r2, [r3, #16]
			taskv[i].task(taskv + i);
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	461a      	mov	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	461a      	mov	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	4618      	mov	r0, r3
 8001464:	4788      	blx	r1
	for (uint32_t i = 0; i < taskc; i++)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3301      	adds	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3b9      	bcc.n	80013e8 <run_tasks+0x12>
		}
	}
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4b50      	ldr	r3, [pc, #320]	; (80015dc <MX_GPIO_Init+0x15c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a4f      	ldr	r2, [pc, #316]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b49      	ldr	r3, [pc, #292]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a48      	ldr	r2, [pc, #288]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b46      	ldr	r3, [pc, #280]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b42      	ldr	r3, [pc, #264]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a41      	ldr	r2, [pc, #260]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a3a      	ldr	r2, [pc, #232]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <MX_GPIO_Init+0x15c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b34      	ldr	r3, [pc, #208]	; (80015dc <MX_GPIO_Init+0x15c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a33      	ldr	r2, [pc, #204]	; (80015dc <MX_GPIO_Init+0x15c>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <MX_GPIO_Init+0x15c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <MX_GPIO_Init+0x15c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a2c      	ldr	r2, [pc, #176]	; (80015dc <MX_GPIO_Init+0x15c>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <MX_GPIO_Init+0x15c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2108      	movs	r1, #8
 8001542:	4827      	ldr	r0, [pc, #156]	; (80015e0 <MX_GPIO_Init+0x160>)
 8001544:	f001 f80c 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800154e:	4825      	ldr	r0, [pc, #148]	; (80015e4 <MX_GPIO_Init+0x164>)
 8001550:	f001 f806 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001554:	2308      	movs	r3, #8
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	481d      	ldr	r0, [pc, #116]	; (80015e0 <MX_GPIO_Init+0x160>)
 800156c:	f000 fe5c 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTI0_Pin;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001574:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXTI0_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4818      	ldr	r0, [pc, #96]	; (80015e8 <MX_GPIO_Init+0x168>)
 8001586:	f000 fe4f 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800158a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4810      	ldr	r0, [pc, #64]	; (80015e4 <MX_GPIO_Init+0x164>)
 80015a4:	f000 fe40 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTI1_Pin;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXTI1_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4808      	ldr	r0, [pc, #32]	; (80015e0 <MX_GPIO_Init+0x160>)
 80015be:	f000 fe33 	bl	8002228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2006      	movs	r0, #6
 80015c8:	f000 fdf7 	bl	80021ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015cc:	2006      	movs	r0, #6
 80015ce:	f000 fe10 	bl	80021f2 <HAL_NVIC_EnableIRQ>

}
 80015d2:	bf00      	nop
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40020000 	.word	0x40020000

080015ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_I2C1_Init+0x50>)
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <MX_I2C1_Init+0x54>)
 80015f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_I2C1_Init+0x50>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_I2C1_Init+0x58>)
 80015fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 50;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_I2C1_Init+0x50>)
 8001604:	2232      	movs	r2, #50	; 0x32
 8001606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_I2C1_Init+0x50>)
 800160a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_I2C1_Init+0x50>)
 800162a:	f000 ffe5 	bl	80025f8 <HAL_I2C_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001634:	f000 fa00 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000268 	.word	0x20000268
 8001640:	40005400 	.word	0x40005400
 8001644:	000186a0 	.word	0x000186a0

08001648 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_I2C_MspInit+0x84>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d12c      	bne.n	80016c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_I2C_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_I2C_MspInit+0x88>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_I2C_MspInit+0x88>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001686:	f44f 7310 	mov.w	r3, #576	; 0x240
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168c:	2312      	movs	r3, #18
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001698:	2304      	movs	r3, #4
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	480c      	ldr	r0, [pc, #48]	; (80016d4 <HAL_I2C_MspInit+0x8c>)
 80016a4:	f000 fdc0 	bl	8002228 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_I2C_MspInit+0x88>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_I2C_MspInit+0x88>)
 80016b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b6:	6413      	str	r3, [r2, #64]	; 0x40
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_I2C_MspInit+0x88>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40005400 	.word	0x40005400
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020400 	.word	0x40020400

080016d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00b      	beq.n	8001718 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001700:	e000      	b.n	8001704 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001702:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001704:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f9      	beq.n	8001702 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800170e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// overwrite _write so that printf sends to SWO
int _write(int file, char* ptr, int len)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e009      	b.n	800174c <_write+0x26>
	{
		ITM_SendChar(ptr[i]);
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffc9 	bl	80016d8 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	dbf1      	blt.n	8001738 <_write+0x12>
	}
	return len;
 8001754:	687b      	ldr	r3, [r7, #4]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <flash_led>:
uint16_t idle_led = LED_ORANGE;
uint16_t btn_led = LED_RED;
uint16_t print_led = LED_BLUE;

int32_t flash_led(void* self)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	bad_task_t* bt = (bad_task_t*) self;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	60fb      	str	r3, [r7, #12]

//	printf("Flashing LED\n");
	HAL_GPIO_TogglePin(LED_BANK, *( (uint16_t*) (bt->data) ));
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <flash_led+0x24>)
 8001776:	f000 ff0c 	bl	8002592 <HAL_GPIO_TogglePin>

	return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020c00 	.word	0x40020c00

08001788 <print_mag>:

int32_t print_mag(void* self)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	return print_mag_rt(&mag_ctx);
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <print_mag+0x18>)
 8001792:	f000 f957 	bl	8001a44 <print_mag_rt>
 8001796:	4603      	mov	r3, r0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200002bc 	.word	0x200002bc

080017a4 <end_print_mag>:

int32_t end_print_mag(void* self)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	uint32_t cur = SCHED_TIMER_GET(&htim5);
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <end_print_mag+0x3c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	60fb      	str	r3, [r7, #12]
	if (cur - program_mode_time > 20*1000*1000U)
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <end_print_mag+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <end_print_mag+0x44>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d908      	bls.n	80017d4 <end_print_mag+0x30>
	{
		printf("# END MAG");
 80017c2:	480a      	ldr	r0, [pc, #40]	; (80017ec <end_print_mag+0x48>)
 80017c4:	f003 fd8a 	bl	80052dc <iprintf>
		program_mode = IDLE;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <end_print_mag+0x4c>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
		program_mode_time = cur;
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <end_print_mag+0x40>)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6013      	str	r3, [r2, #0]
	}
	return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000330 	.word	0x20000330
 80017e4:	200002cc 	.word	0x200002cc
 80017e8:	01312d00 	.word	0x01312d00
 80017ec:	080090c8 	.word	0x080090c8
 80017f0:	200002c8 	.word	0x200002c8

080017f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f8:	f000 fb92 	bl	8001f20 <HAL_Init>

  /* USER CODE BEGIN Init */
  program_mode = IDLE;
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <main+0x7c>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 f845 	bl	8001890 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f7ff fe3b 	bl	8001480 <MX_GPIO_Init>
  MX_SPI1_Init();
 800180a:	f000 f95d 	bl	8001ac8 <MX_SPI1_Init>
  MX_I2C1_Init();
 800180e:	f7ff feed 	bl	80015ec <MX_I2C1_Init>
  MX_TIM5_Init();
 8001812:	f000 faeb 	bl	8001dec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  init_mag(&mag_ctx, &hi2c1);
 8001816:	4917      	ldr	r1, [pc, #92]	; (8001874 <main+0x80>)
 8001818:	4817      	ldr	r0, [pc, #92]	; (8001878 <main+0x84>)
 800181a:	f7ff fd19 	bl	8001250 <init_mag>
  printf("\nInitalized magnetometer\n");
 800181e:	4817      	ldr	r0, [pc, #92]	; (800187c <main+0x88>)
 8001820:	f003 fdf8 	bl	8005414 <puts>
  HAL_TIM_Base_Start(&htim5);
 8001824:	4816      	ldr	r0, [pc, #88]	; (8001880 <main+0x8c>)
 8001826:	f002 fc03 	bl	8004030 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	switch(program_mode)
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <main+0x7c>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d8fb      	bhi.n	800182a <main+0x36>
 8001832:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <main+0x44>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	08001849 	.word	0x08001849
 800183c:	08001851 	.word	0x08001851
 8001840:	0800185b 	.word	0x0800185b
 8001844:	08001865 	.word	0x08001865
	{
	  case (INIT):
		program_mode = IDLE;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <main+0x7c>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
		break;
 800184e:	e00e      	b.n	800186e <main+0x7a>
	  case (IDLE):
	    run_tasks(idle_tasks, sizeof(idle_tasks) / sizeof(bad_task_t));
 8001850:	2101      	movs	r1, #1
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <main+0x90>)
 8001854:	f7ff fdbf 	bl	80013d6 <run_tasks>
	    break;
 8001858:	e009      	b.n	800186e <main+0x7a>
	  case (BTN):
	    RUN_TASKS(btn_tasks);
 800185a:	2101      	movs	r1, #1
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <main+0x94>)
 800185e:	f7ff fdba 	bl	80013d6 <run_tasks>
	  	break;
 8001862:	e004      	b.n	800186e <main+0x7a>
	  case (PRINT):
	    RUN_TASKS(print_tasks);
 8001864:	2103      	movs	r1, #3
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <main+0x98>)
 8001868:	f7ff fdb5 	bl	80013d6 <run_tasks>
	    break;
 800186c:	bf00      	nop
	switch(program_mode)
 800186e:	e7dc      	b.n	800182a <main+0x36>
 8001870:	200002c8 	.word	0x200002c8
 8001874:	20000268 	.word	0x20000268
 8001878:	200002bc 	.word	0x200002bc
 800187c:	080090d4 	.word	0x080090d4
 8001880:	20000330 	.word	0x20000330
 8001884:	20000008 	.word	0x20000008
 8001888:	2000001c 	.word	0x2000001c
 800188c:	20000030 	.word	0x20000030

08001890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b094      	sub	sp, #80	; 0x50
 8001894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	2230      	movs	r2, #48	; 0x30
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fe9a 	bl	80045d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <SystemClock_Config+0xc8>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	4a26      	ldr	r2, [pc, #152]	; (8001958 <SystemClock_Config+0xc8>)
 80018be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c2:	6413      	str	r3, [r2, #64]	; 0x40
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <SystemClock_Config+0xc8>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <SystemClock_Config+0xcc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a20      	ldr	r2, [pc, #128]	; (800195c <SystemClock_Config+0xcc>)
 80018da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <SystemClock_Config+0xcc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	2302      	movs	r3, #2
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001900:	2304      	movs	r3, #4
 8001902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001904:	23c0      	movs	r3, #192	; 0xc0
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001908:	2304      	movs	r3, #4
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800190c:	2308      	movs	r3, #8
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fe2f 	bl	8003578 <HAL_RCC_OscConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001920:	f000 f88a 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001924:	230f      	movs	r3, #15
 8001926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001928:	2302      	movs	r3, #2
 800192a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001930:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2103      	movs	r1, #3
 8001940:	4618      	mov	r0, r3
 8001942:	f002 f891 	bl	8003a68 <HAL_RCC_ClockConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800194c:	f000 f874 	bl	8001a38 <Error_Handler>
  }
}
 8001950:	bf00      	nop
 8001952:	3750      	adds	r7, #80	; 0x50
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40007000 	.word	0x40007000

08001960 <handle_button>:

/* USER CODE BEGIN 4 */
void handle_button(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
	uint32_t cur = __HAL_TIM_GET_COUNTER(&htim5);
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <handle_button+0x8c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	60fb      	str	r3, [r7, #12]
	GPIO_PinState button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800196e:	2101      	movs	r1, #1
 8001970:	481f      	ldr	r0, [pc, #124]	; (80019f0 <handle_button+0x90>)
 8001972:	f000 fddd 	bl	8002530 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	72fb      	strb	r3, [r7, #11]
	if (button_state == GPIO_PIN_SET && program_mode == IDLE)
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10d      	bne.n	800199c <handle_button+0x3c>
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <handle_button+0x94>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d109      	bne.n	800199c <handle_button+0x3c>
	{
		program_mode = BTN;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <handle_button+0x94>)
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
		button_time = cur;
 800198e:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <handle_button+0x98>)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6013      	str	r3, [r2, #0]
		program_mode_time = cur;
 8001994:	4a19      	ldr	r2, [pc, #100]	; (80019fc <handle_button+0x9c>)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6013      	str	r3, [r2, #0]
		{
			program_mode = IDLE;
			program_mode_time = cur;
		}
	}
}
 800199a:	e022      	b.n	80019e2 <handle_button+0x82>
	else if (button_state == GPIO_PIN_RESET && program_mode == BTN)
 800199c:	7afb      	ldrb	r3, [r7, #11]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11f      	bne.n	80019e2 <handle_button+0x82>
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <handle_button+0x94>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d11b      	bne.n	80019e2 <handle_button+0x82>
		uint32_t elapsed = cur - button_time;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <handle_button+0x98>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	607b      	str	r3, [r7, #4]
		uint32_t sec = 1000000;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <handle_button+0xa0>)
 80019b6:	603b      	str	r3, [r7, #0]
		if (elapsed > 2 * sec)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d909      	bls.n	80019d6 <handle_button+0x76>
			printf("# START MAG\nt,x,y,z\n");
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <handle_button+0xa4>)
 80019c4:	f003 fd26 	bl	8005414 <puts>
			program_mode = PRINT;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <handle_button+0x94>)
 80019ca:	2203      	movs	r2, #3
 80019cc:	701a      	strb	r2, [r3, #0]
			program_mode_time = cur;
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <handle_button+0x9c>)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	e005      	b.n	80019e2 <handle_button+0x82>
			program_mode = IDLE;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <handle_button+0x94>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
			program_mode_time = cur;
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <handle_button+0x9c>)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6013      	str	r3, [r2, #0]
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000330 	.word	0x20000330
 80019f0:	40020000 	.word	0x40020000
 80019f4:	200002c8 	.word	0x200002c8
 80019f8:	200002d0 	.word	0x200002d0
 80019fc:	200002cc 	.word	0x200002cc
 8001a00:	000f4240 	.word	0x000f4240
 8001a04:	080090f0 	.word	0x080090f0

08001a08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
//	printf("EXTI %u\n", GPIO_Pin);
	switch(GPIO_Pin)
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_GPIO_EXTI_Callback+0x16>
	{
		case(1):
			handle_button();
 8001a18:	f7ff ffa2 	bl	8001960 <handle_button>
			break;
 8001a1c:	e005      	b.n	8001a2a <HAL_GPIO_EXTI_Callback+0x22>
		default:
			printf("# Pin %u ISR not defined\n", GPIO_Pin);
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4804      	ldr	r0, [pc, #16]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001a24:	f003 fc5a 	bl	80052dc <iprintf>
			break;
 8001a28:	bf00      	nop
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08009104 	.word	0x08009104

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <Error_Handler+0x8>
	...

08001a44 <print_mag_rt>:

	return 0;
}

int32_t print_mag_rt(stmdev_ctx_t* ctx)
{
 8001a44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a48:	b08c      	sub	sp, #48	; 0x30
 8001a4a:	af04      	add	r7, sp, #16
 8001a4c:	6078      	str	r0, [r7, #4]
	uint32_t cur_time = PLATFORM_GET_TIME;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <print_mag_rt+0x78>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	61fb      	str	r3, [r7, #28]
	vector3_t value;
	int32_t ret = get_mag(ctx, &value);
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fc77 	bl	8001350 <get_mag>
 8001a62:	61b8      	str	r0, [r7, #24]
	if (ret)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <print_mag_rt+0x32>
	{
		printf("# No mag data: %ld\n", ret);
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <print_mag_rt+0x7c>)
 8001a6e:	f003 fc35 	bl	80052dc <iprintf>
		return ret;
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	e01c      	b.n	8001ab0 <print_mag_rt+0x6c>
	}
	printf("%lu,%3.2f,%3.2f,%3.2f\tEOL\n", cur_time,
			value.x, value.y, value.z);
 8001a76:	68fb      	ldr	r3, [r7, #12]
	printf("%lu,%3.2f,%3.2f,%3.2f\tEOL\n", cur_time,
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd6d 	bl	8000558 <__aeabi_f2d>
 8001a7e:	4680      	mov	r8, r0
 8001a80:	4689      	mov	r9, r1
			value.x, value.y, value.z);
 8001a82:	693b      	ldr	r3, [r7, #16]
	printf("%lu,%3.2f,%3.2f,%3.2f\tEOL\n", cur_time,
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd67 	bl	8000558 <__aeabi_f2d>
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	460d      	mov	r5, r1
			value.x, value.y, value.z);
 8001a8e:	697b      	ldr	r3, [r7, #20]
	printf("%lu,%3.2f,%3.2f,%3.2f\tEOL\n", cur_time,
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd61 	bl	8000558 <__aeabi_f2d>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a9e:	e9cd 4500 	strd	r4, r5, [sp]
 8001aa2:	4642      	mov	r2, r8
 8001aa4:	464b      	mov	r3, r9
 8001aa6:	69f9      	ldr	r1, [r7, #28]
 8001aa8:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <print_mag_rt+0x80>)
 8001aaa:	f003 fc17 	bl	80052dc <iprintf>

	return 0;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aba:	bf00      	nop
 8001abc:	20000330 	.word	0x20000330
 8001ac0:	08009120 	.word	0x08009120
 8001ac4:	08009134 	.word	0x08009134

08001ac8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001ace:	4a18      	ldr	r2, [pc, #96]	; (8001b30 <MX_SPI1_Init+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001afc:	2218      	movs	r2, #24
 8001afe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001b14:	220a      	movs	r2, #10
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <MX_SPI1_Init+0x64>)
 8001b1a:	f002 f9b1 	bl	8003e80 <HAL_SPI_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b24:	f7ff ff88 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200002d4 	.word	0x200002d4
 8001b30:	40013000 	.word	0x40013000

08001b34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <HAL_SPI_MspInit+0x84>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d12b      	bne.n	8001bae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_SPI_MspInit+0x88>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <HAL_SPI_MspInit+0x88>)
 8001b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_SPI_MspInit+0x88>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_SPI_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_SPI_MspInit+0x88>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_SPI_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b8e:	23e0      	movs	r3, #224	; 0xe0
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <HAL_SPI_MspInit+0x8c>)
 8001baa:	f000 fb3d 	bl	8002228 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40013000 	.word	0x40013000
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_MspInit+0x4c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <NMI_Handler+0x4>

08001c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <HardFault_Handler+0x4>

08001c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <MemManage_Handler+0x4>

08001c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c60:	f000 f9b0 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f000 fcab 	bl	80025c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
	return 1;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_kill>:

int _kill(int pid, int sig)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c90:	f002 fc78 	bl	8004584 <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2216      	movs	r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
	return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_exit>:

void _exit (int status)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cae:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffe7 	bl	8001c86 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cb8:	e7fe      	b.n	8001cb8 <_exit+0x12>

08001cba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e00a      	b.n	8001ce2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	b2ca      	uxtb	r2, r1
 8001cda:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbf0      	blt.n	8001ccc <_read+0x12>
	}

return len;
 8001cea:	687b      	ldr	r3, [r7, #4]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1c:	605a      	str	r2, [r3, #4]
	return 0;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_isatty>:

int _isatty(int file)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	return 1;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
	return 0;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f002 fbfa 	bl	8004584 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20020000 	.word	0x20020000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	2000032c 	.word	0x2000032c
 8001dc4:	20000390 	.word	0x20000390

08001dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e00:	463b      	mov	r3, r7
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_TIM5_Init+0x94>)
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <MX_TIM5_Init+0x98>)
 8001e0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = TIM5_PRESCALER - 1;
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <MX_TIM5_Init+0x94>)
 8001e10:	222f      	movs	r2, #47	; 0x2f
 8001e12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_TIM5_Init+0x94>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <MX_TIM5_Init+0x94>)
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <MX_TIM5_Init+0x94>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <MX_TIM5_Init+0x94>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e2e:	4814      	ldr	r0, [pc, #80]	; (8001e80 <MX_TIM5_Init+0x94>)
 8001e30:	f002 f8af 	bl	8003f92 <HAL_TIM_Base_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001e3a:	f7ff fdfd 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480d      	ldr	r0, [pc, #52]	; (8001e80 <MX_TIM5_Init+0x94>)
 8001e4c:	f002 f94a 	bl	80040e4 <HAL_TIM_ConfigClockSource>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001e56:	f7ff fdef 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e62:	463b      	mov	r3, r7
 8001e64:	4619      	mov	r1, r3
 8001e66:	4806      	ldr	r0, [pc, #24]	; (8001e80 <MX_TIM5_Init+0x94>)
 8001e68:	f002 fb1e 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001e72:	f7ff fde1 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000330 	.word	0x20000330
 8001e84:	40000c00 	.word	0x40000c00

08001e88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HAL_TIM_Base_MspInit+0x3c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10d      	bne.n	8001eb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_TIM_Base_MspInit+0x40>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_TIM_Base_MspInit+0x40>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_TIM_Base_MspInit+0x40>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40023800 	.word	0x40023800

08001ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed2:	490e      	ldr	r1, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee8:	4c0b      	ldr	r4, [pc, #44]	; (8001f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef6:	f7ff ff67 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efa:	f002 fb49 	bl	8004590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efe:	f7ff fc79 	bl	80017f4 <main>
  bx  lr    
 8001f02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8001f10:	08009644 	.word	0x08009644
  ldr r2, =_sbss
 8001f14:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8001f18:	2000038c 	.word	0x2000038c

08001f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC_IRQHandler>
	...

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_Init+0x40>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_Init+0x40>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_Init+0x40>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 f92b 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	200f      	movs	r0, #15
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fe36 	bl	8001bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f943 	bl	800220e <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 f90b 	bl	80021ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	2000006c 	.word	0x2000006c
 8001fbc:	20000074 	.word	0x20000074
 8001fc0:	20000070 	.word	0x20000070

08001fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000074 	.word	0x20000074
 8001fe8:	20000378 	.word	0x20000378

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000378 	.word	0x20000378

08002004 <__NVIC_SetPriorityGrouping>:
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4907      	ldr	r1, [pc, #28]	; (80020a0 <__NVIC_EnableIRQ+0x38>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <SysTick_Config>:
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002170:	d301      	bcc.n	8002176 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <SysTick_Config+0x40>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217e:	210f      	movs	r1, #15
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f7ff ff8e 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <SysTick_Config+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <SysTick_Config+0x40>)
 8002190:	2207      	movs	r2, #7
 8002192:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff29 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff3e 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff8e 	bl	80020f8 <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5d 	bl	80020a4 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff31 	bl	8002068 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e159      	b.n	80024f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	f040 8148 	bne.w	80024f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d005      	beq.n	800227a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002276:	2b02      	cmp	r3, #2
 8002278:	d130      	bne.n	80022dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 0201 	and.w	r2, r3, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d017      	beq.n	8002318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d123      	bne.n	800236c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3208      	adds	r2, #8
 8002366:	69b9      	ldr	r1, [r7, #24]
 8002368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0203 	and.w	r2, r3, #3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a2 	beq.w	80024f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b57      	ldr	r3, [pc, #348]	; (8002510 <HAL_GPIO_Init+0x2e8>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a56      	ldr	r2, [pc, #344]	; (8002510 <HAL_GPIO_Init+0x2e8>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b54      	ldr	r3, [pc, #336]	; (8002510 <HAL_GPIO_Init+0x2e8>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ca:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_GPIO_Init+0x2ec>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a49      	ldr	r2, [pc, #292]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x202>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a48      	ldr	r2, [pc, #288]	; (800251c <HAL_GPIO_Init+0x2f4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x1fe>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a47      	ldr	r2, [pc, #284]	; (8002520 <HAL_GPIO_Init+0x2f8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x1fa>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a46      	ldr	r2, [pc, #280]	; (8002524 <HAL_GPIO_Init+0x2fc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x1f6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a45      	ldr	r2, [pc, #276]	; (8002528 <HAL_GPIO_Init+0x300>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x1f2>
 8002416:	2304      	movs	r3, #4
 8002418:	e008      	b.n	800242c <HAL_GPIO_Init+0x204>
 800241a:	2307      	movs	r3, #7
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x204>
 800241e:	2303      	movs	r3, #3
 8002420:	e004      	b.n	800242c <HAL_GPIO_Init+0x204>
 8002422:	2302      	movs	r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x204>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x204>
 800242a:	2300      	movs	r3, #0
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f002 0203 	and.w	r2, r2, #3
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4093      	lsls	r3, r2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800243c:	4935      	ldr	r1, [pc, #212]	; (8002514 <HAL_GPIO_Init+0x2ec>)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_GPIO_Init+0x304>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246e:	4a2f      	ldr	r2, [pc, #188]	; (800252c <HAL_GPIO_Init+0x304>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_GPIO_Init+0x304>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002498:	4a24      	ldr	r2, [pc, #144]	; (800252c <HAL_GPIO_Init+0x304>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_GPIO_Init+0x304>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c2:	4a1a      	ldr	r2, [pc, #104]	; (800252c <HAL_GPIO_Init+0x304>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_GPIO_Init+0x304>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ec:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_GPIO_Init+0x304>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	f67f aea2 	bls.w	8002244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40013800 	.word	0x40013800
 8002518:	40020000 	.word	0x40020000
 800251c:	40020400 	.word	0x40020400
 8002520:	40020800 	.word	0x40020800
 8002524:	40020c00 	.word	0x40020c00
 8002528:	40021000 	.word	0x40021000
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e001      	b.n	8002552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	041a      	lsls	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	400b      	ands	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d006      	beq.n	80025ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fa0e 	bl	8001a08 <HAL_GPIO_EXTI_Callback>
  }
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e12b      	b.n	8002862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff f812 	bl	8001648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800265c:	f001 fbfc 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8002660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4a81      	ldr	r2, [pc, #516]	; (800286c <HAL_I2C_Init+0x274>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d807      	bhi.n	800267c <HAL_I2C_Init+0x84>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a80      	ldr	r2, [pc, #512]	; (8002870 <HAL_I2C_Init+0x278>)
 8002670:	4293      	cmp	r3, r2
 8002672:	bf94      	ite	ls
 8002674:	2301      	movls	r3, #1
 8002676:	2300      	movhi	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e006      	b.n	800268a <HAL_I2C_Init+0x92>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a7d      	ldr	r2, [pc, #500]	; (8002874 <HAL_I2C_Init+0x27c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0e7      	b.n	8002862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a78      	ldr	r2, [pc, #480]	; (8002878 <HAL_I2C_Init+0x280>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a6a      	ldr	r2, [pc, #424]	; (800286c <HAL_I2C_Init+0x274>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d802      	bhi.n	80026cc <HAL_I2C_Init+0xd4>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	e009      	b.n	80026e0 <HAL_I2C_Init+0xe8>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	4a69      	ldr	r2, [pc, #420]	; (800287c <HAL_I2C_Init+0x284>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	3301      	adds	r3, #1
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	495c      	ldr	r1, [pc, #368]	; (800286c <HAL_I2C_Init+0x274>)
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d819      	bhi.n	8002734 <HAL_I2C_Init+0x13c>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e59      	subs	r1, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fbb1 f3f3 	udiv	r3, r1, r3
 800270e:	1c59      	adds	r1, r3, #1
 8002710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002714:	400b      	ands	r3, r1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_I2C_Init+0x138>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e59      	subs	r1, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fbb1 f3f3 	udiv	r3, r1, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272e:	e051      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002730:	2304      	movs	r3, #4
 8002732:	e04f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d111      	bne.n	8002760 <HAL_I2C_Init+0x168>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	440b      	add	r3, r1
 800274a:	fbb0 f3f3 	udiv	r3, r0, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e012      	b.n	8002786 <HAL_I2C_Init+0x18e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	0099      	lsls	r1, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Init+0x196>
 800278a:	2301      	movs	r3, #1
 800278c:	e022      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10e      	bne.n	80027b4 <HAL_I2C_Init+0x1bc>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1e58      	subs	r0, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	440b      	add	r3, r1
 80027a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b2:	e00f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6809      	ldr	r1, [r1, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69da      	ldr	r2, [r3, #28]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6911      	ldr	r1, [r2, #16]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68d2      	ldr	r2, [r2, #12]
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	430b      	orrs	r3, r1
 8002816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	000186a0 	.word	0x000186a0
 8002870:	001e847f 	.word	0x001e847f
 8002874:	003d08ff 	.word	0x003d08ff
 8002878:	431bde83 	.word	0x431bde83
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	460b      	mov	r3, r1
 8002894:	813b      	strh	r3, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800289a:	f7ff fba7 	bl	8001fec <HAL_GetTick>
 800289e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	f040 80d9 	bne.w	8002a60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2319      	movs	r3, #25
 80028b4:	2201      	movs	r2, #1
 80028b6:	496d      	ldr	r1, [pc, #436]	; (8002a6c <HAL_I2C_Mem_Write+0x1ec>)
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fc7f 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0cc      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_I2C_Mem_Write+0x56>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e0c5      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d007      	beq.n	80028fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2221      	movs	r2, #33	; 0x21
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a3a      	ldr	r2, [r7, #32]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <HAL_I2C_Mem_Write+0x1f0>)
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800293e:	88f8      	ldrh	r0, [r7, #6]
 8002940:	893a      	ldrh	r2, [r7, #8]
 8002942:	8979      	ldrh	r1, [r7, #10]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4603      	mov	r3, r0
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fab6 	bl	8002ec0 <I2C_RequestMemoryWrite>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d052      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e081      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fd00 	bl	8003368 <I2C_WaitOnTXEFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b04      	cmp	r3, #4
 8002974:	d107      	bne.n	8002986 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e06b      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11b      	bne.n	8002a00 <HAL_I2C_Mem_Write+0x180>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1aa      	bne.n	800295e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fcec 	bl	80033ea <I2C_WaitOnBTFFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d107      	bne.n	8002a30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e016      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000

08002a74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	460b      	mov	r3, r1
 8002a88:	813b      	strh	r3, [r7, #8]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a8e:	f7ff faad 	bl	8001fec <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	f040 8208 	bne.w	8002eb2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2319      	movs	r3, #25
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	497b      	ldr	r1, [pc, #492]	; (8002c98 <HAL_I2C_Mem_Read+0x224>)
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fb85 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e1fb      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_I2C_Mem_Read+0x56>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e1f4      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x440>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d007      	beq.n	8002af0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2222      	movs	r2, #34	; 0x22
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a5b      	ldr	r2, [pc, #364]	; (8002c9c <HAL_I2C_Mem_Read+0x228>)
 8002b30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b32:	88f8      	ldrh	r0, [r7, #6]
 8002b34:	893a      	ldrh	r2, [r7, #8]
 8002b36:	8979      	ldrh	r1, [r7, #10]
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4603      	mov	r3, r0
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fa52 	bl	8002fec <I2C_RequestMemoryRead>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e1b0      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d113      	bne.n	8002b82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	623b      	str	r3, [r7, #32]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	623b      	str	r3, [r7, #32]
 8002b6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e184      	b.n	8002e8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d11b      	bne.n	8002bc2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e164      	b.n	8002e8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d11b      	bne.n	8002c02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	e144      	b.n	8002e8c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c18:	e138      	b.n	8002e8c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	f200 80f1 	bhi.w	8002e06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d123      	bne.n	8002c74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fc1b 	bl	800346c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e139      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c72:	e10b      	b.n	8002e8c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d14e      	bne.n	8002d1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	2200      	movs	r2, #0
 8002c84:	4906      	ldr	r1, [pc, #24]	; (8002ca0 <HAL_I2C_Mem_Read+0x22c>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fa98 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e10e      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x440>
 8002c96:	bf00      	nop
 8002c98:	00100002 	.word	0x00100002
 8002c9c:	ffff0000 	.word	0xffff0000
 8002ca0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d18:	e0b8      	b.n	8002e8c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	2200      	movs	r2, #0
 8002d22:	4966      	ldr	r1, [pc, #408]	; (8002ebc <HAL_I2C_Mem_Read+0x448>)
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fa49 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0bf      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	494f      	ldr	r1, [pc, #316]	; (8002ebc <HAL_I2C_Mem_Read+0x448>)
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fa1b 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e091      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e04:	e042      	b.n	8002e8c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fb2e 	bl	800346c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e04c      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d118      	bne.n	8002e8c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f47f aec2 	bne.w	8002c1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
  }
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	00010004 	.word	0x00010004

08002ec0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	817b      	strh	r3, [r7, #10]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	813b      	strh	r3, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f960 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f10:	d103      	bne.n	8002f1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e05f      	b.n	8002fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	6a3a      	ldr	r2, [r7, #32]
 8002f32:	492d      	ldr	r1, [pc, #180]	; (8002fe8 <I2C_RequestMemoryWrite+0x128>)
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f998 	bl	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e04c      	b.n	8002fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	6a39      	ldr	r1, [r7, #32]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fa02 	bl	8003368 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d107      	bne.n	8002f82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e02b      	b.n	8002fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8c:	893b      	ldrh	r3, [r7, #8]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]
 8002f96:	e021      	b.n	8002fdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f98:	893b      	ldrh	r3, [r7, #8]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f9dc 	bl	8003368 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00d      	beq.n	8002fd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d107      	bne.n	8002fce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e005      	b.n	8002fde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fd2:	893b      	ldrh	r3, [r7, #8]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	00010002 	.word	0x00010002

08002fec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003014:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003024:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	2200      	movs	r2, #0
 800302e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f8c2 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00d      	beq.n	800305a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304c:	d103      	bne.n	8003056 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e0aa      	b.n	80031b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800305a:	897b      	ldrh	r3, [r7, #10]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003068:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	6a3a      	ldr	r2, [r7, #32]
 800306e:	4952      	ldr	r1, [pc, #328]	; (80031b8 <I2C_RequestMemoryRead+0x1cc>)
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f8fa 	bl	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e097      	b.n	80031b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	6a39      	ldr	r1, [r7, #32]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f964 	bl	8003368 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d107      	bne.n	80030be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e076      	b.n	80031b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030c8:	893b      	ldrh	r3, [r7, #8]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	611a      	str	r2, [r3, #16]
 80030d2:	e021      	b.n	8003118 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	b29b      	uxth	r3, r3
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	6a39      	ldr	r1, [r7, #32]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f93e 	bl	8003368 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d107      	bne.n	800310a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003108:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e050      	b.n	80031b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800310e:	893b      	ldrh	r3, [r7, #8]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	6a39      	ldr	r1, [r7, #32]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f923 	bl	8003368 <I2C_WaitOnTXEFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	2b04      	cmp	r3, #4
 800312e:	d107      	bne.n	8003140 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e035      	b.n	80031b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003152:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	2200      	movs	r2, #0
 800315c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f82b 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317a:	d103      	bne.n	8003184 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e013      	b.n	80031b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003188:	897b      	ldrh	r3, [r7, #10]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	6a3a      	ldr	r2, [r7, #32]
 800319c:	4906      	ldr	r1, [pc, #24]	; (80031b8 <I2C_RequestMemoryRead+0x1cc>)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f863 	bl	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	00010002 	.word	0x00010002

080031bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031cc:	e025      	b.n	800321a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d021      	beq.n	800321a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d6:	f7fe ff09 	bl	8001fec <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d302      	bcc.n	80031ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d116      	bne.n	800321a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e023      	b.n	8003262 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	0c1b      	lsrs	r3, r3, #16
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d10d      	bne.n	8003240 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	e00c      	b.n	800325a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	429a      	cmp	r2, r3
 800325e:	d0b6      	beq.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003278:	e051      	b.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003288:	d123      	bne.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f043 0204 	orr.w	r2, r3, #4
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e046      	b.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d021      	beq.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fe fe87 	bl	8001fec <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d116      	bne.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f043 0220 	orr.w	r2, r3, #32
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e020      	b.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d10c      	bne.n	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	43da      	mvns	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4013      	ands	r3, r2
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	e00b      	b.n	800335a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	43da      	mvns	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4013      	ands	r3, r2
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d18d      	bne.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003374:	e02d      	b.n	80033d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8ce 	bl	8003518 <I2C_IsAcknowledgeFailed>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e02d      	b.n	80033e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d021      	beq.n	80033d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fe fe2d 	bl	8001fec <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d116      	bne.n	80033d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e007      	b.n	80033e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d1ca      	bne.n	8003376 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f6:	e02d      	b.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f88d 	bl	8003518 <I2C_IsAcknowledgeFailed>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e02d      	b.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d021      	beq.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003410:	f7fe fdec 	bl	8001fec <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	d302      	bcc.n	8003426 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e007      	b.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b04      	cmp	r3, #4
 8003460:	d1ca      	bne.n	80033f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003478:	e042      	b.n	8003500 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b10      	cmp	r3, #16
 8003486:	d119      	bne.n	80034bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0210 	mvn.w	r2, #16
 8003490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e029      	b.n	8003510 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034bc:	f7fe fd96 	bl	8001fec <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d302      	bcc.n	80034d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e007      	b.n	8003510 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d1b5      	bne.n	800347a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	d11b      	bne.n	8003568 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003538:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e267      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d075      	beq.n	8003682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003596:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d00c      	beq.n	80035bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a2:	4b85      	ldr	r3, [pc, #532]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d112      	bne.n	80035d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ba:	d10b      	bne.n	80035d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	4b7e      	ldr	r3, [pc, #504]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d05b      	beq.n	8003680 <HAL_RCC_OscConfig+0x108>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d157      	bne.n	8003680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e242      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d106      	bne.n	80035ec <HAL_RCC_OscConfig+0x74>
 80035de:	4b76      	ldr	r3, [pc, #472]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a75      	ldr	r2, [pc, #468]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e01d      	b.n	8003628 <HAL_RCC_OscConfig+0xb0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x98>
 80035f6:	4b70      	ldr	r3, [pc, #448]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a6f      	ldr	r2, [pc, #444]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b6d      	ldr	r3, [pc, #436]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6c      	ldr	r2, [pc, #432]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0xb0>
 8003610:	4b69      	ldr	r3, [pc, #420]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a68      	ldr	r2, [pc, #416]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b66      	ldr	r3, [pc, #408]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a65      	ldr	r2, [pc, #404]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe fcdc 	bl	8001fec <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe fcd8 	bl	8001fec <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e207      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0xc0>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fcc8 	bl	8001fec <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fcc4 	bl	8001fec <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e1f3      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	4b51      	ldr	r3, [pc, #324]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0xe8>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d063      	beq.n	8003756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800368e:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d11c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a6:	4b44      	ldr	r3, [pc, #272]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d116      	bne.n	80036e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_RCC_OscConfig+0x152>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e1c7      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ca:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4937      	ldr	r1, [pc, #220]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036de:	e03a      	b.n	8003756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e8:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_RCC_OscConfig+0x244>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fe fc7d 	bl	8001fec <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f6:	f7fe fc79 	bl	8001fec <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e1a8      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003714:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4925      	ldr	r1, [pc, #148]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]
 8003728:	e015      	b.n	8003756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_RCC_OscConfig+0x244>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe fc5c 	bl	8001fec <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003738:	f7fe fc58 	bl	8001fec <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e187      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d036      	beq.n	80037d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <HAL_RCC_OscConfig+0x248>)
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fe fc3c 	bl	8001fec <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003778:	f7fe fc38 	bl	8001fec <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e167      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_OscConfig+0x240>)
 800378c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x200>
 8003796:	e01b      	b.n	80037d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_OscConfig+0x248>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379e:	f7fe fc25 	bl	8001fec <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a4:	e00e      	b.n	80037c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a6:	f7fe fc21 	bl	8001fec <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d907      	bls.n	80037c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e150      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	42470000 	.word	0x42470000
 80037c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 80037c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ea      	bne.n	80037a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8097 	beq.w	800390c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e2:	4b81      	ldr	r3, [pc, #516]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	4b7d      	ldr	r3, [pc, #500]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a7c      	ldr	r2, [pc, #496]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b7a      	ldr	r3, [pc, #488]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380e:	4b77      	ldr	r3, [pc, #476]	; (80039ec <HAL_RCC_OscConfig+0x474>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d118      	bne.n	800384c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381a:	4b74      	ldr	r3, [pc, #464]	; (80039ec <HAL_RCC_OscConfig+0x474>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a73      	ldr	r2, [pc, #460]	; (80039ec <HAL_RCC_OscConfig+0x474>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003826:	f7fe fbe1 	bl	8001fec <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382e:	f7fe fbdd 	bl	8001fec <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e10c      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003840:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <HAL_RCC_OscConfig+0x474>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d106      	bne.n	8003862 <HAL_RCC_OscConfig+0x2ea>
 8003854:	4b64      	ldr	r3, [pc, #400]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	e01c      	b.n	800389c <HAL_RCC_OscConfig+0x324>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b05      	cmp	r3, #5
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0x30c>
 800386a:	4b5f      	ldr	r3, [pc, #380]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	4a5e      	ldr	r2, [pc, #376]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	6713      	str	r3, [r2, #112]	; 0x70
 8003876:	4b5c      	ldr	r3, [pc, #368]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a5b      	ldr	r2, [pc, #364]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0x324>
 8003884:	4b58      	ldr	r3, [pc, #352]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a57      	ldr	r2, [pc, #348]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
 8003890:	4b55      	ldr	r3, [pc, #340]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a54      	ldr	r2, [pc, #336]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003896:	f023 0304 	bic.w	r3, r3, #4
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d015      	beq.n	80038d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fe fba2 	bl	8001fec <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ac:	f7fe fb9e 	bl	8001fec <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e0cb      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0ee      	beq.n	80038ac <HAL_RCC_OscConfig+0x334>
 80038ce:	e014      	b.n	80038fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d0:	f7fe fb8c 	bl	8001fec <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d6:	e00a      	b.n	80038ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d8:	f7fe fb88 	bl	8001fec <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e0b5      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ee:	4b3e      	ldr	r3, [pc, #248]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1ee      	bne.n	80038d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d105      	bne.n	800390c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003900:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	4a38      	ldr	r2, [pc, #224]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80a1 	beq.w	8003a58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003916:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b08      	cmp	r3, #8
 8003920:	d05c      	beq.n	80039dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d141      	bne.n	80039ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <HAL_RCC_OscConfig+0x478>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fe fb5c 	bl	8001fec <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003938:	f7fe fb58 	bl	8001fec <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e087      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69da      	ldr	r2, [r3, #28]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	019b      	lsls	r3, r3, #6
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	3b01      	subs	r3, #1
 8003970:	041b      	lsls	r3, r3, #16
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	491b      	ldr	r1, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_RCC_OscConfig+0x478>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003986:	f7fe fb31 	bl	8001fec <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398e:	f7fe fb2d 	bl	8001fec <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e05c      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x416>
 80039ac:	e054      	b.n	8003a58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <HAL_RCC_OscConfig+0x478>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fe fb1a 	bl	8001fec <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fe fb16 	bl	8001fec <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e045      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_RCC_OscConfig+0x470>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x444>
 80039da:	e03d      	b.n	8003a58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e038      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40007000 	.word	0x40007000
 80039f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_RCC_OscConfig+0x4ec>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d028      	beq.n	8003a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d121      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d11a      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d111      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d107      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800

08003a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0cc      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d90c      	bls.n	8003aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b65      	ldr	r3, [pc, #404]	; (8003c20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b63      	ldr	r3, [pc, #396]	; (8003c20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0b8      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d020      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003abc:	4b59      	ldr	r3, [pc, #356]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a58      	ldr	r2, [pc, #352]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad4:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a52      	ldr	r2, [pc, #328]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae0:	4b50      	ldr	r3, [pc, #320]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	494d      	ldr	r1, [pc, #308]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d044      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d119      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e07f      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b26:	4b3f      	ldr	r3, [pc, #252]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e06f      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e067      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b46:	4b37      	ldr	r3, [pc, #220]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4934      	ldr	r1, [pc, #208]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b58:	f7fe fa48 	bl	8001fec <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fe fa44 	bl	8001fec <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e04f      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 020c 	and.w	r2, r3, #12
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1eb      	bne.n	8003b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b88:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d20c      	bcs.n	8003bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e032      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4916      	ldr	r1, [pc, #88]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d009      	beq.n	8003bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	490e      	ldr	r1, [pc, #56]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bee:	f000 f821 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	490a      	ldr	r1, [pc, #40]	; (8003c28 <HAL_RCC_ClockConfig+0x1c0>)
 8003c00:	5ccb      	ldrb	r3, [r1, r3]
 8003c02:	fa22 f303 	lsr.w	r3, r2, r3
 8003c06:	4a09      	ldr	r2, [pc, #36]	; (8003c2c <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c0a:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe f9a8 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023c00 	.word	0x40023c00
 8003c24:	40023800 	.word	0x40023800
 8003c28:	08009170 	.word	0x08009170
 8003c2c:	2000006c 	.word	0x2000006c
 8003c30:	20000070 	.word	0x20000070

08003c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c38:	b094      	sub	sp, #80	; 0x50
 8003c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c40:	2300      	movs	r3, #0
 8003c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c44:	2300      	movs	r3, #0
 8003c46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c4c:	4b79      	ldr	r3, [pc, #484]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d00d      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x40>
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	f200 80e1 	bhi.w	8003e20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x34>
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c66:	e0db      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b73      	ldr	r3, [pc, #460]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c6c:	e0db      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c6e:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c72:	e0d8      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c74:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c7e:	4b6d      	ldr	r3, [pc, #436]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d063      	beq.n	8003d52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	099b      	lsrs	r3, r3, #6
 8003c90:	2200      	movs	r2, #0
 8003c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	f04f 0000 	mov.w	r0, #0
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb8:	0150      	lsls	r0, r2, #5
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	1a51      	subs	r1, r2, r1
 8003cc2:	6139      	str	r1, [r7, #16]
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd8:	4659      	mov	r1, fp
 8003cda:	018b      	lsls	r3, r1, #6
 8003cdc:	4651      	mov	r1, sl
 8003cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	018a      	lsls	r2, r1, #6
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	ebb2 0801 	subs.w	r8, r2, r1
 8003cec:	4659      	mov	r1, fp
 8003cee:	eb63 0901 	sbc.w	r9, r3, r1
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d06:	4690      	mov	r8, r2
 8003d08:	4699      	mov	r9, r3
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	eb18 0303 	adds.w	r3, r8, r3
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	462b      	mov	r3, r5
 8003d14:	eb49 0303 	adc.w	r3, r9, r3
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d26:	4629      	mov	r1, r5
 8003d28:	024b      	lsls	r3, r1, #9
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d30:	4621      	mov	r1, r4
 8003d32:	024a      	lsls	r2, r1, #9
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d44:	f7fc ffa8 	bl	8000c98 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d50:	e058      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d52:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	2200      	movs	r2, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	464b      	mov	r3, r9
 8003d70:	f04f 0000 	mov.w	r0, #0
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	0159      	lsls	r1, r3, #5
 8003d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d7e:	0150      	lsls	r0, r2, #5
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4641      	mov	r1, r8
 8003d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003da4:	ebb2 040a 	subs.w	r4, r2, sl
 8003da8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	00eb      	lsls	r3, r5, #3
 8003db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dba:	00e2      	lsls	r2, r4, #3
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	18e3      	adds	r3, r4, r3
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	eb45 0303 	adc.w	r3, r5, r3
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dda:	4629      	mov	r1, r5
 8003ddc:	028b      	lsls	r3, r1, #10
 8003dde:	4621      	mov	r1, r4
 8003de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003de4:	4621      	mov	r1, r4
 8003de6:	028a      	lsls	r2, r1, #10
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dee:	2200      	movs	r2, #0
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	61fa      	str	r2, [r7, #28]
 8003df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df8:	f7fc ff4e 	bl	8000c98 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4613      	mov	r3, r2
 8003e02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3750      	adds	r7, #80	; 0x50
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	00f42400 	.word	0x00f42400
 8003e3c:	007a1200 	.word	0x007a1200

08003e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000006c 	.word	0x2000006c

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e5c:	f7ff fff0 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0a9b      	lsrs	r3, r3, #10
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	08009180 	.word	0x08009180

08003e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07b      	b.n	8003f8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d009      	beq.n	8003eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
 8003eaa:	e005      	b.n	8003eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd fe2e 	bl	8001b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	ea42 0103 	orr.w	r1, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0104 	and.w	r1, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f003 0210 	and.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e041      	b.n	8004028 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fd ff65 	bl	8001e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f000 f94f 	bl	8004274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d001      	beq.n	8004048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e03c      	b.n	80040c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_TIM_Base_Start+0xa0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_TIM_Base_Start+0x5c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004062:	d013      	beq.n	800408c <HAL_TIM_Base_Start+0x5c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <HAL_TIM_Base_Start+0xa4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_TIM_Base_Start+0x5c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <HAL_TIM_Base_Start+0xa8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_TIM_Base_Start+0x5c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_TIM_Base_Start+0xac>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_TIM_Base_Start+0x5c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <HAL_TIM_Base_Start+0xb0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b06      	cmp	r3, #6
 800409c:	d010      	beq.n	80040c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e007      	b.n	80040c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40014000 	.word	0x40014000

080040e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_TIM_ConfigClockSource+0x1c>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e0b4      	b.n	800426a <HAL_TIM_ConfigClockSource+0x186>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800411e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004138:	d03e      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0xd4>
 800413a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413e:	f200 8087 	bhi.w	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004146:	f000 8086 	beq.w	8004256 <HAL_TIM_ConfigClockSource+0x172>
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414e:	d87f      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b70      	cmp	r3, #112	; 0x70
 8004152:	d01a      	beq.n	800418a <HAL_TIM_ConfigClockSource+0xa6>
 8004154:	2b70      	cmp	r3, #112	; 0x70
 8004156:	d87b      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b60      	cmp	r3, #96	; 0x60
 800415a:	d050      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x11a>
 800415c:	2b60      	cmp	r3, #96	; 0x60
 800415e:	d877      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b50      	cmp	r3, #80	; 0x50
 8004162:	d03c      	beq.n	80041de <HAL_TIM_ConfigClockSource+0xfa>
 8004164:	2b50      	cmp	r3, #80	; 0x50
 8004166:	d873      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d058      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x13a>
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d86f      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b30      	cmp	r3, #48	; 0x30
 8004172:	d064      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 8004174:	2b30      	cmp	r3, #48	; 0x30
 8004176:	d86b      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b20      	cmp	r3, #32
 800417a:	d060      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 800417c:	2b20      	cmp	r3, #32
 800417e:	d867      	bhi.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d05c      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 8004184:	2b10      	cmp	r3, #16
 8004186:	d05a      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x15a>
 8004188:	e062      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6899      	ldr	r1, [r3, #8]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f000 f965 	bl	8004468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	609a      	str	r2, [r3, #8]
      break;
 80041b6:	e04f      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6899      	ldr	r1, [r3, #8]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f000 f94e 	bl	8004468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041da:	609a      	str	r2, [r3, #8]
      break;
 80041dc:	e03c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6859      	ldr	r1, [r3, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f000 f8c2 	bl	8004374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2150      	movs	r1, #80	; 0x50
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f91b 	bl	8004432 <TIM_ITRx_SetConfig>
      break;
 80041fc:	e02c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6859      	ldr	r1, [r3, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	461a      	mov	r2, r3
 800420c:	f000 f8e1 	bl	80043d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2160      	movs	r1, #96	; 0x60
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f90b 	bl	8004432 <TIM_ITRx_SetConfig>
      break;
 800421c:	e01c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	461a      	mov	r2, r3
 800422c:	f000 f8a2 	bl	8004374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2140      	movs	r1, #64	; 0x40
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f8fb 	bl	8004432 <TIM_ITRx_SetConfig>
      break;
 800423c:	e00c      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f000 f8f2 	bl	8004432 <TIM_ITRx_SetConfig>
      break;
 800424e:	e003      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
      break;
 8004254:	e000      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a34      	ldr	r2, [pc, #208]	; (8004358 <TIM_Base_SetConfig+0xe4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00f      	beq.n	80042ac <TIM_Base_SetConfig+0x38>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d00b      	beq.n	80042ac <TIM_Base_SetConfig+0x38>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a31      	ldr	r2, [pc, #196]	; (800435c <TIM_Base_SetConfig+0xe8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_Base_SetConfig+0x38>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a30      	ldr	r2, [pc, #192]	; (8004360 <TIM_Base_SetConfig+0xec>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_Base_SetConfig+0x38>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <TIM_Base_SetConfig+0xf0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d108      	bne.n	80042be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a25      	ldr	r2, [pc, #148]	; (8004358 <TIM_Base_SetConfig+0xe4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d01b      	beq.n	80042fe <TIM_Base_SetConfig+0x8a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042cc:	d017      	beq.n	80042fe <TIM_Base_SetConfig+0x8a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <TIM_Base_SetConfig+0xe8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <TIM_Base_SetConfig+0x8a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a21      	ldr	r2, [pc, #132]	; (8004360 <TIM_Base_SetConfig+0xec>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00f      	beq.n	80042fe <TIM_Base_SetConfig+0x8a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a20      	ldr	r2, [pc, #128]	; (8004364 <TIM_Base_SetConfig+0xf0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00b      	beq.n	80042fe <TIM_Base_SetConfig+0x8a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <TIM_Base_SetConfig+0xf4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d007      	beq.n	80042fe <TIM_Base_SetConfig+0x8a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1e      	ldr	r2, [pc, #120]	; (800436c <TIM_Base_SetConfig+0xf8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d003      	beq.n	80042fe <TIM_Base_SetConfig+0x8a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <TIM_Base_SetConfig+0xfc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d108      	bne.n	8004310 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <TIM_Base_SetConfig+0xe4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d103      	bne.n	8004344 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	615a      	str	r2, [r3, #20]
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40010000 	.word	0x40010000
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	40000c00 	.word	0x40000c00
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800

08004374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0201 	bic.w	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800439e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f023 030a 	bic.w	r3, r3, #10
 80043b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b087      	sub	sp, #28
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f023 0210 	bic.w	r2, r3, #16
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800440e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	f043 0307 	orr.w	r3, r3, #7
 8004454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	609a      	str	r2, [r3, #8]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	021a      	lsls	r2, r3, #8
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	431a      	orrs	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4313      	orrs	r3, r2
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044bc:	2302      	movs	r3, #2
 80044be:	e050      	b.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d013      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a16      	ldr	r2, [pc, #88]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a15      	ldr	r2, [pc, #84]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a13      	ldr	r2, [pc, #76]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d10c      	bne.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	4313      	orrs	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010000 	.word	0x40010000
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40014000 	.word	0x40014000

08004584 <__errno>:
 8004584:	4b01      	ldr	r3, [pc, #4]	; (800458c <__errno+0x8>)
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000078 	.word	0x20000078

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4d0d      	ldr	r5, [pc, #52]	; (80045c8 <__libc_init_array+0x38>)
 8004594:	4c0d      	ldr	r4, [pc, #52]	; (80045cc <__libc_init_array+0x3c>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	2600      	movs	r6, #0
 800459c:	42a6      	cmp	r6, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	4d0b      	ldr	r5, [pc, #44]	; (80045d0 <__libc_init_array+0x40>)
 80045a2:	4c0c      	ldr	r4, [pc, #48]	; (80045d4 <__libc_init_array+0x44>)
 80045a4:	f004 fd7a 	bl	800909c <_init>
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2600      	movs	r6, #0
 80045ae:	42a6      	cmp	r6, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b8:	4798      	blx	r3
 80045ba:	3601      	adds	r6, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c2:	4798      	blx	r3
 80045c4:	3601      	adds	r6, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	0800963c 	.word	0x0800963c
 80045cc:	0800963c 	.word	0x0800963c
 80045d0:	0800963c 	.word	0x0800963c
 80045d4:	08009640 	.word	0x08009640

080045d8 <memset>:
 80045d8:	4402      	add	r2, r0
 80045da:	4603      	mov	r3, r0
 80045dc:	4293      	cmp	r3, r2
 80045de:	d100      	bne.n	80045e2 <memset+0xa>
 80045e0:	4770      	bx	lr
 80045e2:	f803 1b01 	strb.w	r1, [r3], #1
 80045e6:	e7f9      	b.n	80045dc <memset+0x4>

080045e8 <__cvt>:
 80045e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045ec:	ec55 4b10 	vmov	r4, r5, d0
 80045f0:	2d00      	cmp	r5, #0
 80045f2:	460e      	mov	r6, r1
 80045f4:	4619      	mov	r1, r3
 80045f6:	462b      	mov	r3, r5
 80045f8:	bfbb      	ittet	lt
 80045fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80045fe:	461d      	movlt	r5, r3
 8004600:	2300      	movge	r3, #0
 8004602:	232d      	movlt	r3, #45	; 0x2d
 8004604:	700b      	strb	r3, [r1, #0]
 8004606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004608:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800460c:	4691      	mov	r9, r2
 800460e:	f023 0820 	bic.w	r8, r3, #32
 8004612:	bfbc      	itt	lt
 8004614:	4622      	movlt	r2, r4
 8004616:	4614      	movlt	r4, r2
 8004618:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800461c:	d005      	beq.n	800462a <__cvt+0x42>
 800461e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004622:	d100      	bne.n	8004626 <__cvt+0x3e>
 8004624:	3601      	adds	r6, #1
 8004626:	2102      	movs	r1, #2
 8004628:	e000      	b.n	800462c <__cvt+0x44>
 800462a:	2103      	movs	r1, #3
 800462c:	ab03      	add	r3, sp, #12
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	ab02      	add	r3, sp, #8
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	ec45 4b10 	vmov	d0, r4, r5
 8004638:	4653      	mov	r3, sl
 800463a:	4632      	mov	r2, r6
 800463c:	f001 ff10 	bl	8006460 <_dtoa_r>
 8004640:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004644:	4607      	mov	r7, r0
 8004646:	d102      	bne.n	800464e <__cvt+0x66>
 8004648:	f019 0f01 	tst.w	r9, #1
 800464c:	d022      	beq.n	8004694 <__cvt+0xac>
 800464e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004652:	eb07 0906 	add.w	r9, r7, r6
 8004656:	d110      	bne.n	800467a <__cvt+0x92>
 8004658:	783b      	ldrb	r3, [r7, #0]
 800465a:	2b30      	cmp	r3, #48	; 0x30
 800465c:	d10a      	bne.n	8004674 <__cvt+0x8c>
 800465e:	2200      	movs	r2, #0
 8004660:	2300      	movs	r3, #0
 8004662:	4620      	mov	r0, r4
 8004664:	4629      	mov	r1, r5
 8004666:	f7fc fa37 	bl	8000ad8 <__aeabi_dcmpeq>
 800466a:	b918      	cbnz	r0, 8004674 <__cvt+0x8c>
 800466c:	f1c6 0601 	rsb	r6, r6, #1
 8004670:	f8ca 6000 	str.w	r6, [sl]
 8004674:	f8da 3000 	ldr.w	r3, [sl]
 8004678:	4499      	add	r9, r3
 800467a:	2200      	movs	r2, #0
 800467c:	2300      	movs	r3, #0
 800467e:	4620      	mov	r0, r4
 8004680:	4629      	mov	r1, r5
 8004682:	f7fc fa29 	bl	8000ad8 <__aeabi_dcmpeq>
 8004686:	b108      	cbz	r0, 800468c <__cvt+0xa4>
 8004688:	f8cd 900c 	str.w	r9, [sp, #12]
 800468c:	2230      	movs	r2, #48	; 0x30
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	454b      	cmp	r3, r9
 8004692:	d307      	bcc.n	80046a4 <__cvt+0xbc>
 8004694:	9b03      	ldr	r3, [sp, #12]
 8004696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004698:	1bdb      	subs	r3, r3, r7
 800469a:	4638      	mov	r0, r7
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	b004      	add	sp, #16
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	1c59      	adds	r1, r3, #1
 80046a6:	9103      	str	r1, [sp, #12]
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e7f0      	b.n	800468e <__cvt+0xa6>

080046ac <__exponent>:
 80046ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ae:	4603      	mov	r3, r0
 80046b0:	2900      	cmp	r1, #0
 80046b2:	bfb8      	it	lt
 80046b4:	4249      	neglt	r1, r1
 80046b6:	f803 2b02 	strb.w	r2, [r3], #2
 80046ba:	bfb4      	ite	lt
 80046bc:	222d      	movlt	r2, #45	; 0x2d
 80046be:	222b      	movge	r2, #43	; 0x2b
 80046c0:	2909      	cmp	r1, #9
 80046c2:	7042      	strb	r2, [r0, #1]
 80046c4:	dd2a      	ble.n	800471c <__exponent+0x70>
 80046c6:	f10d 0407 	add.w	r4, sp, #7
 80046ca:	46a4      	mov	ip, r4
 80046cc:	270a      	movs	r7, #10
 80046ce:	46a6      	mov	lr, r4
 80046d0:	460a      	mov	r2, r1
 80046d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80046d6:	fb07 1516 	mls	r5, r7, r6, r1
 80046da:	3530      	adds	r5, #48	; 0x30
 80046dc:	2a63      	cmp	r2, #99	; 0x63
 80046de:	f104 34ff 	add.w	r4, r4, #4294967295
 80046e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80046e6:	4631      	mov	r1, r6
 80046e8:	dcf1      	bgt.n	80046ce <__exponent+0x22>
 80046ea:	3130      	adds	r1, #48	; 0x30
 80046ec:	f1ae 0502 	sub.w	r5, lr, #2
 80046f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046f4:	1c44      	adds	r4, r0, #1
 80046f6:	4629      	mov	r1, r5
 80046f8:	4561      	cmp	r1, ip
 80046fa:	d30a      	bcc.n	8004712 <__exponent+0x66>
 80046fc:	f10d 0209 	add.w	r2, sp, #9
 8004700:	eba2 020e 	sub.w	r2, r2, lr
 8004704:	4565      	cmp	r5, ip
 8004706:	bf88      	it	hi
 8004708:	2200      	movhi	r2, #0
 800470a:	4413      	add	r3, r2
 800470c:	1a18      	subs	r0, r3, r0
 800470e:	b003      	add	sp, #12
 8004710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004716:	f804 2f01 	strb.w	r2, [r4, #1]!
 800471a:	e7ed      	b.n	80046f8 <__exponent+0x4c>
 800471c:	2330      	movs	r3, #48	; 0x30
 800471e:	3130      	adds	r1, #48	; 0x30
 8004720:	7083      	strb	r3, [r0, #2]
 8004722:	70c1      	strb	r1, [r0, #3]
 8004724:	1d03      	adds	r3, r0, #4
 8004726:	e7f1      	b.n	800470c <__exponent+0x60>

08004728 <_printf_float>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	ed2d 8b02 	vpush	{d8}
 8004730:	b08d      	sub	sp, #52	; 0x34
 8004732:	460c      	mov	r4, r1
 8004734:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004738:	4616      	mov	r6, r2
 800473a:	461f      	mov	r7, r3
 800473c:	4605      	mov	r5, r0
 800473e:	f003 f9a3 	bl	8007a88 <_localeconv_r>
 8004742:	f8d0 a000 	ldr.w	sl, [r0]
 8004746:	4650      	mov	r0, sl
 8004748:	f7fb fd4a 	bl	80001e0 <strlen>
 800474c:	2300      	movs	r3, #0
 800474e:	930a      	str	r3, [sp, #40]	; 0x28
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	9305      	str	r3, [sp, #20]
 8004754:	f8d8 3000 	ldr.w	r3, [r8]
 8004758:	f894 b018 	ldrb.w	fp, [r4, #24]
 800475c:	3307      	adds	r3, #7
 800475e:	f023 0307 	bic.w	r3, r3, #7
 8004762:	f103 0208 	add.w	r2, r3, #8
 8004766:	f8c8 2000 	str.w	r2, [r8]
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004772:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004776:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800477a:	9307      	str	r3, [sp, #28]
 800477c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004780:	ee08 0a10 	vmov	s16, r0
 8004784:	4b9f      	ldr	r3, [pc, #636]	; (8004a04 <_printf_float+0x2dc>)
 8004786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800478a:	f04f 32ff 	mov.w	r2, #4294967295
 800478e:	f7fc f9d5 	bl	8000b3c <__aeabi_dcmpun>
 8004792:	bb88      	cbnz	r0, 80047f8 <_printf_float+0xd0>
 8004794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004798:	4b9a      	ldr	r3, [pc, #616]	; (8004a04 <_printf_float+0x2dc>)
 800479a:	f04f 32ff 	mov.w	r2, #4294967295
 800479e:	f7fc f9af 	bl	8000b00 <__aeabi_dcmple>
 80047a2:	bb48      	cbnz	r0, 80047f8 <_printf_float+0xd0>
 80047a4:	2200      	movs	r2, #0
 80047a6:	2300      	movs	r3, #0
 80047a8:	4640      	mov	r0, r8
 80047aa:	4649      	mov	r1, r9
 80047ac:	f7fc f99e 	bl	8000aec <__aeabi_dcmplt>
 80047b0:	b110      	cbz	r0, 80047b8 <_printf_float+0x90>
 80047b2:	232d      	movs	r3, #45	; 0x2d
 80047b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b8:	4b93      	ldr	r3, [pc, #588]	; (8004a08 <_printf_float+0x2e0>)
 80047ba:	4894      	ldr	r0, [pc, #592]	; (8004a0c <_printf_float+0x2e4>)
 80047bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80047c0:	bf94      	ite	ls
 80047c2:	4698      	movls	r8, r3
 80047c4:	4680      	movhi	r8, r0
 80047c6:	2303      	movs	r3, #3
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	9b05      	ldr	r3, [sp, #20]
 80047cc:	f023 0204 	bic.w	r2, r3, #4
 80047d0:	6022      	str	r2, [r4, #0]
 80047d2:	f04f 0900 	mov.w	r9, #0
 80047d6:	9700      	str	r7, [sp, #0]
 80047d8:	4633      	mov	r3, r6
 80047da:	aa0b      	add	r2, sp, #44	; 0x2c
 80047dc:	4621      	mov	r1, r4
 80047de:	4628      	mov	r0, r5
 80047e0:	f000 f9d8 	bl	8004b94 <_printf_common>
 80047e4:	3001      	adds	r0, #1
 80047e6:	f040 8090 	bne.w	800490a <_printf_float+0x1e2>
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	b00d      	add	sp, #52	; 0x34
 80047f0:	ecbd 8b02 	vpop	{d8}
 80047f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f8:	4642      	mov	r2, r8
 80047fa:	464b      	mov	r3, r9
 80047fc:	4640      	mov	r0, r8
 80047fe:	4649      	mov	r1, r9
 8004800:	f7fc f99c 	bl	8000b3c <__aeabi_dcmpun>
 8004804:	b140      	cbz	r0, 8004818 <_printf_float+0xf0>
 8004806:	464b      	mov	r3, r9
 8004808:	2b00      	cmp	r3, #0
 800480a:	bfbc      	itt	lt
 800480c:	232d      	movlt	r3, #45	; 0x2d
 800480e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004812:	487f      	ldr	r0, [pc, #508]	; (8004a10 <_printf_float+0x2e8>)
 8004814:	4b7f      	ldr	r3, [pc, #508]	; (8004a14 <_printf_float+0x2ec>)
 8004816:	e7d1      	b.n	80047bc <_printf_float+0x94>
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800481e:	9206      	str	r2, [sp, #24]
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	d13f      	bne.n	80048a4 <_printf_float+0x17c>
 8004824:	2306      	movs	r3, #6
 8004826:	6063      	str	r3, [r4, #4]
 8004828:	9b05      	ldr	r3, [sp, #20]
 800482a:	6861      	ldr	r1, [r4, #4]
 800482c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004830:	2300      	movs	r3, #0
 8004832:	9303      	str	r3, [sp, #12]
 8004834:	ab0a      	add	r3, sp, #40	; 0x28
 8004836:	e9cd b301 	strd	fp, r3, [sp, #4]
 800483a:	ab09      	add	r3, sp, #36	; 0x24
 800483c:	ec49 8b10 	vmov	d0, r8, r9
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	6022      	str	r2, [r4, #0]
 8004844:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004848:	4628      	mov	r0, r5
 800484a:	f7ff fecd 	bl	80045e8 <__cvt>
 800484e:	9b06      	ldr	r3, [sp, #24]
 8004850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004852:	2b47      	cmp	r3, #71	; 0x47
 8004854:	4680      	mov	r8, r0
 8004856:	d108      	bne.n	800486a <_printf_float+0x142>
 8004858:	1cc8      	adds	r0, r1, #3
 800485a:	db02      	blt.n	8004862 <_printf_float+0x13a>
 800485c:	6863      	ldr	r3, [r4, #4]
 800485e:	4299      	cmp	r1, r3
 8004860:	dd41      	ble.n	80048e6 <_printf_float+0x1be>
 8004862:	f1ab 0b02 	sub.w	fp, fp, #2
 8004866:	fa5f fb8b 	uxtb.w	fp, fp
 800486a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800486e:	d820      	bhi.n	80048b2 <_printf_float+0x18a>
 8004870:	3901      	subs	r1, #1
 8004872:	465a      	mov	r2, fp
 8004874:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004878:	9109      	str	r1, [sp, #36]	; 0x24
 800487a:	f7ff ff17 	bl	80046ac <__exponent>
 800487e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004880:	1813      	adds	r3, r2, r0
 8004882:	2a01      	cmp	r2, #1
 8004884:	4681      	mov	r9, r0
 8004886:	6123      	str	r3, [r4, #16]
 8004888:	dc02      	bgt.n	8004890 <_printf_float+0x168>
 800488a:	6822      	ldr	r2, [r4, #0]
 800488c:	07d2      	lsls	r2, r2, #31
 800488e:	d501      	bpl.n	8004894 <_printf_float+0x16c>
 8004890:	3301      	adds	r3, #1
 8004892:	6123      	str	r3, [r4, #16]
 8004894:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004898:	2b00      	cmp	r3, #0
 800489a:	d09c      	beq.n	80047d6 <_printf_float+0xae>
 800489c:	232d      	movs	r3, #45	; 0x2d
 800489e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a2:	e798      	b.n	80047d6 <_printf_float+0xae>
 80048a4:	9a06      	ldr	r2, [sp, #24]
 80048a6:	2a47      	cmp	r2, #71	; 0x47
 80048a8:	d1be      	bne.n	8004828 <_printf_float+0x100>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1bc      	bne.n	8004828 <_printf_float+0x100>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e7b9      	b.n	8004826 <_printf_float+0xfe>
 80048b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80048b6:	d118      	bne.n	80048ea <_printf_float+0x1c2>
 80048b8:	2900      	cmp	r1, #0
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	dd0b      	ble.n	80048d6 <_printf_float+0x1ae>
 80048be:	6121      	str	r1, [r4, #16]
 80048c0:	b913      	cbnz	r3, 80048c8 <_printf_float+0x1a0>
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	07d0      	lsls	r0, r2, #31
 80048c6:	d502      	bpl.n	80048ce <_printf_float+0x1a6>
 80048c8:	3301      	adds	r3, #1
 80048ca:	440b      	add	r3, r1
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80048d0:	f04f 0900 	mov.w	r9, #0
 80048d4:	e7de      	b.n	8004894 <_printf_float+0x16c>
 80048d6:	b913      	cbnz	r3, 80048de <_printf_float+0x1b6>
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	07d2      	lsls	r2, r2, #31
 80048dc:	d501      	bpl.n	80048e2 <_printf_float+0x1ba>
 80048de:	3302      	adds	r3, #2
 80048e0:	e7f4      	b.n	80048cc <_printf_float+0x1a4>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e7f2      	b.n	80048cc <_printf_float+0x1a4>
 80048e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80048ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ec:	4299      	cmp	r1, r3
 80048ee:	db05      	blt.n	80048fc <_printf_float+0x1d4>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	6121      	str	r1, [r4, #16]
 80048f4:	07d8      	lsls	r0, r3, #31
 80048f6:	d5ea      	bpl.n	80048ce <_printf_float+0x1a6>
 80048f8:	1c4b      	adds	r3, r1, #1
 80048fa:	e7e7      	b.n	80048cc <_printf_float+0x1a4>
 80048fc:	2900      	cmp	r1, #0
 80048fe:	bfd4      	ite	le
 8004900:	f1c1 0202 	rsble	r2, r1, #2
 8004904:	2201      	movgt	r2, #1
 8004906:	4413      	add	r3, r2
 8004908:	e7e0      	b.n	80048cc <_printf_float+0x1a4>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	055a      	lsls	r2, r3, #21
 800490e:	d407      	bmi.n	8004920 <_printf_float+0x1f8>
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	4642      	mov	r2, r8
 8004914:	4631      	mov	r1, r6
 8004916:	4628      	mov	r0, r5
 8004918:	47b8      	blx	r7
 800491a:	3001      	adds	r0, #1
 800491c:	d12c      	bne.n	8004978 <_printf_float+0x250>
 800491e:	e764      	b.n	80047ea <_printf_float+0xc2>
 8004920:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004924:	f240 80e0 	bls.w	8004ae8 <_printf_float+0x3c0>
 8004928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800492c:	2200      	movs	r2, #0
 800492e:	2300      	movs	r3, #0
 8004930:	f7fc f8d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004934:	2800      	cmp	r0, #0
 8004936:	d034      	beq.n	80049a2 <_printf_float+0x27a>
 8004938:	4a37      	ldr	r2, [pc, #220]	; (8004a18 <_printf_float+0x2f0>)
 800493a:	2301      	movs	r3, #1
 800493c:	4631      	mov	r1, r6
 800493e:	4628      	mov	r0, r5
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	f43f af51 	beq.w	80047ea <_printf_float+0xc2>
 8004948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800494c:	429a      	cmp	r2, r3
 800494e:	db02      	blt.n	8004956 <_printf_float+0x22e>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	07d8      	lsls	r0, r3, #31
 8004954:	d510      	bpl.n	8004978 <_printf_float+0x250>
 8004956:	ee18 3a10 	vmov	r3, s16
 800495a:	4652      	mov	r2, sl
 800495c:	4631      	mov	r1, r6
 800495e:	4628      	mov	r0, r5
 8004960:	47b8      	blx	r7
 8004962:	3001      	adds	r0, #1
 8004964:	f43f af41 	beq.w	80047ea <_printf_float+0xc2>
 8004968:	f04f 0800 	mov.w	r8, #0
 800496c:	f104 091a 	add.w	r9, r4, #26
 8004970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	4543      	cmp	r3, r8
 8004976:	dc09      	bgt.n	800498c <_printf_float+0x264>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	079b      	lsls	r3, r3, #30
 800497c:	f100 8105 	bmi.w	8004b8a <_printf_float+0x462>
 8004980:	68e0      	ldr	r0, [r4, #12]
 8004982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004984:	4298      	cmp	r0, r3
 8004986:	bfb8      	it	lt
 8004988:	4618      	movlt	r0, r3
 800498a:	e730      	b.n	80047ee <_printf_float+0xc6>
 800498c:	2301      	movs	r3, #1
 800498e:	464a      	mov	r2, r9
 8004990:	4631      	mov	r1, r6
 8004992:	4628      	mov	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	f43f af27 	beq.w	80047ea <_printf_float+0xc2>
 800499c:	f108 0801 	add.w	r8, r8, #1
 80049a0:	e7e6      	b.n	8004970 <_printf_float+0x248>
 80049a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dc39      	bgt.n	8004a1c <_printf_float+0x2f4>
 80049a8:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <_printf_float+0x2f0>)
 80049aa:	2301      	movs	r3, #1
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f af19 	beq.w	80047ea <_printf_float+0xc2>
 80049b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049bc:	4313      	orrs	r3, r2
 80049be:	d102      	bne.n	80049c6 <_printf_float+0x29e>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	07d9      	lsls	r1, r3, #31
 80049c4:	d5d8      	bpl.n	8004978 <_printf_float+0x250>
 80049c6:	ee18 3a10 	vmov	r3, s16
 80049ca:	4652      	mov	r2, sl
 80049cc:	4631      	mov	r1, r6
 80049ce:	4628      	mov	r0, r5
 80049d0:	47b8      	blx	r7
 80049d2:	3001      	adds	r0, #1
 80049d4:	f43f af09 	beq.w	80047ea <_printf_float+0xc2>
 80049d8:	f04f 0900 	mov.w	r9, #0
 80049dc:	f104 0a1a 	add.w	sl, r4, #26
 80049e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e2:	425b      	negs	r3, r3
 80049e4:	454b      	cmp	r3, r9
 80049e6:	dc01      	bgt.n	80049ec <_printf_float+0x2c4>
 80049e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ea:	e792      	b.n	8004912 <_printf_float+0x1ea>
 80049ec:	2301      	movs	r3, #1
 80049ee:	4652      	mov	r2, sl
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	f43f aef7 	beq.w	80047ea <_printf_float+0xc2>
 80049fc:	f109 0901 	add.w	r9, r9, #1
 8004a00:	e7ee      	b.n	80049e0 <_printf_float+0x2b8>
 8004a02:	bf00      	nop
 8004a04:	7fefffff 	.word	0x7fefffff
 8004a08:	0800918c 	.word	0x0800918c
 8004a0c:	08009190 	.word	0x08009190
 8004a10:	08009198 	.word	0x08009198
 8004a14:	08009194 	.word	0x08009194
 8004a18:	0800919c 	.word	0x0800919c
 8004a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a20:	429a      	cmp	r2, r3
 8004a22:	bfa8      	it	ge
 8004a24:	461a      	movge	r2, r3
 8004a26:	2a00      	cmp	r2, #0
 8004a28:	4691      	mov	r9, r2
 8004a2a:	dc37      	bgt.n	8004a9c <_printf_float+0x374>
 8004a2c:	f04f 0b00 	mov.w	fp, #0
 8004a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a34:	f104 021a 	add.w	r2, r4, #26
 8004a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	eba3 0309 	sub.w	r3, r3, r9
 8004a40:	455b      	cmp	r3, fp
 8004a42:	dc33      	bgt.n	8004aac <_printf_float+0x384>
 8004a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	db3b      	blt.n	8004ac4 <_printf_float+0x39c>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	07da      	lsls	r2, r3, #31
 8004a50:	d438      	bmi.n	8004ac4 <_printf_float+0x39c>
 8004a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a54:	9a05      	ldr	r2, [sp, #20]
 8004a56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a58:	1a9a      	subs	r2, r3, r2
 8004a5a:	eba3 0901 	sub.w	r9, r3, r1
 8004a5e:	4591      	cmp	r9, r2
 8004a60:	bfa8      	it	ge
 8004a62:	4691      	movge	r9, r2
 8004a64:	f1b9 0f00 	cmp.w	r9, #0
 8004a68:	dc35      	bgt.n	8004ad6 <_printf_float+0x3ae>
 8004a6a:	f04f 0800 	mov.w	r8, #0
 8004a6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a72:	f104 0a1a 	add.w	sl, r4, #26
 8004a76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	eba3 0309 	sub.w	r3, r3, r9
 8004a80:	4543      	cmp	r3, r8
 8004a82:	f77f af79 	ble.w	8004978 <_printf_float+0x250>
 8004a86:	2301      	movs	r3, #1
 8004a88:	4652      	mov	r2, sl
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	f43f aeaa 	beq.w	80047ea <_printf_float+0xc2>
 8004a96:	f108 0801 	add.w	r8, r8, #1
 8004a9a:	e7ec      	b.n	8004a76 <_printf_float+0x34e>
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d1c0      	bne.n	8004a2c <_printf_float+0x304>
 8004aaa:	e69e      	b.n	80047ea <_printf_float+0xc2>
 8004aac:	2301      	movs	r3, #1
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	9205      	str	r2, [sp, #20]
 8004ab4:	47b8      	blx	r7
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	f43f ae97 	beq.w	80047ea <_printf_float+0xc2>
 8004abc:	9a05      	ldr	r2, [sp, #20]
 8004abe:	f10b 0b01 	add.w	fp, fp, #1
 8004ac2:	e7b9      	b.n	8004a38 <_printf_float+0x310>
 8004ac4:	ee18 3a10 	vmov	r3, s16
 8004ac8:	4652      	mov	r2, sl
 8004aca:	4631      	mov	r1, r6
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b8      	blx	r7
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d1be      	bne.n	8004a52 <_printf_float+0x32a>
 8004ad4:	e689      	b.n	80047ea <_printf_float+0xc2>
 8004ad6:	9a05      	ldr	r2, [sp, #20]
 8004ad8:	464b      	mov	r3, r9
 8004ada:	4442      	add	r2, r8
 8004adc:	4631      	mov	r1, r6
 8004ade:	4628      	mov	r0, r5
 8004ae0:	47b8      	blx	r7
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d1c1      	bne.n	8004a6a <_printf_float+0x342>
 8004ae6:	e680      	b.n	80047ea <_printf_float+0xc2>
 8004ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aea:	2a01      	cmp	r2, #1
 8004aec:	dc01      	bgt.n	8004af2 <_printf_float+0x3ca>
 8004aee:	07db      	lsls	r3, r3, #31
 8004af0:	d538      	bpl.n	8004b64 <_printf_float+0x43c>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4642      	mov	r2, r8
 8004af6:	4631      	mov	r1, r6
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b8      	blx	r7
 8004afc:	3001      	adds	r0, #1
 8004afe:	f43f ae74 	beq.w	80047ea <_printf_float+0xc2>
 8004b02:	ee18 3a10 	vmov	r3, s16
 8004b06:	4652      	mov	r2, sl
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f43f ae6b 	beq.w	80047ea <_printf_float+0xc2>
 8004b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f7fb ffdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b20:	b9d8      	cbnz	r0, 8004b5a <_printf_float+0x432>
 8004b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b24:	f108 0201 	add.w	r2, r8, #1
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	d10e      	bne.n	8004b52 <_printf_float+0x42a>
 8004b34:	e659      	b.n	80047ea <_printf_float+0xc2>
 8004b36:	2301      	movs	r3, #1
 8004b38:	4652      	mov	r2, sl
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	f43f ae52 	beq.w	80047ea <_printf_float+0xc2>
 8004b46:	f108 0801 	add.w	r8, r8, #1
 8004b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	4543      	cmp	r3, r8
 8004b50:	dcf1      	bgt.n	8004b36 <_printf_float+0x40e>
 8004b52:	464b      	mov	r3, r9
 8004b54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b58:	e6dc      	b.n	8004914 <_printf_float+0x1ec>
 8004b5a:	f04f 0800 	mov.w	r8, #0
 8004b5e:	f104 0a1a 	add.w	sl, r4, #26
 8004b62:	e7f2      	b.n	8004b4a <_printf_float+0x422>
 8004b64:	2301      	movs	r3, #1
 8004b66:	4642      	mov	r2, r8
 8004b68:	e7df      	b.n	8004b2a <_printf_float+0x402>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	464a      	mov	r2, r9
 8004b6e:	4631      	mov	r1, r6
 8004b70:	4628      	mov	r0, r5
 8004b72:	47b8      	blx	r7
 8004b74:	3001      	adds	r0, #1
 8004b76:	f43f ae38 	beq.w	80047ea <_printf_float+0xc2>
 8004b7a:	f108 0801 	add.w	r8, r8, #1
 8004b7e:	68e3      	ldr	r3, [r4, #12]
 8004b80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b82:	1a5b      	subs	r3, r3, r1
 8004b84:	4543      	cmp	r3, r8
 8004b86:	dcf0      	bgt.n	8004b6a <_printf_float+0x442>
 8004b88:	e6fa      	b.n	8004980 <_printf_float+0x258>
 8004b8a:	f04f 0800 	mov.w	r8, #0
 8004b8e:	f104 0919 	add.w	r9, r4, #25
 8004b92:	e7f4      	b.n	8004b7e <_printf_float+0x456>

08004b94 <_printf_common>:
 8004b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b98:	4616      	mov	r6, r2
 8004b9a:	4699      	mov	r9, r3
 8004b9c:	688a      	ldr	r2, [r1, #8]
 8004b9e:	690b      	ldr	r3, [r1, #16]
 8004ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	bfb8      	it	lt
 8004ba8:	4613      	movlt	r3, r2
 8004baa:	6033      	str	r3, [r6, #0]
 8004bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	b10a      	cbz	r2, 8004bba <_printf_common+0x26>
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	6033      	str	r3, [r6, #0]
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	0699      	lsls	r1, r3, #26
 8004bbe:	bf42      	ittt	mi
 8004bc0:	6833      	ldrmi	r3, [r6, #0]
 8004bc2:	3302      	addmi	r3, #2
 8004bc4:	6033      	strmi	r3, [r6, #0]
 8004bc6:	6825      	ldr	r5, [r4, #0]
 8004bc8:	f015 0506 	ands.w	r5, r5, #6
 8004bcc:	d106      	bne.n	8004bdc <_printf_common+0x48>
 8004bce:	f104 0a19 	add.w	sl, r4, #25
 8004bd2:	68e3      	ldr	r3, [r4, #12]
 8004bd4:	6832      	ldr	r2, [r6, #0]
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	42ab      	cmp	r3, r5
 8004bda:	dc26      	bgt.n	8004c2a <_printf_common+0x96>
 8004bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004be0:	1e13      	subs	r3, r2, #0
 8004be2:	6822      	ldr	r2, [r4, #0]
 8004be4:	bf18      	it	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	0692      	lsls	r2, r2, #26
 8004bea:	d42b      	bmi.n	8004c44 <_printf_common+0xb0>
 8004bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	47c0      	blx	r8
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d01e      	beq.n	8004c38 <_printf_common+0xa4>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	68e5      	ldr	r5, [r4, #12]
 8004bfe:	6832      	ldr	r2, [r6, #0]
 8004c00:	f003 0306 	and.w	r3, r3, #6
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	bf08      	it	eq
 8004c08:	1aad      	subeq	r5, r5, r2
 8004c0a:	68a3      	ldr	r3, [r4, #8]
 8004c0c:	6922      	ldr	r2, [r4, #16]
 8004c0e:	bf0c      	ite	eq
 8004c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c14:	2500      	movne	r5, #0
 8004c16:	4293      	cmp	r3, r2
 8004c18:	bfc4      	itt	gt
 8004c1a:	1a9b      	subgt	r3, r3, r2
 8004c1c:	18ed      	addgt	r5, r5, r3
 8004c1e:	2600      	movs	r6, #0
 8004c20:	341a      	adds	r4, #26
 8004c22:	42b5      	cmp	r5, r6
 8004c24:	d11a      	bne.n	8004c5c <_printf_common+0xc8>
 8004c26:	2000      	movs	r0, #0
 8004c28:	e008      	b.n	8004c3c <_printf_common+0xa8>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4652      	mov	r2, sl
 8004c2e:	4649      	mov	r1, r9
 8004c30:	4638      	mov	r0, r7
 8004c32:	47c0      	blx	r8
 8004c34:	3001      	adds	r0, #1
 8004c36:	d103      	bne.n	8004c40 <_printf_common+0xac>
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c40:	3501      	adds	r5, #1
 8004c42:	e7c6      	b.n	8004bd2 <_printf_common+0x3e>
 8004c44:	18e1      	adds	r1, r4, r3
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	2030      	movs	r0, #48	; 0x30
 8004c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c4e:	4422      	add	r2, r4
 8004c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c58:	3302      	adds	r3, #2
 8004c5a:	e7c7      	b.n	8004bec <_printf_common+0x58>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4622      	mov	r2, r4
 8004c60:	4649      	mov	r1, r9
 8004c62:	4638      	mov	r0, r7
 8004c64:	47c0      	blx	r8
 8004c66:	3001      	adds	r0, #1
 8004c68:	d0e6      	beq.n	8004c38 <_printf_common+0xa4>
 8004c6a:	3601      	adds	r6, #1
 8004c6c:	e7d9      	b.n	8004c22 <_printf_common+0x8e>
	...

08004c70 <_printf_i>:
 8004c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	7e0f      	ldrb	r7, [r1, #24]
 8004c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c78:	2f78      	cmp	r7, #120	; 0x78
 8004c7a:	4691      	mov	r9, r2
 8004c7c:	4680      	mov	r8, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	469a      	mov	sl, r3
 8004c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c86:	d807      	bhi.n	8004c98 <_printf_i+0x28>
 8004c88:	2f62      	cmp	r7, #98	; 0x62
 8004c8a:	d80a      	bhi.n	8004ca2 <_printf_i+0x32>
 8004c8c:	2f00      	cmp	r7, #0
 8004c8e:	f000 80d8 	beq.w	8004e42 <_printf_i+0x1d2>
 8004c92:	2f58      	cmp	r7, #88	; 0x58
 8004c94:	f000 80a3 	beq.w	8004dde <_printf_i+0x16e>
 8004c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ca0:	e03a      	b.n	8004d18 <_printf_i+0xa8>
 8004ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ca6:	2b15      	cmp	r3, #21
 8004ca8:	d8f6      	bhi.n	8004c98 <_printf_i+0x28>
 8004caa:	a101      	add	r1, pc, #4	; (adr r1, 8004cb0 <_printf_i+0x40>)
 8004cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cb0:	08004d09 	.word	0x08004d09
 8004cb4:	08004d1d 	.word	0x08004d1d
 8004cb8:	08004c99 	.word	0x08004c99
 8004cbc:	08004c99 	.word	0x08004c99
 8004cc0:	08004c99 	.word	0x08004c99
 8004cc4:	08004c99 	.word	0x08004c99
 8004cc8:	08004d1d 	.word	0x08004d1d
 8004ccc:	08004c99 	.word	0x08004c99
 8004cd0:	08004c99 	.word	0x08004c99
 8004cd4:	08004c99 	.word	0x08004c99
 8004cd8:	08004c99 	.word	0x08004c99
 8004cdc:	08004e29 	.word	0x08004e29
 8004ce0:	08004d4d 	.word	0x08004d4d
 8004ce4:	08004e0b 	.word	0x08004e0b
 8004ce8:	08004c99 	.word	0x08004c99
 8004cec:	08004c99 	.word	0x08004c99
 8004cf0:	08004e4b 	.word	0x08004e4b
 8004cf4:	08004c99 	.word	0x08004c99
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004c99 	.word	0x08004c99
 8004d00:	08004c99 	.word	0x08004c99
 8004d04:	08004e13 	.word	0x08004e13
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	1d1a      	adds	r2, r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	602a      	str	r2, [r5, #0]
 8004d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0a3      	b.n	8004e64 <_printf_i+0x1f4>
 8004d1c:	6820      	ldr	r0, [r4, #0]
 8004d1e:	6829      	ldr	r1, [r5, #0]
 8004d20:	0606      	lsls	r6, r0, #24
 8004d22:	f101 0304 	add.w	r3, r1, #4
 8004d26:	d50a      	bpl.n	8004d3e <_printf_i+0xce>
 8004d28:	680e      	ldr	r6, [r1, #0]
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	2e00      	cmp	r6, #0
 8004d2e:	da03      	bge.n	8004d38 <_printf_i+0xc8>
 8004d30:	232d      	movs	r3, #45	; 0x2d
 8004d32:	4276      	negs	r6, r6
 8004d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d38:	485e      	ldr	r0, [pc, #376]	; (8004eb4 <_printf_i+0x244>)
 8004d3a:	230a      	movs	r3, #10
 8004d3c:	e019      	b.n	8004d72 <_printf_i+0x102>
 8004d3e:	680e      	ldr	r6, [r1, #0]
 8004d40:	602b      	str	r3, [r5, #0]
 8004d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d46:	bf18      	it	ne
 8004d48:	b236      	sxthne	r6, r6
 8004d4a:	e7ef      	b.n	8004d2c <_printf_i+0xbc>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	1d19      	adds	r1, r3, #4
 8004d52:	6029      	str	r1, [r5, #0]
 8004d54:	0601      	lsls	r1, r0, #24
 8004d56:	d501      	bpl.n	8004d5c <_printf_i+0xec>
 8004d58:	681e      	ldr	r6, [r3, #0]
 8004d5a:	e002      	b.n	8004d62 <_printf_i+0xf2>
 8004d5c:	0646      	lsls	r6, r0, #25
 8004d5e:	d5fb      	bpl.n	8004d58 <_printf_i+0xe8>
 8004d60:	881e      	ldrh	r6, [r3, #0]
 8004d62:	4854      	ldr	r0, [pc, #336]	; (8004eb4 <_printf_i+0x244>)
 8004d64:	2f6f      	cmp	r7, #111	; 0x6f
 8004d66:	bf0c      	ite	eq
 8004d68:	2308      	moveq	r3, #8
 8004d6a:	230a      	movne	r3, #10
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d72:	6865      	ldr	r5, [r4, #4]
 8004d74:	60a5      	str	r5, [r4, #8]
 8004d76:	2d00      	cmp	r5, #0
 8004d78:	bfa2      	ittt	ge
 8004d7a:	6821      	ldrge	r1, [r4, #0]
 8004d7c:	f021 0104 	bicge.w	r1, r1, #4
 8004d80:	6021      	strge	r1, [r4, #0]
 8004d82:	b90e      	cbnz	r6, 8004d88 <_printf_i+0x118>
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	d04d      	beq.n	8004e24 <_printf_i+0x1b4>
 8004d88:	4615      	mov	r5, r2
 8004d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d92:	5dc7      	ldrb	r7, [r0, r7]
 8004d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d98:	4637      	mov	r7, r6
 8004d9a:	42bb      	cmp	r3, r7
 8004d9c:	460e      	mov	r6, r1
 8004d9e:	d9f4      	bls.n	8004d8a <_printf_i+0x11a>
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d10b      	bne.n	8004dbc <_printf_i+0x14c>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	07de      	lsls	r6, r3, #31
 8004da8:	d508      	bpl.n	8004dbc <_printf_i+0x14c>
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	6861      	ldr	r1, [r4, #4]
 8004dae:	4299      	cmp	r1, r3
 8004db0:	bfde      	ittt	le
 8004db2:	2330      	movle	r3, #48	; 0x30
 8004db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dbc:	1b52      	subs	r2, r2, r5
 8004dbe:	6122      	str	r2, [r4, #16]
 8004dc0:	f8cd a000 	str.w	sl, [sp]
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	aa03      	add	r2, sp, #12
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4640      	mov	r0, r8
 8004dcc:	f7ff fee2 	bl	8004b94 <_printf_common>
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d14c      	bne.n	8004e6e <_printf_i+0x1fe>
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	b004      	add	sp, #16
 8004dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dde:	4835      	ldr	r0, [pc, #212]	; (8004eb4 <_printf_i+0x244>)
 8004de0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004de4:	6829      	ldr	r1, [r5, #0]
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dec:	6029      	str	r1, [r5, #0]
 8004dee:	061d      	lsls	r5, r3, #24
 8004df0:	d514      	bpl.n	8004e1c <_printf_i+0x1ac>
 8004df2:	07df      	lsls	r7, r3, #31
 8004df4:	bf44      	itt	mi
 8004df6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dfa:	6023      	strmi	r3, [r4, #0]
 8004dfc:	b91e      	cbnz	r6, 8004e06 <_printf_i+0x196>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	f023 0320 	bic.w	r3, r3, #32
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	2310      	movs	r3, #16
 8004e08:	e7b0      	b.n	8004d6c <_printf_i+0xfc>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f043 0320 	orr.w	r3, r3, #32
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	2378      	movs	r3, #120	; 0x78
 8004e14:	4828      	ldr	r0, [pc, #160]	; (8004eb8 <_printf_i+0x248>)
 8004e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e1a:	e7e3      	b.n	8004de4 <_printf_i+0x174>
 8004e1c:	0659      	lsls	r1, r3, #25
 8004e1e:	bf48      	it	mi
 8004e20:	b2b6      	uxthmi	r6, r6
 8004e22:	e7e6      	b.n	8004df2 <_printf_i+0x182>
 8004e24:	4615      	mov	r5, r2
 8004e26:	e7bb      	b.n	8004da0 <_printf_i+0x130>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	6826      	ldr	r6, [r4, #0]
 8004e2c:	6961      	ldr	r1, [r4, #20]
 8004e2e:	1d18      	adds	r0, r3, #4
 8004e30:	6028      	str	r0, [r5, #0]
 8004e32:	0635      	lsls	r5, r6, #24
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	d501      	bpl.n	8004e3c <_printf_i+0x1cc>
 8004e38:	6019      	str	r1, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <_printf_i+0x1d2>
 8004e3c:	0670      	lsls	r0, r6, #25
 8004e3e:	d5fb      	bpl.n	8004e38 <_printf_i+0x1c8>
 8004e40:	8019      	strh	r1, [r3, #0]
 8004e42:	2300      	movs	r3, #0
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	4615      	mov	r5, r2
 8004e48:	e7ba      	b.n	8004dc0 <_printf_i+0x150>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	1d1a      	adds	r2, r3, #4
 8004e4e:	602a      	str	r2, [r5, #0]
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	6862      	ldr	r2, [r4, #4]
 8004e54:	2100      	movs	r1, #0
 8004e56:	4628      	mov	r0, r5
 8004e58:	f7fb f9ca 	bl	80001f0 <memchr>
 8004e5c:	b108      	cbz	r0, 8004e62 <_printf_i+0x1f2>
 8004e5e:	1b40      	subs	r0, r0, r5
 8004e60:	6060      	str	r0, [r4, #4]
 8004e62:	6863      	ldr	r3, [r4, #4]
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	2300      	movs	r3, #0
 8004e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e6c:	e7a8      	b.n	8004dc0 <_printf_i+0x150>
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	462a      	mov	r2, r5
 8004e72:	4649      	mov	r1, r9
 8004e74:	4640      	mov	r0, r8
 8004e76:	47d0      	blx	sl
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d0ab      	beq.n	8004dd4 <_printf_i+0x164>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	079b      	lsls	r3, r3, #30
 8004e80:	d413      	bmi.n	8004eaa <_printf_i+0x23a>
 8004e82:	68e0      	ldr	r0, [r4, #12]
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	4298      	cmp	r0, r3
 8004e88:	bfb8      	it	lt
 8004e8a:	4618      	movlt	r0, r3
 8004e8c:	e7a4      	b.n	8004dd8 <_printf_i+0x168>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4632      	mov	r2, r6
 8004e92:	4649      	mov	r1, r9
 8004e94:	4640      	mov	r0, r8
 8004e96:	47d0      	blx	sl
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d09b      	beq.n	8004dd4 <_printf_i+0x164>
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	68e3      	ldr	r3, [r4, #12]
 8004ea0:	9903      	ldr	r1, [sp, #12]
 8004ea2:	1a5b      	subs	r3, r3, r1
 8004ea4:	42ab      	cmp	r3, r5
 8004ea6:	dcf2      	bgt.n	8004e8e <_printf_i+0x21e>
 8004ea8:	e7eb      	b.n	8004e82 <_printf_i+0x212>
 8004eaa:	2500      	movs	r5, #0
 8004eac:	f104 0619 	add.w	r6, r4, #25
 8004eb0:	e7f5      	b.n	8004e9e <_printf_i+0x22e>
 8004eb2:	bf00      	nop
 8004eb4:	0800919e 	.word	0x0800919e
 8004eb8:	080091af 	.word	0x080091af

08004ebc <_scanf_float>:
 8004ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	b087      	sub	sp, #28
 8004ec2:	4617      	mov	r7, r2
 8004ec4:	9303      	str	r3, [sp, #12]
 8004ec6:	688b      	ldr	r3, [r1, #8]
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004ece:	bf83      	ittte	hi
 8004ed0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004ed4:	195b      	addhi	r3, r3, r5
 8004ed6:	9302      	strhi	r3, [sp, #8]
 8004ed8:	2300      	movls	r3, #0
 8004eda:	bf86      	itte	hi
 8004edc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004ee0:	608b      	strhi	r3, [r1, #8]
 8004ee2:	9302      	strls	r3, [sp, #8]
 8004ee4:	680b      	ldr	r3, [r1, #0]
 8004ee6:	468b      	mov	fp, r1
 8004ee8:	2500      	movs	r5, #0
 8004eea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004eee:	f84b 3b1c 	str.w	r3, [fp], #28
 8004ef2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004ef6:	4680      	mov	r8, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	465e      	mov	r6, fp
 8004efc:	46aa      	mov	sl, r5
 8004efe:	46a9      	mov	r9, r5
 8004f00:	9501      	str	r5, [sp, #4]
 8004f02:	68a2      	ldr	r2, [r4, #8]
 8004f04:	b152      	cbz	r2, 8004f1c <_scanf_float+0x60>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b4e      	cmp	r3, #78	; 0x4e
 8004f0c:	d864      	bhi.n	8004fd8 <_scanf_float+0x11c>
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d83c      	bhi.n	8004f8c <_scanf_float+0xd0>
 8004f12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004f16:	b2c8      	uxtb	r0, r1
 8004f18:	280e      	cmp	r0, #14
 8004f1a:	d93a      	bls.n	8004f92 <_scanf_float+0xd6>
 8004f1c:	f1b9 0f00 	cmp.w	r9, #0
 8004f20:	d003      	beq.n	8004f2a <_scanf_float+0x6e>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f2e:	f1ba 0f01 	cmp.w	sl, #1
 8004f32:	f200 8113 	bhi.w	800515c <_scanf_float+0x2a0>
 8004f36:	455e      	cmp	r6, fp
 8004f38:	f200 8105 	bhi.w	8005146 <_scanf_float+0x28a>
 8004f3c:	2501      	movs	r5, #1
 8004f3e:	4628      	mov	r0, r5
 8004f40:	b007      	add	sp, #28
 8004f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004f4a:	2a0d      	cmp	r2, #13
 8004f4c:	d8e6      	bhi.n	8004f1c <_scanf_float+0x60>
 8004f4e:	a101      	add	r1, pc, #4	; (adr r1, 8004f54 <_scanf_float+0x98>)
 8004f50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f54:	08005093 	.word	0x08005093
 8004f58:	08004f1d 	.word	0x08004f1d
 8004f5c:	08004f1d 	.word	0x08004f1d
 8004f60:	08004f1d 	.word	0x08004f1d
 8004f64:	080050f3 	.word	0x080050f3
 8004f68:	080050cb 	.word	0x080050cb
 8004f6c:	08004f1d 	.word	0x08004f1d
 8004f70:	08004f1d 	.word	0x08004f1d
 8004f74:	080050a1 	.word	0x080050a1
 8004f78:	08004f1d 	.word	0x08004f1d
 8004f7c:	08004f1d 	.word	0x08004f1d
 8004f80:	08004f1d 	.word	0x08004f1d
 8004f84:	08004f1d 	.word	0x08004f1d
 8004f88:	08005059 	.word	0x08005059
 8004f8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004f90:	e7db      	b.n	8004f4a <_scanf_float+0x8e>
 8004f92:	290e      	cmp	r1, #14
 8004f94:	d8c2      	bhi.n	8004f1c <_scanf_float+0x60>
 8004f96:	a001      	add	r0, pc, #4	; (adr r0, 8004f9c <_scanf_float+0xe0>)
 8004f98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004f9c:	0800504b 	.word	0x0800504b
 8004fa0:	08004f1d 	.word	0x08004f1d
 8004fa4:	0800504b 	.word	0x0800504b
 8004fa8:	080050df 	.word	0x080050df
 8004fac:	08004f1d 	.word	0x08004f1d
 8004fb0:	08004ff9 	.word	0x08004ff9
 8004fb4:	08005035 	.word	0x08005035
 8004fb8:	08005035 	.word	0x08005035
 8004fbc:	08005035 	.word	0x08005035
 8004fc0:	08005035 	.word	0x08005035
 8004fc4:	08005035 	.word	0x08005035
 8004fc8:	08005035 	.word	0x08005035
 8004fcc:	08005035 	.word	0x08005035
 8004fd0:	08005035 	.word	0x08005035
 8004fd4:	08005035 	.word	0x08005035
 8004fd8:	2b6e      	cmp	r3, #110	; 0x6e
 8004fda:	d809      	bhi.n	8004ff0 <_scanf_float+0x134>
 8004fdc:	2b60      	cmp	r3, #96	; 0x60
 8004fde:	d8b2      	bhi.n	8004f46 <_scanf_float+0x8a>
 8004fe0:	2b54      	cmp	r3, #84	; 0x54
 8004fe2:	d077      	beq.n	80050d4 <_scanf_float+0x218>
 8004fe4:	2b59      	cmp	r3, #89	; 0x59
 8004fe6:	d199      	bne.n	8004f1c <_scanf_float+0x60>
 8004fe8:	2d07      	cmp	r5, #7
 8004fea:	d197      	bne.n	8004f1c <_scanf_float+0x60>
 8004fec:	2508      	movs	r5, #8
 8004fee:	e029      	b.n	8005044 <_scanf_float+0x188>
 8004ff0:	2b74      	cmp	r3, #116	; 0x74
 8004ff2:	d06f      	beq.n	80050d4 <_scanf_float+0x218>
 8004ff4:	2b79      	cmp	r3, #121	; 0x79
 8004ff6:	e7f6      	b.n	8004fe6 <_scanf_float+0x12a>
 8004ff8:	6821      	ldr	r1, [r4, #0]
 8004ffa:	05c8      	lsls	r0, r1, #23
 8004ffc:	d51a      	bpl.n	8005034 <_scanf_float+0x178>
 8004ffe:	9b02      	ldr	r3, [sp, #8]
 8005000:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005004:	6021      	str	r1, [r4, #0]
 8005006:	f109 0901 	add.w	r9, r9, #1
 800500a:	b11b      	cbz	r3, 8005014 <_scanf_float+0x158>
 800500c:	3b01      	subs	r3, #1
 800500e:	3201      	adds	r2, #1
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	60a2      	str	r2, [r4, #8]
 8005014:	68a3      	ldr	r3, [r4, #8]
 8005016:	3b01      	subs	r3, #1
 8005018:	60a3      	str	r3, [r4, #8]
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	3301      	adds	r3, #1
 800501e:	6123      	str	r3, [r4, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3b01      	subs	r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	f340 8084 	ble.w	8005134 <_scanf_float+0x278>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	3301      	adds	r3, #1
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	e766      	b.n	8004f02 <_scanf_float+0x46>
 8005034:	eb1a 0f05 	cmn.w	sl, r5
 8005038:	f47f af70 	bne.w	8004f1c <_scanf_float+0x60>
 800503c:	6822      	ldr	r2, [r4, #0]
 800503e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005042:	6022      	str	r2, [r4, #0]
 8005044:	f806 3b01 	strb.w	r3, [r6], #1
 8005048:	e7e4      	b.n	8005014 <_scanf_float+0x158>
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	0610      	lsls	r0, r2, #24
 800504e:	f57f af65 	bpl.w	8004f1c <_scanf_float+0x60>
 8005052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005056:	e7f4      	b.n	8005042 <_scanf_float+0x186>
 8005058:	f1ba 0f00 	cmp.w	sl, #0
 800505c:	d10e      	bne.n	800507c <_scanf_float+0x1c0>
 800505e:	f1b9 0f00 	cmp.w	r9, #0
 8005062:	d10e      	bne.n	8005082 <_scanf_float+0x1c6>
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800506a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800506e:	d108      	bne.n	8005082 <_scanf_float+0x1c6>
 8005070:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005074:	6022      	str	r2, [r4, #0]
 8005076:	f04f 0a01 	mov.w	sl, #1
 800507a:	e7e3      	b.n	8005044 <_scanf_float+0x188>
 800507c:	f1ba 0f02 	cmp.w	sl, #2
 8005080:	d055      	beq.n	800512e <_scanf_float+0x272>
 8005082:	2d01      	cmp	r5, #1
 8005084:	d002      	beq.n	800508c <_scanf_float+0x1d0>
 8005086:	2d04      	cmp	r5, #4
 8005088:	f47f af48 	bne.w	8004f1c <_scanf_float+0x60>
 800508c:	3501      	adds	r5, #1
 800508e:	b2ed      	uxtb	r5, r5
 8005090:	e7d8      	b.n	8005044 <_scanf_float+0x188>
 8005092:	f1ba 0f01 	cmp.w	sl, #1
 8005096:	f47f af41 	bne.w	8004f1c <_scanf_float+0x60>
 800509a:	f04f 0a02 	mov.w	sl, #2
 800509e:	e7d1      	b.n	8005044 <_scanf_float+0x188>
 80050a0:	b97d      	cbnz	r5, 80050c2 <_scanf_float+0x206>
 80050a2:	f1b9 0f00 	cmp.w	r9, #0
 80050a6:	f47f af3c 	bne.w	8004f22 <_scanf_float+0x66>
 80050aa:	6822      	ldr	r2, [r4, #0]
 80050ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80050b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80050b4:	f47f af39 	bne.w	8004f2a <_scanf_float+0x6e>
 80050b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80050bc:	6022      	str	r2, [r4, #0]
 80050be:	2501      	movs	r5, #1
 80050c0:	e7c0      	b.n	8005044 <_scanf_float+0x188>
 80050c2:	2d03      	cmp	r5, #3
 80050c4:	d0e2      	beq.n	800508c <_scanf_float+0x1d0>
 80050c6:	2d05      	cmp	r5, #5
 80050c8:	e7de      	b.n	8005088 <_scanf_float+0x1cc>
 80050ca:	2d02      	cmp	r5, #2
 80050cc:	f47f af26 	bne.w	8004f1c <_scanf_float+0x60>
 80050d0:	2503      	movs	r5, #3
 80050d2:	e7b7      	b.n	8005044 <_scanf_float+0x188>
 80050d4:	2d06      	cmp	r5, #6
 80050d6:	f47f af21 	bne.w	8004f1c <_scanf_float+0x60>
 80050da:	2507      	movs	r5, #7
 80050dc:	e7b2      	b.n	8005044 <_scanf_float+0x188>
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	0591      	lsls	r1, r2, #22
 80050e2:	f57f af1b 	bpl.w	8004f1c <_scanf_float+0x60>
 80050e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80050ea:	6022      	str	r2, [r4, #0]
 80050ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80050f0:	e7a8      	b.n	8005044 <_scanf_float+0x188>
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80050f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80050fc:	d006      	beq.n	800510c <_scanf_float+0x250>
 80050fe:	0550      	lsls	r0, r2, #21
 8005100:	f57f af0c 	bpl.w	8004f1c <_scanf_float+0x60>
 8005104:	f1b9 0f00 	cmp.w	r9, #0
 8005108:	f43f af0f 	beq.w	8004f2a <_scanf_float+0x6e>
 800510c:	0591      	lsls	r1, r2, #22
 800510e:	bf58      	it	pl
 8005110:	9901      	ldrpl	r1, [sp, #4]
 8005112:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005116:	bf58      	it	pl
 8005118:	eba9 0101 	subpl.w	r1, r9, r1
 800511c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005120:	bf58      	it	pl
 8005122:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005126:	6022      	str	r2, [r4, #0]
 8005128:	f04f 0900 	mov.w	r9, #0
 800512c:	e78a      	b.n	8005044 <_scanf_float+0x188>
 800512e:	f04f 0a03 	mov.w	sl, #3
 8005132:	e787      	b.n	8005044 <_scanf_float+0x188>
 8005134:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005138:	4639      	mov	r1, r7
 800513a:	4640      	mov	r0, r8
 800513c:	4798      	blx	r3
 800513e:	2800      	cmp	r0, #0
 8005140:	f43f aedf 	beq.w	8004f02 <_scanf_float+0x46>
 8005144:	e6ea      	b.n	8004f1c <_scanf_float+0x60>
 8005146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800514a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800514e:	463a      	mov	r2, r7
 8005150:	4640      	mov	r0, r8
 8005152:	4798      	blx	r3
 8005154:	6923      	ldr	r3, [r4, #16]
 8005156:	3b01      	subs	r3, #1
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	e6ec      	b.n	8004f36 <_scanf_float+0x7a>
 800515c:	1e6b      	subs	r3, r5, #1
 800515e:	2b06      	cmp	r3, #6
 8005160:	d825      	bhi.n	80051ae <_scanf_float+0x2f2>
 8005162:	2d02      	cmp	r5, #2
 8005164:	d836      	bhi.n	80051d4 <_scanf_float+0x318>
 8005166:	455e      	cmp	r6, fp
 8005168:	f67f aee8 	bls.w	8004f3c <_scanf_float+0x80>
 800516c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005170:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005174:	463a      	mov	r2, r7
 8005176:	4640      	mov	r0, r8
 8005178:	4798      	blx	r3
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	3b01      	subs	r3, #1
 800517e:	6123      	str	r3, [r4, #16]
 8005180:	e7f1      	b.n	8005166 <_scanf_float+0x2aa>
 8005182:	9802      	ldr	r0, [sp, #8]
 8005184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005188:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800518c:	9002      	str	r0, [sp, #8]
 800518e:	463a      	mov	r2, r7
 8005190:	4640      	mov	r0, r8
 8005192:	4798      	blx	r3
 8005194:	6923      	ldr	r3, [r4, #16]
 8005196:	3b01      	subs	r3, #1
 8005198:	6123      	str	r3, [r4, #16]
 800519a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800519e:	fa5f fa8a 	uxtb.w	sl, sl
 80051a2:	f1ba 0f02 	cmp.w	sl, #2
 80051a6:	d1ec      	bne.n	8005182 <_scanf_float+0x2c6>
 80051a8:	3d03      	subs	r5, #3
 80051aa:	b2ed      	uxtb	r5, r5
 80051ac:	1b76      	subs	r6, r6, r5
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	05da      	lsls	r2, r3, #23
 80051b2:	d52f      	bpl.n	8005214 <_scanf_float+0x358>
 80051b4:	055b      	lsls	r3, r3, #21
 80051b6:	d510      	bpl.n	80051da <_scanf_float+0x31e>
 80051b8:	455e      	cmp	r6, fp
 80051ba:	f67f aebf 	bls.w	8004f3c <_scanf_float+0x80>
 80051be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051c6:	463a      	mov	r2, r7
 80051c8:	4640      	mov	r0, r8
 80051ca:	4798      	blx	r3
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	6123      	str	r3, [r4, #16]
 80051d2:	e7f1      	b.n	80051b8 <_scanf_float+0x2fc>
 80051d4:	46aa      	mov	sl, r5
 80051d6:	9602      	str	r6, [sp, #8]
 80051d8:	e7df      	b.n	800519a <_scanf_float+0x2de>
 80051da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	2965      	cmp	r1, #101	; 0x65
 80051e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80051e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	d00c      	beq.n	8005208 <_scanf_float+0x34c>
 80051ee:	2945      	cmp	r1, #69	; 0x45
 80051f0:	d00a      	beq.n	8005208 <_scanf_float+0x34c>
 80051f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051f6:	463a      	mov	r2, r7
 80051f8:	4640      	mov	r0, r8
 80051fa:	4798      	blx	r3
 80051fc:	6923      	ldr	r3, [r4, #16]
 80051fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005202:	3b01      	subs	r3, #1
 8005204:	1eb5      	subs	r5, r6, #2
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800520c:	463a      	mov	r2, r7
 800520e:	4640      	mov	r0, r8
 8005210:	4798      	blx	r3
 8005212:	462e      	mov	r6, r5
 8005214:	6825      	ldr	r5, [r4, #0]
 8005216:	f015 0510 	ands.w	r5, r5, #16
 800521a:	d159      	bne.n	80052d0 <_scanf_float+0x414>
 800521c:	7035      	strb	r5, [r6, #0]
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005228:	d11b      	bne.n	8005262 <_scanf_float+0x3a6>
 800522a:	9b01      	ldr	r3, [sp, #4]
 800522c:	454b      	cmp	r3, r9
 800522e:	eba3 0209 	sub.w	r2, r3, r9
 8005232:	d123      	bne.n	800527c <_scanf_float+0x3c0>
 8005234:	2200      	movs	r2, #0
 8005236:	4659      	mov	r1, fp
 8005238:	4640      	mov	r0, r8
 800523a:	f000 ff3b 	bl	80060b4 <_strtod_r>
 800523e:	6822      	ldr	r2, [r4, #0]
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	f012 0f02 	tst.w	r2, #2
 8005246:	ec57 6b10 	vmov	r6, r7, d0
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	d021      	beq.n	8005292 <_scanf_float+0x3d6>
 800524e:	9903      	ldr	r1, [sp, #12]
 8005250:	1d1a      	adds	r2, r3, #4
 8005252:	600a      	str	r2, [r1, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	e9c3 6700 	strd	r6, r7, [r3]
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	3301      	adds	r3, #1
 800525e:	60e3      	str	r3, [r4, #12]
 8005260:	e66d      	b.n	8004f3e <_scanf_float+0x82>
 8005262:	9b04      	ldr	r3, [sp, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0e5      	beq.n	8005234 <_scanf_float+0x378>
 8005268:	9905      	ldr	r1, [sp, #20]
 800526a:	230a      	movs	r3, #10
 800526c:	462a      	mov	r2, r5
 800526e:	3101      	adds	r1, #1
 8005270:	4640      	mov	r0, r8
 8005272:	f000 ffa7 	bl	80061c4 <_strtol_r>
 8005276:	9b04      	ldr	r3, [sp, #16]
 8005278:	9e05      	ldr	r6, [sp, #20]
 800527a:	1ac2      	subs	r2, r0, r3
 800527c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005280:	429e      	cmp	r6, r3
 8005282:	bf28      	it	cs
 8005284:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005288:	4912      	ldr	r1, [pc, #72]	; (80052d4 <_scanf_float+0x418>)
 800528a:	4630      	mov	r0, r6
 800528c:	f000 f8d0 	bl	8005430 <siprintf>
 8005290:	e7d0      	b.n	8005234 <_scanf_float+0x378>
 8005292:	9903      	ldr	r1, [sp, #12]
 8005294:	f012 0f04 	tst.w	r2, #4
 8005298:	f103 0204 	add.w	r2, r3, #4
 800529c:	600a      	str	r2, [r1, #0]
 800529e:	d1d9      	bne.n	8005254 <_scanf_float+0x398>
 80052a0:	f8d3 8000 	ldr.w	r8, [r3]
 80052a4:	ee10 2a10 	vmov	r2, s0
 80052a8:	ee10 0a10 	vmov	r0, s0
 80052ac:	463b      	mov	r3, r7
 80052ae:	4639      	mov	r1, r7
 80052b0:	f7fb fc44 	bl	8000b3c <__aeabi_dcmpun>
 80052b4:	b128      	cbz	r0, 80052c2 <_scanf_float+0x406>
 80052b6:	4808      	ldr	r0, [pc, #32]	; (80052d8 <_scanf_float+0x41c>)
 80052b8:	f000 f8b4 	bl	8005424 <nanf>
 80052bc:	ed88 0a00 	vstr	s0, [r8]
 80052c0:	e7cb      	b.n	800525a <_scanf_float+0x39e>
 80052c2:	4630      	mov	r0, r6
 80052c4:	4639      	mov	r1, r7
 80052c6:	f7fb fc97 	bl	8000bf8 <__aeabi_d2f>
 80052ca:	f8c8 0000 	str.w	r0, [r8]
 80052ce:	e7c4      	b.n	800525a <_scanf_float+0x39e>
 80052d0:	2500      	movs	r5, #0
 80052d2:	e634      	b.n	8004f3e <_scanf_float+0x82>
 80052d4:	080091c0 	.word	0x080091c0
 80052d8:	08009630 	.word	0x08009630

080052dc <iprintf>:
 80052dc:	b40f      	push	{r0, r1, r2, r3}
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <iprintf+0x2c>)
 80052e0:	b513      	push	{r0, r1, r4, lr}
 80052e2:	681c      	ldr	r4, [r3, #0]
 80052e4:	b124      	cbz	r4, 80052f0 <iprintf+0x14>
 80052e6:	69a3      	ldr	r3, [r4, #24]
 80052e8:	b913      	cbnz	r3, 80052f0 <iprintf+0x14>
 80052ea:	4620      	mov	r0, r4
 80052ec:	f001 ffc0 	bl	8007270 <__sinit>
 80052f0:	ab05      	add	r3, sp, #20
 80052f2:	9a04      	ldr	r2, [sp, #16]
 80052f4:	68a1      	ldr	r1, [r4, #8]
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	4620      	mov	r0, r4
 80052fa:	f003 fb97 	bl	8008a2c <_vfiprintf_r>
 80052fe:	b002      	add	sp, #8
 8005300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr
 8005308:	20000078 	.word	0x20000078

0800530c <putchar>:
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <putchar+0x28>)
 800530e:	b513      	push	{r0, r1, r4, lr}
 8005310:	681c      	ldr	r4, [r3, #0]
 8005312:	4601      	mov	r1, r0
 8005314:	b134      	cbz	r4, 8005324 <putchar+0x18>
 8005316:	69a3      	ldr	r3, [r4, #24]
 8005318:	b923      	cbnz	r3, 8005324 <putchar+0x18>
 800531a:	9001      	str	r0, [sp, #4]
 800531c:	4620      	mov	r0, r4
 800531e:	f001 ffa7 	bl	8007270 <__sinit>
 8005322:	9901      	ldr	r1, [sp, #4]
 8005324:	68a2      	ldr	r2, [r4, #8]
 8005326:	4620      	mov	r0, r4
 8005328:	b002      	add	sp, #8
 800532a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532e:	f003 bcad 	b.w	8008c8c <_putc_r>
 8005332:	bf00      	nop
 8005334:	20000078 	.word	0x20000078

08005338 <_puts_r>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	460e      	mov	r6, r1
 800533c:	4605      	mov	r5, r0
 800533e:	b118      	cbz	r0, 8005348 <_puts_r+0x10>
 8005340:	6983      	ldr	r3, [r0, #24]
 8005342:	b90b      	cbnz	r3, 8005348 <_puts_r+0x10>
 8005344:	f001 ff94 	bl	8007270 <__sinit>
 8005348:	69ab      	ldr	r3, [r5, #24]
 800534a:	68ac      	ldr	r4, [r5, #8]
 800534c:	b913      	cbnz	r3, 8005354 <_puts_r+0x1c>
 800534e:	4628      	mov	r0, r5
 8005350:	f001 ff8e 	bl	8007270 <__sinit>
 8005354:	4b2c      	ldr	r3, [pc, #176]	; (8005408 <_puts_r+0xd0>)
 8005356:	429c      	cmp	r4, r3
 8005358:	d120      	bne.n	800539c <_puts_r+0x64>
 800535a:	686c      	ldr	r4, [r5, #4]
 800535c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800535e:	07db      	lsls	r3, r3, #31
 8005360:	d405      	bmi.n	800536e <_puts_r+0x36>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	0598      	lsls	r0, r3, #22
 8005366:	d402      	bmi.n	800536e <_puts_r+0x36>
 8005368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800536a:	f002 fb92 	bl	8007a92 <__retarget_lock_acquire_recursive>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	0719      	lsls	r1, r3, #28
 8005372:	d51d      	bpl.n	80053b0 <_puts_r+0x78>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	b1db      	cbz	r3, 80053b0 <_puts_r+0x78>
 8005378:	3e01      	subs	r6, #1
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005380:	3b01      	subs	r3, #1
 8005382:	60a3      	str	r3, [r4, #8]
 8005384:	bb39      	cbnz	r1, 80053d6 <_puts_r+0x9e>
 8005386:	2b00      	cmp	r3, #0
 8005388:	da38      	bge.n	80053fc <_puts_r+0xc4>
 800538a:	4622      	mov	r2, r4
 800538c:	210a      	movs	r1, #10
 800538e:	4628      	mov	r0, r5
 8005390:	f000 ff1a 	bl	80061c8 <__swbuf_r>
 8005394:	3001      	adds	r0, #1
 8005396:	d011      	beq.n	80053bc <_puts_r+0x84>
 8005398:	250a      	movs	r5, #10
 800539a:	e011      	b.n	80053c0 <_puts_r+0x88>
 800539c:	4b1b      	ldr	r3, [pc, #108]	; (800540c <_puts_r+0xd4>)
 800539e:	429c      	cmp	r4, r3
 80053a0:	d101      	bne.n	80053a6 <_puts_r+0x6e>
 80053a2:	68ac      	ldr	r4, [r5, #8]
 80053a4:	e7da      	b.n	800535c <_puts_r+0x24>
 80053a6:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <_puts_r+0xd8>)
 80053a8:	429c      	cmp	r4, r3
 80053aa:	bf08      	it	eq
 80053ac:	68ec      	ldreq	r4, [r5, #12]
 80053ae:	e7d5      	b.n	800535c <_puts_r+0x24>
 80053b0:	4621      	mov	r1, r4
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 ff5a 	bl	800626c <__swsetup_r>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d0dd      	beq.n	8005378 <_puts_r+0x40>
 80053bc:	f04f 35ff 	mov.w	r5, #4294967295
 80053c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053c2:	07da      	lsls	r2, r3, #31
 80053c4:	d405      	bmi.n	80053d2 <_puts_r+0x9a>
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	059b      	lsls	r3, r3, #22
 80053ca:	d402      	bmi.n	80053d2 <_puts_r+0x9a>
 80053cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ce:	f002 fb61 	bl	8007a94 <__retarget_lock_release_recursive>
 80053d2:	4628      	mov	r0, r5
 80053d4:	bd70      	pop	{r4, r5, r6, pc}
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	da04      	bge.n	80053e4 <_puts_r+0xac>
 80053da:	69a2      	ldr	r2, [r4, #24]
 80053dc:	429a      	cmp	r2, r3
 80053de:	dc06      	bgt.n	80053ee <_puts_r+0xb6>
 80053e0:	290a      	cmp	r1, #10
 80053e2:	d004      	beq.n	80053ee <_puts_r+0xb6>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	6022      	str	r2, [r4, #0]
 80053ea:	7019      	strb	r1, [r3, #0]
 80053ec:	e7c5      	b.n	800537a <_puts_r+0x42>
 80053ee:	4622      	mov	r2, r4
 80053f0:	4628      	mov	r0, r5
 80053f2:	f000 fee9 	bl	80061c8 <__swbuf_r>
 80053f6:	3001      	adds	r0, #1
 80053f8:	d1bf      	bne.n	800537a <_puts_r+0x42>
 80053fa:	e7df      	b.n	80053bc <_puts_r+0x84>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	250a      	movs	r5, #10
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	6022      	str	r2, [r4, #0]
 8005404:	701d      	strb	r5, [r3, #0]
 8005406:	e7db      	b.n	80053c0 <_puts_r+0x88>
 8005408:	080093cc 	.word	0x080093cc
 800540c:	080093ec 	.word	0x080093ec
 8005410:	080093ac 	.word	0x080093ac

08005414 <puts>:
 8005414:	4b02      	ldr	r3, [pc, #8]	; (8005420 <puts+0xc>)
 8005416:	4601      	mov	r1, r0
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	f7ff bf8d 	b.w	8005338 <_puts_r>
 800541e:	bf00      	nop
 8005420:	20000078 	.word	0x20000078

08005424 <nanf>:
 8005424:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800542c <nanf+0x8>
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	7fc00000 	.word	0x7fc00000

08005430 <siprintf>:
 8005430:	b40e      	push	{r1, r2, r3}
 8005432:	b500      	push	{lr}
 8005434:	b09c      	sub	sp, #112	; 0x70
 8005436:	ab1d      	add	r3, sp, #116	; 0x74
 8005438:	9002      	str	r0, [sp, #8]
 800543a:	9006      	str	r0, [sp, #24]
 800543c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005440:	4809      	ldr	r0, [pc, #36]	; (8005468 <siprintf+0x38>)
 8005442:	9107      	str	r1, [sp, #28]
 8005444:	9104      	str	r1, [sp, #16]
 8005446:	4909      	ldr	r1, [pc, #36]	; (800546c <siprintf+0x3c>)
 8005448:	f853 2b04 	ldr.w	r2, [r3], #4
 800544c:	9105      	str	r1, [sp, #20]
 800544e:	6800      	ldr	r0, [r0, #0]
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	a902      	add	r1, sp, #8
 8005454:	f003 f9c0 	bl	80087d8 <_svfiprintf_r>
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	b01c      	add	sp, #112	; 0x70
 8005460:	f85d eb04 	ldr.w	lr, [sp], #4
 8005464:	b003      	add	sp, #12
 8005466:	4770      	bx	lr
 8005468:	20000078 	.word	0x20000078
 800546c:	ffff0208 	.word	0xffff0208

08005470 <sulp>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4604      	mov	r4, r0
 8005474:	460d      	mov	r5, r1
 8005476:	ec45 4b10 	vmov	d0, r4, r5
 800547a:	4616      	mov	r6, r2
 800547c:	f002 ff0a 	bl	8008294 <__ulp>
 8005480:	ec51 0b10 	vmov	r0, r1, d0
 8005484:	b17e      	cbz	r6, 80054a6 <sulp+0x36>
 8005486:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800548a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800548e:	2b00      	cmp	r3, #0
 8005490:	dd09      	ble.n	80054a6 <sulp+0x36>
 8005492:	051b      	lsls	r3, r3, #20
 8005494:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005498:	2400      	movs	r4, #0
 800549a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800549e:	4622      	mov	r2, r4
 80054a0:	462b      	mov	r3, r5
 80054a2:	f7fb f8b1 	bl	8000608 <__aeabi_dmul>
 80054a6:	bd70      	pop	{r4, r5, r6, pc}

080054a8 <_strtod_l>:
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	ed2d 8b02 	vpush	{d8}
 80054b0:	b09d      	sub	sp, #116	; 0x74
 80054b2:	461f      	mov	r7, r3
 80054b4:	2300      	movs	r3, #0
 80054b6:	9318      	str	r3, [sp, #96]	; 0x60
 80054b8:	4ba2      	ldr	r3, [pc, #648]	; (8005744 <_strtod_l+0x29c>)
 80054ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	9305      	str	r3, [sp, #20]
 80054c0:	4604      	mov	r4, r0
 80054c2:	4618      	mov	r0, r3
 80054c4:	4688      	mov	r8, r1
 80054c6:	f7fa fe8b 	bl	80001e0 <strlen>
 80054ca:	f04f 0a00 	mov.w	sl, #0
 80054ce:	4605      	mov	r5, r0
 80054d0:	f04f 0b00 	mov.w	fp, #0
 80054d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80054d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054da:	781a      	ldrb	r2, [r3, #0]
 80054dc:	2a2b      	cmp	r2, #43	; 0x2b
 80054de:	d04e      	beq.n	800557e <_strtod_l+0xd6>
 80054e0:	d83b      	bhi.n	800555a <_strtod_l+0xb2>
 80054e2:	2a0d      	cmp	r2, #13
 80054e4:	d834      	bhi.n	8005550 <_strtod_l+0xa8>
 80054e6:	2a08      	cmp	r2, #8
 80054e8:	d834      	bhi.n	8005554 <_strtod_l+0xac>
 80054ea:	2a00      	cmp	r2, #0
 80054ec:	d03e      	beq.n	800556c <_strtod_l+0xc4>
 80054ee:	2300      	movs	r3, #0
 80054f0:	930a      	str	r3, [sp, #40]	; 0x28
 80054f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80054f4:	7833      	ldrb	r3, [r6, #0]
 80054f6:	2b30      	cmp	r3, #48	; 0x30
 80054f8:	f040 80b0 	bne.w	800565c <_strtod_l+0x1b4>
 80054fc:	7873      	ldrb	r3, [r6, #1]
 80054fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005502:	2b58      	cmp	r3, #88	; 0x58
 8005504:	d168      	bne.n	80055d8 <_strtod_l+0x130>
 8005506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	ab18      	add	r3, sp, #96	; 0x60
 800550c:	9702      	str	r7, [sp, #8]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	4a8d      	ldr	r2, [pc, #564]	; (8005748 <_strtod_l+0x2a0>)
 8005512:	ab19      	add	r3, sp, #100	; 0x64
 8005514:	a917      	add	r1, sp, #92	; 0x5c
 8005516:	4620      	mov	r0, r4
 8005518:	f001 ffae 	bl	8007478 <__gethex>
 800551c:	f010 0707 	ands.w	r7, r0, #7
 8005520:	4605      	mov	r5, r0
 8005522:	d005      	beq.n	8005530 <_strtod_l+0x88>
 8005524:	2f06      	cmp	r7, #6
 8005526:	d12c      	bne.n	8005582 <_strtod_l+0xda>
 8005528:	3601      	adds	r6, #1
 800552a:	2300      	movs	r3, #0
 800552c:	9617      	str	r6, [sp, #92]	; 0x5c
 800552e:	930a      	str	r3, [sp, #40]	; 0x28
 8005530:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 8590 	bne.w	8006058 <_strtod_l+0xbb0>
 8005538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800553a:	b1eb      	cbz	r3, 8005578 <_strtod_l+0xd0>
 800553c:	4652      	mov	r2, sl
 800553e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005542:	ec43 2b10 	vmov	d0, r2, r3
 8005546:	b01d      	add	sp, #116	; 0x74
 8005548:	ecbd 8b02 	vpop	{d8}
 800554c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005550:	2a20      	cmp	r2, #32
 8005552:	d1cc      	bne.n	80054ee <_strtod_l+0x46>
 8005554:	3301      	adds	r3, #1
 8005556:	9317      	str	r3, [sp, #92]	; 0x5c
 8005558:	e7be      	b.n	80054d8 <_strtod_l+0x30>
 800555a:	2a2d      	cmp	r2, #45	; 0x2d
 800555c:	d1c7      	bne.n	80054ee <_strtod_l+0x46>
 800555e:	2201      	movs	r2, #1
 8005560:	920a      	str	r2, [sp, #40]	; 0x28
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	9217      	str	r2, [sp, #92]	; 0x5c
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1c2      	bne.n	80054f2 <_strtod_l+0x4a>
 800556c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800556e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005572:	2b00      	cmp	r3, #0
 8005574:	f040 856e 	bne.w	8006054 <_strtod_l+0xbac>
 8005578:	4652      	mov	r2, sl
 800557a:	465b      	mov	r3, fp
 800557c:	e7e1      	b.n	8005542 <_strtod_l+0x9a>
 800557e:	2200      	movs	r2, #0
 8005580:	e7ee      	b.n	8005560 <_strtod_l+0xb8>
 8005582:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005584:	b13a      	cbz	r2, 8005596 <_strtod_l+0xee>
 8005586:	2135      	movs	r1, #53	; 0x35
 8005588:	a81a      	add	r0, sp, #104	; 0x68
 800558a:	f002 ff8e 	bl	80084aa <__copybits>
 800558e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005590:	4620      	mov	r0, r4
 8005592:	f002 fb4d 	bl	8007c30 <_Bfree>
 8005596:	3f01      	subs	r7, #1
 8005598:	2f04      	cmp	r7, #4
 800559a:	d806      	bhi.n	80055aa <_strtod_l+0x102>
 800559c:	e8df f007 	tbb	[pc, r7]
 80055a0:	1714030a 	.word	0x1714030a
 80055a4:	0a          	.byte	0x0a
 80055a5:	00          	.byte	0x00
 80055a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80055aa:	0728      	lsls	r0, r5, #28
 80055ac:	d5c0      	bpl.n	8005530 <_strtod_l+0x88>
 80055ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80055b2:	e7bd      	b.n	8005530 <_strtod_l+0x88>
 80055b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80055b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80055ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80055be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80055c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80055c6:	e7f0      	b.n	80055aa <_strtod_l+0x102>
 80055c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800574c <_strtod_l+0x2a4>
 80055cc:	e7ed      	b.n	80055aa <_strtod_l+0x102>
 80055ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80055d2:	f04f 3aff 	mov.w	sl, #4294967295
 80055d6:	e7e8      	b.n	80055aa <_strtod_l+0x102>
 80055d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b30      	cmp	r3, #48	; 0x30
 80055e2:	d0f9      	beq.n	80055d8 <_strtod_l+0x130>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0a3      	beq.n	8005530 <_strtod_l+0x88>
 80055e8:	2301      	movs	r3, #1
 80055ea:	f04f 0900 	mov.w	r9, #0
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055f2:	9308      	str	r3, [sp, #32]
 80055f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80055f8:	464f      	mov	r7, r9
 80055fa:	220a      	movs	r2, #10
 80055fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80055fe:	7806      	ldrb	r6, [r0, #0]
 8005600:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005604:	b2d9      	uxtb	r1, r3
 8005606:	2909      	cmp	r1, #9
 8005608:	d92a      	bls.n	8005660 <_strtod_l+0x1b8>
 800560a:	9905      	ldr	r1, [sp, #20]
 800560c:	462a      	mov	r2, r5
 800560e:	f003 fbe2 	bl	8008dd6 <strncmp>
 8005612:	b398      	cbz	r0, 800567c <_strtod_l+0x1d4>
 8005614:	2000      	movs	r0, #0
 8005616:	4632      	mov	r2, r6
 8005618:	463d      	mov	r5, r7
 800561a:	9005      	str	r0, [sp, #20]
 800561c:	4603      	mov	r3, r0
 800561e:	2a65      	cmp	r2, #101	; 0x65
 8005620:	d001      	beq.n	8005626 <_strtod_l+0x17e>
 8005622:	2a45      	cmp	r2, #69	; 0x45
 8005624:	d118      	bne.n	8005658 <_strtod_l+0x1b0>
 8005626:	b91d      	cbnz	r5, 8005630 <_strtod_l+0x188>
 8005628:	9a04      	ldr	r2, [sp, #16]
 800562a:	4302      	orrs	r2, r0
 800562c:	d09e      	beq.n	800556c <_strtod_l+0xc4>
 800562e:	2500      	movs	r5, #0
 8005630:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005634:	f108 0201 	add.w	r2, r8, #1
 8005638:	9217      	str	r2, [sp, #92]	; 0x5c
 800563a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800563e:	2a2b      	cmp	r2, #43	; 0x2b
 8005640:	d075      	beq.n	800572e <_strtod_l+0x286>
 8005642:	2a2d      	cmp	r2, #45	; 0x2d
 8005644:	d07b      	beq.n	800573e <_strtod_l+0x296>
 8005646:	f04f 0c00 	mov.w	ip, #0
 800564a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800564e:	2909      	cmp	r1, #9
 8005650:	f240 8082 	bls.w	8005758 <_strtod_l+0x2b0>
 8005654:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005658:	2600      	movs	r6, #0
 800565a:	e09d      	b.n	8005798 <_strtod_l+0x2f0>
 800565c:	2300      	movs	r3, #0
 800565e:	e7c4      	b.n	80055ea <_strtod_l+0x142>
 8005660:	2f08      	cmp	r7, #8
 8005662:	bfd8      	it	le
 8005664:	9907      	ldrle	r1, [sp, #28]
 8005666:	f100 0001 	add.w	r0, r0, #1
 800566a:	bfda      	itte	le
 800566c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005670:	9307      	strle	r3, [sp, #28]
 8005672:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005676:	3701      	adds	r7, #1
 8005678:	9017      	str	r0, [sp, #92]	; 0x5c
 800567a:	e7bf      	b.n	80055fc <_strtod_l+0x154>
 800567c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800567e:	195a      	adds	r2, r3, r5
 8005680:	9217      	str	r2, [sp, #92]	; 0x5c
 8005682:	5d5a      	ldrb	r2, [r3, r5]
 8005684:	2f00      	cmp	r7, #0
 8005686:	d037      	beq.n	80056f8 <_strtod_l+0x250>
 8005688:	9005      	str	r0, [sp, #20]
 800568a:	463d      	mov	r5, r7
 800568c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005690:	2b09      	cmp	r3, #9
 8005692:	d912      	bls.n	80056ba <_strtod_l+0x212>
 8005694:	2301      	movs	r3, #1
 8005696:	e7c2      	b.n	800561e <_strtod_l+0x176>
 8005698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	9217      	str	r2, [sp, #92]	; 0x5c
 800569e:	785a      	ldrb	r2, [r3, #1]
 80056a0:	3001      	adds	r0, #1
 80056a2:	2a30      	cmp	r2, #48	; 0x30
 80056a4:	d0f8      	beq.n	8005698 <_strtod_l+0x1f0>
 80056a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	f200 84d9 	bhi.w	8006062 <_strtod_l+0xbba>
 80056b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056b2:	9005      	str	r0, [sp, #20]
 80056b4:	2000      	movs	r0, #0
 80056b6:	9308      	str	r3, [sp, #32]
 80056b8:	4605      	mov	r5, r0
 80056ba:	3a30      	subs	r2, #48	; 0x30
 80056bc:	f100 0301 	add.w	r3, r0, #1
 80056c0:	d014      	beq.n	80056ec <_strtod_l+0x244>
 80056c2:	9905      	ldr	r1, [sp, #20]
 80056c4:	4419      	add	r1, r3
 80056c6:	9105      	str	r1, [sp, #20]
 80056c8:	462b      	mov	r3, r5
 80056ca:	eb00 0e05 	add.w	lr, r0, r5
 80056ce:	210a      	movs	r1, #10
 80056d0:	4573      	cmp	r3, lr
 80056d2:	d113      	bne.n	80056fc <_strtod_l+0x254>
 80056d4:	182b      	adds	r3, r5, r0
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	f105 0501 	add.w	r5, r5, #1
 80056dc:	4405      	add	r5, r0
 80056de:	dc1c      	bgt.n	800571a <_strtod_l+0x272>
 80056e0:	9907      	ldr	r1, [sp, #28]
 80056e2:	230a      	movs	r3, #10
 80056e4:	fb03 2301 	mla	r3, r3, r1, r2
 80056e8:	9307      	str	r3, [sp, #28]
 80056ea:	2300      	movs	r3, #0
 80056ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80056ee:	1c51      	adds	r1, r2, #1
 80056f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80056f2:	7852      	ldrb	r2, [r2, #1]
 80056f4:	4618      	mov	r0, r3
 80056f6:	e7c9      	b.n	800568c <_strtod_l+0x1e4>
 80056f8:	4638      	mov	r0, r7
 80056fa:	e7d2      	b.n	80056a2 <_strtod_l+0x1fa>
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	dc04      	bgt.n	800570a <_strtod_l+0x262>
 8005700:	9e07      	ldr	r6, [sp, #28]
 8005702:	434e      	muls	r6, r1
 8005704:	9607      	str	r6, [sp, #28]
 8005706:	3301      	adds	r3, #1
 8005708:	e7e2      	b.n	80056d0 <_strtod_l+0x228>
 800570a:	f103 0c01 	add.w	ip, r3, #1
 800570e:	f1bc 0f10 	cmp.w	ip, #16
 8005712:	bfd8      	it	le
 8005714:	fb01 f909 	mulle.w	r9, r1, r9
 8005718:	e7f5      	b.n	8005706 <_strtod_l+0x25e>
 800571a:	2d10      	cmp	r5, #16
 800571c:	bfdc      	itt	le
 800571e:	230a      	movle	r3, #10
 8005720:	fb03 2909 	mlale	r9, r3, r9, r2
 8005724:	e7e1      	b.n	80056ea <_strtod_l+0x242>
 8005726:	2300      	movs	r3, #0
 8005728:	9305      	str	r3, [sp, #20]
 800572a:	2301      	movs	r3, #1
 800572c:	e77c      	b.n	8005628 <_strtod_l+0x180>
 800572e:	f04f 0c00 	mov.w	ip, #0
 8005732:	f108 0202 	add.w	r2, r8, #2
 8005736:	9217      	str	r2, [sp, #92]	; 0x5c
 8005738:	f898 2002 	ldrb.w	r2, [r8, #2]
 800573c:	e785      	b.n	800564a <_strtod_l+0x1a2>
 800573e:	f04f 0c01 	mov.w	ip, #1
 8005742:	e7f6      	b.n	8005732 <_strtod_l+0x28a>
 8005744:	08009474 	.word	0x08009474
 8005748:	080091c8 	.word	0x080091c8
 800574c:	7ff00000 	.word	0x7ff00000
 8005750:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005752:	1c51      	adds	r1, r2, #1
 8005754:	9117      	str	r1, [sp, #92]	; 0x5c
 8005756:	7852      	ldrb	r2, [r2, #1]
 8005758:	2a30      	cmp	r2, #48	; 0x30
 800575a:	d0f9      	beq.n	8005750 <_strtod_l+0x2a8>
 800575c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005760:	2908      	cmp	r1, #8
 8005762:	f63f af79 	bhi.w	8005658 <_strtod_l+0x1b0>
 8005766:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800576a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800576c:	9206      	str	r2, [sp, #24]
 800576e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005770:	1c51      	adds	r1, r2, #1
 8005772:	9117      	str	r1, [sp, #92]	; 0x5c
 8005774:	7852      	ldrb	r2, [r2, #1]
 8005776:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800577a:	2e09      	cmp	r6, #9
 800577c:	d937      	bls.n	80057ee <_strtod_l+0x346>
 800577e:	9e06      	ldr	r6, [sp, #24]
 8005780:	1b89      	subs	r1, r1, r6
 8005782:	2908      	cmp	r1, #8
 8005784:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005788:	dc02      	bgt.n	8005790 <_strtod_l+0x2e8>
 800578a:	4576      	cmp	r6, lr
 800578c:	bfa8      	it	ge
 800578e:	4676      	movge	r6, lr
 8005790:	f1bc 0f00 	cmp.w	ip, #0
 8005794:	d000      	beq.n	8005798 <_strtod_l+0x2f0>
 8005796:	4276      	negs	r6, r6
 8005798:	2d00      	cmp	r5, #0
 800579a:	d14d      	bne.n	8005838 <_strtod_l+0x390>
 800579c:	9904      	ldr	r1, [sp, #16]
 800579e:	4301      	orrs	r1, r0
 80057a0:	f47f aec6 	bne.w	8005530 <_strtod_l+0x88>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f47f aee1 	bne.w	800556c <_strtod_l+0xc4>
 80057aa:	2a69      	cmp	r2, #105	; 0x69
 80057ac:	d027      	beq.n	80057fe <_strtod_l+0x356>
 80057ae:	dc24      	bgt.n	80057fa <_strtod_l+0x352>
 80057b0:	2a49      	cmp	r2, #73	; 0x49
 80057b2:	d024      	beq.n	80057fe <_strtod_l+0x356>
 80057b4:	2a4e      	cmp	r2, #78	; 0x4e
 80057b6:	f47f aed9 	bne.w	800556c <_strtod_l+0xc4>
 80057ba:	499f      	ldr	r1, [pc, #636]	; (8005a38 <_strtod_l+0x590>)
 80057bc:	a817      	add	r0, sp, #92	; 0x5c
 80057be:	f002 f8b3 	bl	8007928 <__match>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	f43f aed2 	beq.w	800556c <_strtod_l+0xc4>
 80057c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b28      	cmp	r3, #40	; 0x28
 80057ce:	d12d      	bne.n	800582c <_strtod_l+0x384>
 80057d0:	499a      	ldr	r1, [pc, #616]	; (8005a3c <_strtod_l+0x594>)
 80057d2:	aa1a      	add	r2, sp, #104	; 0x68
 80057d4:	a817      	add	r0, sp, #92	; 0x5c
 80057d6:	f002 f8bb 	bl	8007950 <__hexnan>
 80057da:	2805      	cmp	r0, #5
 80057dc:	d126      	bne.n	800582c <_strtod_l+0x384>
 80057de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80057e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80057e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80057e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80057ec:	e6a0      	b.n	8005530 <_strtod_l+0x88>
 80057ee:	210a      	movs	r1, #10
 80057f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80057f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80057f8:	e7b9      	b.n	800576e <_strtod_l+0x2c6>
 80057fa:	2a6e      	cmp	r2, #110	; 0x6e
 80057fc:	e7db      	b.n	80057b6 <_strtod_l+0x30e>
 80057fe:	4990      	ldr	r1, [pc, #576]	; (8005a40 <_strtod_l+0x598>)
 8005800:	a817      	add	r0, sp, #92	; 0x5c
 8005802:	f002 f891 	bl	8007928 <__match>
 8005806:	2800      	cmp	r0, #0
 8005808:	f43f aeb0 	beq.w	800556c <_strtod_l+0xc4>
 800580c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800580e:	498d      	ldr	r1, [pc, #564]	; (8005a44 <_strtod_l+0x59c>)
 8005810:	3b01      	subs	r3, #1
 8005812:	a817      	add	r0, sp, #92	; 0x5c
 8005814:	9317      	str	r3, [sp, #92]	; 0x5c
 8005816:	f002 f887 	bl	8007928 <__match>
 800581a:	b910      	cbnz	r0, 8005822 <_strtod_l+0x37a>
 800581c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800581e:	3301      	adds	r3, #1
 8005820:	9317      	str	r3, [sp, #92]	; 0x5c
 8005822:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005a54 <_strtod_l+0x5ac>
 8005826:	f04f 0a00 	mov.w	sl, #0
 800582a:	e681      	b.n	8005530 <_strtod_l+0x88>
 800582c:	4886      	ldr	r0, [pc, #536]	; (8005a48 <_strtod_l+0x5a0>)
 800582e:	f003 fa77 	bl	8008d20 <nan>
 8005832:	ec5b ab10 	vmov	sl, fp, d0
 8005836:	e67b      	b.n	8005530 <_strtod_l+0x88>
 8005838:	9b05      	ldr	r3, [sp, #20]
 800583a:	9807      	ldr	r0, [sp, #28]
 800583c:	1af3      	subs	r3, r6, r3
 800583e:	2f00      	cmp	r7, #0
 8005840:	bf08      	it	eq
 8005842:	462f      	moveq	r7, r5
 8005844:	2d10      	cmp	r5, #16
 8005846:	9306      	str	r3, [sp, #24]
 8005848:	46a8      	mov	r8, r5
 800584a:	bfa8      	it	ge
 800584c:	f04f 0810 	movge.w	r8, #16
 8005850:	f7fa fe60 	bl	8000514 <__aeabi_ui2d>
 8005854:	2d09      	cmp	r5, #9
 8005856:	4682      	mov	sl, r0
 8005858:	468b      	mov	fp, r1
 800585a:	dd13      	ble.n	8005884 <_strtod_l+0x3dc>
 800585c:	4b7b      	ldr	r3, [pc, #492]	; (8005a4c <_strtod_l+0x5a4>)
 800585e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005862:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005866:	f7fa fecf 	bl	8000608 <__aeabi_dmul>
 800586a:	4682      	mov	sl, r0
 800586c:	4648      	mov	r0, r9
 800586e:	468b      	mov	fp, r1
 8005870:	f7fa fe50 	bl	8000514 <__aeabi_ui2d>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4650      	mov	r0, sl
 800587a:	4659      	mov	r1, fp
 800587c:	f7fa fd0e 	bl	800029c <__adddf3>
 8005880:	4682      	mov	sl, r0
 8005882:	468b      	mov	fp, r1
 8005884:	2d0f      	cmp	r5, #15
 8005886:	dc38      	bgt.n	80058fa <_strtod_l+0x452>
 8005888:	9b06      	ldr	r3, [sp, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f43f ae50 	beq.w	8005530 <_strtod_l+0x88>
 8005890:	dd24      	ble.n	80058dc <_strtod_l+0x434>
 8005892:	2b16      	cmp	r3, #22
 8005894:	dc0b      	bgt.n	80058ae <_strtod_l+0x406>
 8005896:	496d      	ldr	r1, [pc, #436]	; (8005a4c <_strtod_l+0x5a4>)
 8005898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800589c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058a0:	4652      	mov	r2, sl
 80058a2:	465b      	mov	r3, fp
 80058a4:	f7fa feb0 	bl	8000608 <__aeabi_dmul>
 80058a8:	4682      	mov	sl, r0
 80058aa:	468b      	mov	fp, r1
 80058ac:	e640      	b.n	8005530 <_strtod_l+0x88>
 80058ae:	9a06      	ldr	r2, [sp, #24]
 80058b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80058b4:	4293      	cmp	r3, r2
 80058b6:	db20      	blt.n	80058fa <_strtod_l+0x452>
 80058b8:	4c64      	ldr	r4, [pc, #400]	; (8005a4c <_strtod_l+0x5a4>)
 80058ba:	f1c5 050f 	rsb	r5, r5, #15
 80058be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80058c2:	4652      	mov	r2, sl
 80058c4:	465b      	mov	r3, fp
 80058c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058ca:	f7fa fe9d 	bl	8000608 <__aeabi_dmul>
 80058ce:	9b06      	ldr	r3, [sp, #24]
 80058d0:	1b5d      	subs	r5, r3, r5
 80058d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80058d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80058da:	e7e3      	b.n	80058a4 <_strtod_l+0x3fc>
 80058dc:	9b06      	ldr	r3, [sp, #24]
 80058de:	3316      	adds	r3, #22
 80058e0:	db0b      	blt.n	80058fa <_strtod_l+0x452>
 80058e2:	9b05      	ldr	r3, [sp, #20]
 80058e4:	1b9e      	subs	r6, r3, r6
 80058e6:	4b59      	ldr	r3, [pc, #356]	; (8005a4c <_strtod_l+0x5a4>)
 80058e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80058ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058f0:	4650      	mov	r0, sl
 80058f2:	4659      	mov	r1, fp
 80058f4:	f7fa ffb2 	bl	800085c <__aeabi_ddiv>
 80058f8:	e7d6      	b.n	80058a8 <_strtod_l+0x400>
 80058fa:	9b06      	ldr	r3, [sp, #24]
 80058fc:	eba5 0808 	sub.w	r8, r5, r8
 8005900:	4498      	add	r8, r3
 8005902:	f1b8 0f00 	cmp.w	r8, #0
 8005906:	dd74      	ble.n	80059f2 <_strtod_l+0x54a>
 8005908:	f018 030f 	ands.w	r3, r8, #15
 800590c:	d00a      	beq.n	8005924 <_strtod_l+0x47c>
 800590e:	494f      	ldr	r1, [pc, #316]	; (8005a4c <_strtod_l+0x5a4>)
 8005910:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005914:	4652      	mov	r2, sl
 8005916:	465b      	mov	r3, fp
 8005918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800591c:	f7fa fe74 	bl	8000608 <__aeabi_dmul>
 8005920:	4682      	mov	sl, r0
 8005922:	468b      	mov	fp, r1
 8005924:	f038 080f 	bics.w	r8, r8, #15
 8005928:	d04f      	beq.n	80059ca <_strtod_l+0x522>
 800592a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800592e:	dd22      	ble.n	8005976 <_strtod_l+0x4ce>
 8005930:	2500      	movs	r5, #0
 8005932:	462e      	mov	r6, r5
 8005934:	9507      	str	r5, [sp, #28]
 8005936:	9505      	str	r5, [sp, #20]
 8005938:	2322      	movs	r3, #34	; 0x22
 800593a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005a54 <_strtod_l+0x5ac>
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	f04f 0a00 	mov.w	sl, #0
 8005944:	9b07      	ldr	r3, [sp, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f43f adf2 	beq.w	8005530 <_strtod_l+0x88>
 800594c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800594e:	4620      	mov	r0, r4
 8005950:	f002 f96e 	bl	8007c30 <_Bfree>
 8005954:	9905      	ldr	r1, [sp, #20]
 8005956:	4620      	mov	r0, r4
 8005958:	f002 f96a 	bl	8007c30 <_Bfree>
 800595c:	4631      	mov	r1, r6
 800595e:	4620      	mov	r0, r4
 8005960:	f002 f966 	bl	8007c30 <_Bfree>
 8005964:	9907      	ldr	r1, [sp, #28]
 8005966:	4620      	mov	r0, r4
 8005968:	f002 f962 	bl	8007c30 <_Bfree>
 800596c:	4629      	mov	r1, r5
 800596e:	4620      	mov	r0, r4
 8005970:	f002 f95e 	bl	8007c30 <_Bfree>
 8005974:	e5dc      	b.n	8005530 <_strtod_l+0x88>
 8005976:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <_strtod_l+0x5a8>)
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	2300      	movs	r3, #0
 800597c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005980:	4650      	mov	r0, sl
 8005982:	4659      	mov	r1, fp
 8005984:	4699      	mov	r9, r3
 8005986:	f1b8 0f01 	cmp.w	r8, #1
 800598a:	dc21      	bgt.n	80059d0 <_strtod_l+0x528>
 800598c:	b10b      	cbz	r3, 8005992 <_strtod_l+0x4ea>
 800598e:	4682      	mov	sl, r0
 8005990:	468b      	mov	fp, r1
 8005992:	4b2f      	ldr	r3, [pc, #188]	; (8005a50 <_strtod_l+0x5a8>)
 8005994:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005998:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800599c:	4652      	mov	r2, sl
 800599e:	465b      	mov	r3, fp
 80059a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80059a4:	f7fa fe30 	bl	8000608 <__aeabi_dmul>
 80059a8:	4b2a      	ldr	r3, [pc, #168]	; (8005a54 <_strtod_l+0x5ac>)
 80059aa:	460a      	mov	r2, r1
 80059ac:	400b      	ands	r3, r1
 80059ae:	492a      	ldr	r1, [pc, #168]	; (8005a58 <_strtod_l+0x5b0>)
 80059b0:	428b      	cmp	r3, r1
 80059b2:	4682      	mov	sl, r0
 80059b4:	d8bc      	bhi.n	8005930 <_strtod_l+0x488>
 80059b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80059ba:	428b      	cmp	r3, r1
 80059bc:	bf86      	itte	hi
 80059be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005a5c <_strtod_l+0x5b4>
 80059c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80059c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80059ca:	2300      	movs	r3, #0
 80059cc:	9304      	str	r3, [sp, #16]
 80059ce:	e084      	b.n	8005ada <_strtod_l+0x632>
 80059d0:	f018 0f01 	tst.w	r8, #1
 80059d4:	d005      	beq.n	80059e2 <_strtod_l+0x53a>
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f7fa fe14 	bl	8000608 <__aeabi_dmul>
 80059e0:	2301      	movs	r3, #1
 80059e2:	9a04      	ldr	r2, [sp, #16]
 80059e4:	3208      	adds	r2, #8
 80059e6:	f109 0901 	add.w	r9, r9, #1
 80059ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80059ee:	9204      	str	r2, [sp, #16]
 80059f0:	e7c9      	b.n	8005986 <_strtod_l+0x4de>
 80059f2:	d0ea      	beq.n	80059ca <_strtod_l+0x522>
 80059f4:	f1c8 0800 	rsb	r8, r8, #0
 80059f8:	f018 020f 	ands.w	r2, r8, #15
 80059fc:	d00a      	beq.n	8005a14 <_strtod_l+0x56c>
 80059fe:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <_strtod_l+0x5a4>)
 8005a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a04:	4650      	mov	r0, sl
 8005a06:	4659      	mov	r1, fp
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	f7fa ff26 	bl	800085c <__aeabi_ddiv>
 8005a10:	4682      	mov	sl, r0
 8005a12:	468b      	mov	fp, r1
 8005a14:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005a18:	d0d7      	beq.n	80059ca <_strtod_l+0x522>
 8005a1a:	f1b8 0f1f 	cmp.w	r8, #31
 8005a1e:	dd1f      	ble.n	8005a60 <_strtod_l+0x5b8>
 8005a20:	2500      	movs	r5, #0
 8005a22:	462e      	mov	r6, r5
 8005a24:	9507      	str	r5, [sp, #28]
 8005a26:	9505      	str	r5, [sp, #20]
 8005a28:	2322      	movs	r3, #34	; 0x22
 8005a2a:	f04f 0a00 	mov.w	sl, #0
 8005a2e:	f04f 0b00 	mov.w	fp, #0
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	e786      	b.n	8005944 <_strtod_l+0x49c>
 8005a36:	bf00      	nop
 8005a38:	08009199 	.word	0x08009199
 8005a3c:	080091dc 	.word	0x080091dc
 8005a40:	08009191 	.word	0x08009191
 8005a44:	0800931c 	.word	0x0800931c
 8005a48:	08009630 	.word	0x08009630
 8005a4c:	08009510 	.word	0x08009510
 8005a50:	080094e8 	.word	0x080094e8
 8005a54:	7ff00000 	.word	0x7ff00000
 8005a58:	7ca00000 	.word	0x7ca00000
 8005a5c:	7fefffff 	.word	0x7fefffff
 8005a60:	f018 0310 	ands.w	r3, r8, #16
 8005a64:	bf18      	it	ne
 8005a66:	236a      	movne	r3, #106	; 0x6a
 8005a68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005e18 <_strtod_l+0x970>
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	4650      	mov	r0, sl
 8005a70:	4659      	mov	r1, fp
 8005a72:	2300      	movs	r3, #0
 8005a74:	f018 0f01 	tst.w	r8, #1
 8005a78:	d004      	beq.n	8005a84 <_strtod_l+0x5dc>
 8005a7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005a7e:	f7fa fdc3 	bl	8000608 <__aeabi_dmul>
 8005a82:	2301      	movs	r3, #1
 8005a84:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005a88:	f109 0908 	add.w	r9, r9, #8
 8005a8c:	d1f2      	bne.n	8005a74 <_strtod_l+0x5cc>
 8005a8e:	b10b      	cbz	r3, 8005a94 <_strtod_l+0x5ec>
 8005a90:	4682      	mov	sl, r0
 8005a92:	468b      	mov	fp, r1
 8005a94:	9b04      	ldr	r3, [sp, #16]
 8005a96:	b1c3      	cbz	r3, 8005aca <_strtod_l+0x622>
 8005a98:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005a9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	4659      	mov	r1, fp
 8005aa4:	dd11      	ble.n	8005aca <_strtod_l+0x622>
 8005aa6:	2b1f      	cmp	r3, #31
 8005aa8:	f340 8124 	ble.w	8005cf4 <_strtod_l+0x84c>
 8005aac:	2b34      	cmp	r3, #52	; 0x34
 8005aae:	bfde      	ittt	le
 8005ab0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005ab4:	f04f 33ff 	movle.w	r3, #4294967295
 8005ab8:	fa03 f202 	lslle.w	r2, r3, r2
 8005abc:	f04f 0a00 	mov.w	sl, #0
 8005ac0:	bfcc      	ite	gt
 8005ac2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005ac6:	ea02 0b01 	andle.w	fp, r2, r1
 8005aca:	2200      	movs	r2, #0
 8005acc:	2300      	movs	r3, #0
 8005ace:	4650      	mov	r0, sl
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	f7fb f801 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d1a2      	bne.n	8005a20 <_strtod_l+0x578>
 8005ada:	9b07      	ldr	r3, [sp, #28]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	9908      	ldr	r1, [sp, #32]
 8005ae0:	462b      	mov	r3, r5
 8005ae2:	463a      	mov	r2, r7
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f002 f90b 	bl	8007d00 <__s2b>
 8005aea:	9007      	str	r0, [sp, #28]
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f43f af1f 	beq.w	8005930 <_strtod_l+0x488>
 8005af2:	9b05      	ldr	r3, [sp, #20]
 8005af4:	1b9e      	subs	r6, r3, r6
 8005af6:	9b06      	ldr	r3, [sp, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bfb4      	ite	lt
 8005afc:	4633      	movlt	r3, r6
 8005afe:	2300      	movge	r3, #0
 8005b00:	930c      	str	r3, [sp, #48]	; 0x30
 8005b02:	9b06      	ldr	r3, [sp, #24]
 8005b04:	2500      	movs	r5, #0
 8005b06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005b0a:	9312      	str	r3, [sp, #72]	; 0x48
 8005b0c:	462e      	mov	r6, r5
 8005b0e:	9b07      	ldr	r3, [sp, #28]
 8005b10:	4620      	mov	r0, r4
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	f002 f84c 	bl	8007bb0 <_Balloc>
 8005b18:	9005      	str	r0, [sp, #20]
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	f43f af0c 	beq.w	8005938 <_strtod_l+0x490>
 8005b20:	9b07      	ldr	r3, [sp, #28]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	3202      	adds	r2, #2
 8005b26:	f103 010c 	add.w	r1, r3, #12
 8005b2a:	0092      	lsls	r2, r2, #2
 8005b2c:	300c      	adds	r0, #12
 8005b2e:	f002 f831 	bl	8007b94 <memcpy>
 8005b32:	ec4b ab10 	vmov	d0, sl, fp
 8005b36:	aa1a      	add	r2, sp, #104	; 0x68
 8005b38:	a919      	add	r1, sp, #100	; 0x64
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f002 fc26 	bl	800838c <__d2b>
 8005b40:	ec4b ab18 	vmov	d8, sl, fp
 8005b44:	9018      	str	r0, [sp, #96]	; 0x60
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f43f aef6 	beq.w	8005938 <_strtod_l+0x490>
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f002 f970 	bl	8007e34 <__i2b>
 8005b54:	4606      	mov	r6, r0
 8005b56:	2800      	cmp	r0, #0
 8005b58:	f43f aeee 	beq.w	8005938 <_strtod_l+0x490>
 8005b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b5e:	9904      	ldr	r1, [sp, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bfab      	itete	ge
 8005b64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005b66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005b68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005b6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005b6e:	bfac      	ite	ge
 8005b70:	eb03 0902 	addge.w	r9, r3, r2
 8005b74:	1ad7      	sublt	r7, r2, r3
 8005b76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005b78:	eba3 0801 	sub.w	r8, r3, r1
 8005b7c:	4490      	add	r8, r2
 8005b7e:	4ba1      	ldr	r3, [pc, #644]	; (8005e04 <_strtod_l+0x95c>)
 8005b80:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b84:	4598      	cmp	r8, r3
 8005b86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005b8a:	f280 80c7 	bge.w	8005d1c <_strtod_l+0x874>
 8005b8e:	eba3 0308 	sub.w	r3, r3, r8
 8005b92:	2b1f      	cmp	r3, #31
 8005b94:	eba2 0203 	sub.w	r2, r2, r3
 8005b98:	f04f 0101 	mov.w	r1, #1
 8005b9c:	f300 80b1 	bgt.w	8005d02 <_strtod_l+0x85a>
 8005ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9308      	str	r3, [sp, #32]
 8005baa:	eb09 0802 	add.w	r8, r9, r2
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	45c1      	cmp	r9, r8
 8005bb2:	4417      	add	r7, r2
 8005bb4:	441f      	add	r7, r3
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	bfa8      	it	ge
 8005bba:	4643      	movge	r3, r8
 8005bbc:	42bb      	cmp	r3, r7
 8005bbe:	bfa8      	it	ge
 8005bc0:	463b      	movge	r3, r7
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bfc2      	ittt	gt
 8005bc6:	eba8 0803 	subgt.w	r8, r8, r3
 8005bca:	1aff      	subgt	r7, r7, r3
 8005bcc:	eba9 0903 	subgt.w	r9, r9, r3
 8005bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd17      	ble.n	8005c06 <_strtod_l+0x75e>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f002 f9ea 	bl	8007fb4 <__pow5mult>
 8005be0:	4606      	mov	r6, r0
 8005be2:	2800      	cmp	r0, #0
 8005be4:	f43f aea8 	beq.w	8005938 <_strtod_l+0x490>
 8005be8:	4601      	mov	r1, r0
 8005bea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005bec:	4620      	mov	r0, r4
 8005bee:	f002 f937 	bl	8007e60 <__multiply>
 8005bf2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	f43f ae9f 	beq.w	8005938 <_strtod_l+0x490>
 8005bfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f002 f817 	bl	8007c30 <_Bfree>
 8005c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c04:	9318      	str	r3, [sp, #96]	; 0x60
 8005c06:	f1b8 0f00 	cmp.w	r8, #0
 8005c0a:	f300 808c 	bgt.w	8005d26 <_strtod_l+0x87e>
 8005c0e:	9b06      	ldr	r3, [sp, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	dd08      	ble.n	8005c26 <_strtod_l+0x77e>
 8005c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c16:	9905      	ldr	r1, [sp, #20]
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f002 f9cb 	bl	8007fb4 <__pow5mult>
 8005c1e:	9005      	str	r0, [sp, #20]
 8005c20:	2800      	cmp	r0, #0
 8005c22:	f43f ae89 	beq.w	8005938 <_strtod_l+0x490>
 8005c26:	2f00      	cmp	r7, #0
 8005c28:	dd08      	ble.n	8005c3c <_strtod_l+0x794>
 8005c2a:	9905      	ldr	r1, [sp, #20]
 8005c2c:	463a      	mov	r2, r7
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f002 fa1a 	bl	8008068 <__lshift>
 8005c34:	9005      	str	r0, [sp, #20]
 8005c36:	2800      	cmp	r0, #0
 8005c38:	f43f ae7e 	beq.w	8005938 <_strtod_l+0x490>
 8005c3c:	f1b9 0f00 	cmp.w	r9, #0
 8005c40:	dd08      	ble.n	8005c54 <_strtod_l+0x7ac>
 8005c42:	4631      	mov	r1, r6
 8005c44:	464a      	mov	r2, r9
 8005c46:	4620      	mov	r0, r4
 8005c48:	f002 fa0e 	bl	8008068 <__lshift>
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	f43f ae72 	beq.w	8005938 <_strtod_l+0x490>
 8005c54:	9a05      	ldr	r2, [sp, #20]
 8005c56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f002 fa91 	bl	8008180 <__mdiff>
 8005c5e:	4605      	mov	r5, r0
 8005c60:	2800      	cmp	r0, #0
 8005c62:	f43f ae69 	beq.w	8005938 <_strtod_l+0x490>
 8005c66:	68c3      	ldr	r3, [r0, #12]
 8005c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60c3      	str	r3, [r0, #12]
 8005c6e:	4631      	mov	r1, r6
 8005c70:	f002 fa6a 	bl	8008148 <__mcmp>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	da60      	bge.n	8005d3a <_strtod_l+0x892>
 8005c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c7a:	ea53 030a 	orrs.w	r3, r3, sl
 8005c7e:	f040 8082 	bne.w	8005d86 <_strtod_l+0x8de>
 8005c82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d17d      	bne.n	8005d86 <_strtod_l+0x8de>
 8005c8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c8e:	0d1b      	lsrs	r3, r3, #20
 8005c90:	051b      	lsls	r3, r3, #20
 8005c92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005c96:	d976      	bls.n	8005d86 <_strtod_l+0x8de>
 8005c98:	696b      	ldr	r3, [r5, #20]
 8005c9a:	b913      	cbnz	r3, 8005ca2 <_strtod_l+0x7fa>
 8005c9c:	692b      	ldr	r3, [r5, #16]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	dd71      	ble.n	8005d86 <_strtod_l+0x8de>
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f002 f9de 	bl	8008068 <__lshift>
 8005cac:	4631      	mov	r1, r6
 8005cae:	4605      	mov	r5, r0
 8005cb0:	f002 fa4a 	bl	8008148 <__mcmp>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	dd66      	ble.n	8005d86 <_strtod_l+0x8de>
 8005cb8:	9904      	ldr	r1, [sp, #16]
 8005cba:	4a53      	ldr	r2, [pc, #332]	; (8005e08 <_strtod_l+0x960>)
 8005cbc:	465b      	mov	r3, fp
 8005cbe:	2900      	cmp	r1, #0
 8005cc0:	f000 8081 	beq.w	8005dc6 <_strtod_l+0x91e>
 8005cc4:	ea02 010b 	and.w	r1, r2, fp
 8005cc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005ccc:	dc7b      	bgt.n	8005dc6 <_strtod_l+0x91e>
 8005cce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005cd2:	f77f aea9 	ble.w	8005a28 <_strtod_l+0x580>
 8005cd6:	4b4d      	ldr	r3, [pc, #308]	; (8005e0c <_strtod_l+0x964>)
 8005cd8:	4650      	mov	r0, sl
 8005cda:	4659      	mov	r1, fp
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f7fa fc93 	bl	8000608 <__aeabi_dmul>
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4303      	orrs	r3, r0
 8005ce6:	bf08      	it	eq
 8005ce8:	2322      	moveq	r3, #34	; 0x22
 8005cea:	4682      	mov	sl, r0
 8005cec:	468b      	mov	fp, r1
 8005cee:	bf08      	it	eq
 8005cf0:	6023      	streq	r3, [r4, #0]
 8005cf2:	e62b      	b.n	800594c <_strtod_l+0x4a4>
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	ea03 0a0a 	and.w	sl, r3, sl
 8005d00:	e6e3      	b.n	8005aca <_strtod_l+0x622>
 8005d02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005d06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005d0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005d0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005d12:	fa01 f308 	lsl.w	r3, r1, r8
 8005d16:	9308      	str	r3, [sp, #32]
 8005d18:	910d      	str	r1, [sp, #52]	; 0x34
 8005d1a:	e746      	b.n	8005baa <_strtod_l+0x702>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9308      	str	r3, [sp, #32]
 8005d20:	2301      	movs	r3, #1
 8005d22:	930d      	str	r3, [sp, #52]	; 0x34
 8005d24:	e741      	b.n	8005baa <_strtod_l+0x702>
 8005d26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d28:	4642      	mov	r2, r8
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f002 f99c 	bl	8008068 <__lshift>
 8005d30:	9018      	str	r0, [sp, #96]	; 0x60
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f47f af6b 	bne.w	8005c0e <_strtod_l+0x766>
 8005d38:	e5fe      	b.n	8005938 <_strtod_l+0x490>
 8005d3a:	465f      	mov	r7, fp
 8005d3c:	d16e      	bne.n	8005e1c <_strtod_l+0x974>
 8005d3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d44:	b342      	cbz	r2, 8005d98 <_strtod_l+0x8f0>
 8005d46:	4a32      	ldr	r2, [pc, #200]	; (8005e10 <_strtod_l+0x968>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d128      	bne.n	8005d9e <_strtod_l+0x8f6>
 8005d4c:	9b04      	ldr	r3, [sp, #16]
 8005d4e:	4651      	mov	r1, sl
 8005d50:	b1eb      	cbz	r3, 8005d8e <_strtod_l+0x8e6>
 8005d52:	4b2d      	ldr	r3, [pc, #180]	; (8005e08 <_strtod_l+0x960>)
 8005d54:	403b      	ands	r3, r7
 8005d56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	d819      	bhi.n	8005d94 <_strtod_l+0x8ec>
 8005d60:	0d1b      	lsrs	r3, r3, #20
 8005d62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	d117      	bne.n	8005d9e <_strtod_l+0x8f6>
 8005d6e:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <_strtod_l+0x96c>)
 8005d70:	429f      	cmp	r7, r3
 8005d72:	d102      	bne.n	8005d7a <_strtod_l+0x8d2>
 8005d74:	3101      	adds	r1, #1
 8005d76:	f43f addf 	beq.w	8005938 <_strtod_l+0x490>
 8005d7a:	4b23      	ldr	r3, [pc, #140]	; (8005e08 <_strtod_l+0x960>)
 8005d7c:	403b      	ands	r3, r7
 8005d7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005d82:	f04f 0a00 	mov.w	sl, #0
 8005d86:	9b04      	ldr	r3, [sp, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1a4      	bne.n	8005cd6 <_strtod_l+0x82e>
 8005d8c:	e5de      	b.n	800594c <_strtod_l+0x4a4>
 8005d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d92:	e7ea      	b.n	8005d6a <_strtod_l+0x8c2>
 8005d94:	4613      	mov	r3, r2
 8005d96:	e7e8      	b.n	8005d6a <_strtod_l+0x8c2>
 8005d98:	ea53 030a 	orrs.w	r3, r3, sl
 8005d9c:	d08c      	beq.n	8005cb8 <_strtod_l+0x810>
 8005d9e:	9b08      	ldr	r3, [sp, #32]
 8005da0:	b1db      	cbz	r3, 8005dda <_strtod_l+0x932>
 8005da2:	423b      	tst	r3, r7
 8005da4:	d0ef      	beq.n	8005d86 <_strtod_l+0x8de>
 8005da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da8:	9a04      	ldr	r2, [sp, #16]
 8005daa:	4650      	mov	r0, sl
 8005dac:	4659      	mov	r1, fp
 8005dae:	b1c3      	cbz	r3, 8005de2 <_strtod_l+0x93a>
 8005db0:	f7ff fb5e 	bl	8005470 <sulp>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	ec51 0b18 	vmov	r0, r1, d8
 8005dbc:	f7fa fa6e 	bl	800029c <__adddf3>
 8005dc0:	4682      	mov	sl, r0
 8005dc2:	468b      	mov	fp, r1
 8005dc4:	e7df      	b.n	8005d86 <_strtod_l+0x8de>
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005dcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005dd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005dd4:	f04f 3aff 	mov.w	sl, #4294967295
 8005dd8:	e7d5      	b.n	8005d86 <_strtod_l+0x8de>
 8005dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ddc:	ea13 0f0a 	tst.w	r3, sl
 8005de0:	e7e0      	b.n	8005da4 <_strtod_l+0x8fc>
 8005de2:	f7ff fb45 	bl	8005470 <sulp>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	ec51 0b18 	vmov	r0, r1, d8
 8005dee:	f7fa fa53 	bl	8000298 <__aeabi_dsub>
 8005df2:	2200      	movs	r2, #0
 8005df4:	2300      	movs	r3, #0
 8005df6:	4682      	mov	sl, r0
 8005df8:	468b      	mov	fp, r1
 8005dfa:	f7fa fe6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d0c1      	beq.n	8005d86 <_strtod_l+0x8de>
 8005e02:	e611      	b.n	8005a28 <_strtod_l+0x580>
 8005e04:	fffffc02 	.word	0xfffffc02
 8005e08:	7ff00000 	.word	0x7ff00000
 8005e0c:	39500000 	.word	0x39500000
 8005e10:	000fffff 	.word	0x000fffff
 8005e14:	7fefffff 	.word	0x7fefffff
 8005e18:	080091f0 	.word	0x080091f0
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f002 fb10 	bl	8008444 <__ratio>
 8005e24:	ec59 8b10 	vmov	r8, r9, d0
 8005e28:	ee10 0a10 	vmov	r0, s0
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fe64 	bl	8000b00 <__aeabi_dcmple>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d07a      	beq.n	8005f32 <_strtod_l+0xa8a>
 8005e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d04a      	beq.n	8005ed8 <_strtod_l+0xa30>
 8005e42:	4b95      	ldr	r3, [pc, #596]	; (8006098 <_strtod_l+0xbf0>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005e4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006098 <_strtod_l+0xbf0>
 8005e4e:	f04f 0800 	mov.w	r8, #0
 8005e52:	4b92      	ldr	r3, [pc, #584]	; (800609c <_strtod_l+0xbf4>)
 8005e54:	403b      	ands	r3, r7
 8005e56:	930d      	str	r3, [sp, #52]	; 0x34
 8005e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e5a:	4b91      	ldr	r3, [pc, #580]	; (80060a0 <_strtod_l+0xbf8>)
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	f040 80b0 	bne.w	8005fc2 <_strtod_l+0xb1a>
 8005e62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005e6a:	ec4b ab10 	vmov	d0, sl, fp
 8005e6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e72:	f002 fa0f 	bl	8008294 <__ulp>
 8005e76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e7a:	ec53 2b10 	vmov	r2, r3, d0
 8005e7e:	f7fa fbc3 	bl	8000608 <__aeabi_dmul>
 8005e82:	4652      	mov	r2, sl
 8005e84:	465b      	mov	r3, fp
 8005e86:	f7fa fa09 	bl	800029c <__adddf3>
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4983      	ldr	r1, [pc, #524]	; (800609c <_strtod_l+0xbf4>)
 8005e8e:	4a85      	ldr	r2, [pc, #532]	; (80060a4 <_strtod_l+0xbfc>)
 8005e90:	4019      	ands	r1, r3
 8005e92:	4291      	cmp	r1, r2
 8005e94:	4682      	mov	sl, r0
 8005e96:	d960      	bls.n	8005f5a <_strtod_l+0xab2>
 8005e98:	ee18 3a90 	vmov	r3, s17
 8005e9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d104      	bne.n	8005eae <_strtod_l+0xa06>
 8005ea4:	ee18 3a10 	vmov	r3, s16
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f43f ad45 	beq.w	8005938 <_strtod_l+0x490>
 8005eae:	f8df b200 	ldr.w	fp, [pc, #512]	; 80060b0 <_strtod_l+0xc08>
 8005eb2:	f04f 3aff 	mov.w	sl, #4294967295
 8005eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f001 feb9 	bl	8007c30 <_Bfree>
 8005ebe:	9905      	ldr	r1, [sp, #20]
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f001 feb5 	bl	8007c30 <_Bfree>
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f001 feb1 	bl	8007c30 <_Bfree>
 8005ece:	4629      	mov	r1, r5
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f001 fead 	bl	8007c30 <_Bfree>
 8005ed6:	e61a      	b.n	8005b0e <_strtod_l+0x666>
 8005ed8:	f1ba 0f00 	cmp.w	sl, #0
 8005edc:	d11b      	bne.n	8005f16 <_strtod_l+0xa6e>
 8005ede:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ee2:	b9f3      	cbnz	r3, 8005f22 <_strtod_l+0xa7a>
 8005ee4:	4b6c      	ldr	r3, [pc, #432]	; (8006098 <_strtod_l+0xbf0>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	4640      	mov	r0, r8
 8005eea:	4649      	mov	r1, r9
 8005eec:	f7fa fdfe 	bl	8000aec <__aeabi_dcmplt>
 8005ef0:	b9d0      	cbnz	r0, 8005f28 <_strtod_l+0xa80>
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	4b6c      	ldr	r3, [pc, #432]	; (80060a8 <_strtod_l+0xc00>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f7fa fb85 	bl	8000608 <__aeabi_dmul>
 8005efe:	4680      	mov	r8, r0
 8005f00:	4689      	mov	r9, r1
 8005f02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005f06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005f0a:	9315      	str	r3, [sp, #84]	; 0x54
 8005f0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005f10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f14:	e79d      	b.n	8005e52 <_strtod_l+0x9aa>
 8005f16:	f1ba 0f01 	cmp.w	sl, #1
 8005f1a:	d102      	bne.n	8005f22 <_strtod_l+0xa7a>
 8005f1c:	2f00      	cmp	r7, #0
 8005f1e:	f43f ad83 	beq.w	8005a28 <_strtod_l+0x580>
 8005f22:	4b62      	ldr	r3, [pc, #392]	; (80060ac <_strtod_l+0xc04>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	e78e      	b.n	8005e46 <_strtod_l+0x99e>
 8005f28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80060a8 <_strtod_l+0xc00>
 8005f2c:	f04f 0800 	mov.w	r8, #0
 8005f30:	e7e7      	b.n	8005f02 <_strtod_l+0xa5a>
 8005f32:	4b5d      	ldr	r3, [pc, #372]	; (80060a8 <_strtod_l+0xc00>)
 8005f34:	4640      	mov	r0, r8
 8005f36:	4649      	mov	r1, r9
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f7fa fb65 	bl	8000608 <__aeabi_dmul>
 8005f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f40:	4680      	mov	r8, r0
 8005f42:	4689      	mov	r9, r1
 8005f44:	b933      	cbnz	r3, 8005f54 <_strtod_l+0xaac>
 8005f46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f4a:	900e      	str	r0, [sp, #56]	; 0x38
 8005f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005f52:	e7dd      	b.n	8005f10 <_strtod_l+0xa68>
 8005f54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005f58:	e7f9      	b.n	8005f4e <_strtod_l+0xaa6>
 8005f5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005f5e:	9b04      	ldr	r3, [sp, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1a8      	bne.n	8005eb6 <_strtod_l+0xa0e>
 8005f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f6a:	0d1b      	lsrs	r3, r3, #20
 8005f6c:	051b      	lsls	r3, r3, #20
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d1a1      	bne.n	8005eb6 <_strtod_l+0xa0e>
 8005f72:	4640      	mov	r0, r8
 8005f74:	4649      	mov	r1, r9
 8005f76:	f7fa fea7 	bl	8000cc8 <__aeabi_d2lz>
 8005f7a:	f7fa fb17 	bl	80005ac <__aeabi_l2d>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa f987 	bl	8000298 <__aeabi_dsub>
 8005f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f90:	ea43 030a 	orr.w	r3, r3, sl
 8005f94:	4313      	orrs	r3, r2
 8005f96:	4680      	mov	r8, r0
 8005f98:	4689      	mov	r9, r1
 8005f9a:	d055      	beq.n	8006048 <_strtod_l+0xba0>
 8005f9c:	a336      	add	r3, pc, #216	; (adr r3, 8006078 <_strtod_l+0xbd0>)
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f7fa fda3 	bl	8000aec <__aeabi_dcmplt>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f47f acd0 	bne.w	800594c <_strtod_l+0x4a4>
 8005fac:	a334      	add	r3, pc, #208	; (adr r3, 8006080 <_strtod_l+0xbd8>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	f7fa fdb7 	bl	8000b28 <__aeabi_dcmpgt>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	f43f af7b 	beq.w	8005eb6 <_strtod_l+0xa0e>
 8005fc0:	e4c4      	b.n	800594c <_strtod_l+0x4a4>
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	b333      	cbz	r3, 8006014 <_strtod_l+0xb6c>
 8005fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005fcc:	d822      	bhi.n	8006014 <_strtod_l+0xb6c>
 8005fce:	a32e      	add	r3, pc, #184	; (adr r3, 8006088 <_strtod_l+0xbe0>)
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	f7fa fd92 	bl	8000b00 <__aeabi_dcmple>
 8005fdc:	b1a0      	cbz	r0, 8006008 <_strtod_l+0xb60>
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	f7fa fde9 	bl	8000bb8 <__aeabi_d2uiz>
 8005fe6:	2801      	cmp	r0, #1
 8005fe8:	bf38      	it	cc
 8005fea:	2001      	movcc	r0, #1
 8005fec:	f7fa fa92 	bl	8000514 <__aeabi_ui2d>
 8005ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ff2:	4680      	mov	r8, r0
 8005ff4:	4689      	mov	r9, r1
 8005ff6:	bb23      	cbnz	r3, 8006042 <_strtod_l+0xb9a>
 8005ff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ffc:	9010      	str	r0, [sp, #64]	; 0x40
 8005ffe:	9311      	str	r3, [sp, #68]	; 0x44
 8006000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006004:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800600c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	9309      	str	r3, [sp, #36]	; 0x24
 8006014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006018:	eeb0 0a48 	vmov.f32	s0, s16
 800601c:	eef0 0a68 	vmov.f32	s1, s17
 8006020:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006024:	f002 f936 	bl	8008294 <__ulp>
 8006028:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800602c:	ec53 2b10 	vmov	r2, r3, d0
 8006030:	f7fa faea 	bl	8000608 <__aeabi_dmul>
 8006034:	ec53 2b18 	vmov	r2, r3, d8
 8006038:	f7fa f930 	bl	800029c <__adddf3>
 800603c:	4682      	mov	sl, r0
 800603e:	468b      	mov	fp, r1
 8006040:	e78d      	b.n	8005f5e <_strtod_l+0xab6>
 8006042:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006046:	e7db      	b.n	8006000 <_strtod_l+0xb58>
 8006048:	a311      	add	r3, pc, #68	; (adr r3, 8006090 <_strtod_l+0xbe8>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fd4d 	bl	8000aec <__aeabi_dcmplt>
 8006052:	e7b2      	b.n	8005fba <_strtod_l+0xb12>
 8006054:	2300      	movs	r3, #0
 8006056:	930a      	str	r3, [sp, #40]	; 0x28
 8006058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800605a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	f7ff ba6b 	b.w	8005538 <_strtod_l+0x90>
 8006062:	2a65      	cmp	r2, #101	; 0x65
 8006064:	f43f ab5f 	beq.w	8005726 <_strtod_l+0x27e>
 8006068:	2a45      	cmp	r2, #69	; 0x45
 800606a:	f43f ab5c 	beq.w	8005726 <_strtod_l+0x27e>
 800606e:	2301      	movs	r3, #1
 8006070:	f7ff bb94 	b.w	800579c <_strtod_l+0x2f4>
 8006074:	f3af 8000 	nop.w
 8006078:	94a03595 	.word	0x94a03595
 800607c:	3fdfffff 	.word	0x3fdfffff
 8006080:	35afe535 	.word	0x35afe535
 8006084:	3fe00000 	.word	0x3fe00000
 8006088:	ffc00000 	.word	0xffc00000
 800608c:	41dfffff 	.word	0x41dfffff
 8006090:	94a03595 	.word	0x94a03595
 8006094:	3fcfffff 	.word	0x3fcfffff
 8006098:	3ff00000 	.word	0x3ff00000
 800609c:	7ff00000 	.word	0x7ff00000
 80060a0:	7fe00000 	.word	0x7fe00000
 80060a4:	7c9fffff 	.word	0x7c9fffff
 80060a8:	3fe00000 	.word	0x3fe00000
 80060ac:	bff00000 	.word	0xbff00000
 80060b0:	7fefffff 	.word	0x7fefffff

080060b4 <_strtod_r>:
 80060b4:	4b01      	ldr	r3, [pc, #4]	; (80060bc <_strtod_r+0x8>)
 80060b6:	f7ff b9f7 	b.w	80054a8 <_strtod_l>
 80060ba:	bf00      	nop
 80060bc:	200000e0 	.word	0x200000e0

080060c0 <_strtol_l.constprop.0>:
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c6:	d001      	beq.n	80060cc <_strtol_l.constprop.0+0xc>
 80060c8:	2b24      	cmp	r3, #36	; 0x24
 80060ca:	d906      	bls.n	80060da <_strtol_l.constprop.0+0x1a>
 80060cc:	f7fe fa5a 	bl	8004584 <__errno>
 80060d0:	2316      	movs	r3, #22
 80060d2:	6003      	str	r3, [r0, #0]
 80060d4:	2000      	movs	r0, #0
 80060d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80061c0 <_strtol_l.constprop.0+0x100>
 80060de:	460d      	mov	r5, r1
 80060e0:	462e      	mov	r6, r5
 80060e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80060ea:	f017 0708 	ands.w	r7, r7, #8
 80060ee:	d1f7      	bne.n	80060e0 <_strtol_l.constprop.0+0x20>
 80060f0:	2c2d      	cmp	r4, #45	; 0x2d
 80060f2:	d132      	bne.n	800615a <_strtol_l.constprop.0+0x9a>
 80060f4:	782c      	ldrb	r4, [r5, #0]
 80060f6:	2701      	movs	r7, #1
 80060f8:	1cb5      	adds	r5, r6, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d05b      	beq.n	80061b6 <_strtol_l.constprop.0+0xf6>
 80060fe:	2b10      	cmp	r3, #16
 8006100:	d109      	bne.n	8006116 <_strtol_l.constprop.0+0x56>
 8006102:	2c30      	cmp	r4, #48	; 0x30
 8006104:	d107      	bne.n	8006116 <_strtol_l.constprop.0+0x56>
 8006106:	782c      	ldrb	r4, [r5, #0]
 8006108:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800610c:	2c58      	cmp	r4, #88	; 0x58
 800610e:	d14d      	bne.n	80061ac <_strtol_l.constprop.0+0xec>
 8006110:	786c      	ldrb	r4, [r5, #1]
 8006112:	2310      	movs	r3, #16
 8006114:	3502      	adds	r5, #2
 8006116:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800611a:	f108 38ff 	add.w	r8, r8, #4294967295
 800611e:	f04f 0c00 	mov.w	ip, #0
 8006122:	fbb8 f9f3 	udiv	r9, r8, r3
 8006126:	4666      	mov	r6, ip
 8006128:	fb03 8a19 	mls	sl, r3, r9, r8
 800612c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006130:	f1be 0f09 	cmp.w	lr, #9
 8006134:	d816      	bhi.n	8006164 <_strtol_l.constprop.0+0xa4>
 8006136:	4674      	mov	r4, lr
 8006138:	42a3      	cmp	r3, r4
 800613a:	dd24      	ble.n	8006186 <_strtol_l.constprop.0+0xc6>
 800613c:	f1bc 0f00 	cmp.w	ip, #0
 8006140:	db1e      	blt.n	8006180 <_strtol_l.constprop.0+0xc0>
 8006142:	45b1      	cmp	r9, r6
 8006144:	d31c      	bcc.n	8006180 <_strtol_l.constprop.0+0xc0>
 8006146:	d101      	bne.n	800614c <_strtol_l.constprop.0+0x8c>
 8006148:	45a2      	cmp	sl, r4
 800614a:	db19      	blt.n	8006180 <_strtol_l.constprop.0+0xc0>
 800614c:	fb06 4603 	mla	r6, r6, r3, r4
 8006150:	f04f 0c01 	mov.w	ip, #1
 8006154:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006158:	e7e8      	b.n	800612c <_strtol_l.constprop.0+0x6c>
 800615a:	2c2b      	cmp	r4, #43	; 0x2b
 800615c:	bf04      	itt	eq
 800615e:	782c      	ldrbeq	r4, [r5, #0]
 8006160:	1cb5      	addeq	r5, r6, #2
 8006162:	e7ca      	b.n	80060fa <_strtol_l.constprop.0+0x3a>
 8006164:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006168:	f1be 0f19 	cmp.w	lr, #25
 800616c:	d801      	bhi.n	8006172 <_strtol_l.constprop.0+0xb2>
 800616e:	3c37      	subs	r4, #55	; 0x37
 8006170:	e7e2      	b.n	8006138 <_strtol_l.constprop.0+0x78>
 8006172:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006176:	f1be 0f19 	cmp.w	lr, #25
 800617a:	d804      	bhi.n	8006186 <_strtol_l.constprop.0+0xc6>
 800617c:	3c57      	subs	r4, #87	; 0x57
 800617e:	e7db      	b.n	8006138 <_strtol_l.constprop.0+0x78>
 8006180:	f04f 3cff 	mov.w	ip, #4294967295
 8006184:	e7e6      	b.n	8006154 <_strtol_l.constprop.0+0x94>
 8006186:	f1bc 0f00 	cmp.w	ip, #0
 800618a:	da05      	bge.n	8006198 <_strtol_l.constprop.0+0xd8>
 800618c:	2322      	movs	r3, #34	; 0x22
 800618e:	6003      	str	r3, [r0, #0]
 8006190:	4646      	mov	r6, r8
 8006192:	b942      	cbnz	r2, 80061a6 <_strtol_l.constprop.0+0xe6>
 8006194:	4630      	mov	r0, r6
 8006196:	e79e      	b.n	80060d6 <_strtol_l.constprop.0+0x16>
 8006198:	b107      	cbz	r7, 800619c <_strtol_l.constprop.0+0xdc>
 800619a:	4276      	negs	r6, r6
 800619c:	2a00      	cmp	r2, #0
 800619e:	d0f9      	beq.n	8006194 <_strtol_l.constprop.0+0xd4>
 80061a0:	f1bc 0f00 	cmp.w	ip, #0
 80061a4:	d000      	beq.n	80061a8 <_strtol_l.constprop.0+0xe8>
 80061a6:	1e69      	subs	r1, r5, #1
 80061a8:	6011      	str	r1, [r2, #0]
 80061aa:	e7f3      	b.n	8006194 <_strtol_l.constprop.0+0xd4>
 80061ac:	2430      	movs	r4, #48	; 0x30
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1b1      	bne.n	8006116 <_strtol_l.constprop.0+0x56>
 80061b2:	2308      	movs	r3, #8
 80061b4:	e7af      	b.n	8006116 <_strtol_l.constprop.0+0x56>
 80061b6:	2c30      	cmp	r4, #48	; 0x30
 80061b8:	d0a5      	beq.n	8006106 <_strtol_l.constprop.0+0x46>
 80061ba:	230a      	movs	r3, #10
 80061bc:	e7ab      	b.n	8006116 <_strtol_l.constprop.0+0x56>
 80061be:	bf00      	nop
 80061c0:	08009219 	.word	0x08009219

080061c4 <_strtol_r>:
 80061c4:	f7ff bf7c 	b.w	80060c0 <_strtol_l.constprop.0>

080061c8 <__swbuf_r>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	460e      	mov	r6, r1
 80061cc:	4614      	mov	r4, r2
 80061ce:	4605      	mov	r5, r0
 80061d0:	b118      	cbz	r0, 80061da <__swbuf_r+0x12>
 80061d2:	6983      	ldr	r3, [r0, #24]
 80061d4:	b90b      	cbnz	r3, 80061da <__swbuf_r+0x12>
 80061d6:	f001 f84b 	bl	8007270 <__sinit>
 80061da:	4b21      	ldr	r3, [pc, #132]	; (8006260 <__swbuf_r+0x98>)
 80061dc:	429c      	cmp	r4, r3
 80061de:	d12b      	bne.n	8006238 <__swbuf_r+0x70>
 80061e0:	686c      	ldr	r4, [r5, #4]
 80061e2:	69a3      	ldr	r3, [r4, #24]
 80061e4:	60a3      	str	r3, [r4, #8]
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	071a      	lsls	r2, r3, #28
 80061ea:	d52f      	bpl.n	800624c <__swbuf_r+0x84>
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	b36b      	cbz	r3, 800624c <__swbuf_r+0x84>
 80061f0:	6923      	ldr	r3, [r4, #16]
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	1ac0      	subs	r0, r0, r3
 80061f6:	6963      	ldr	r3, [r4, #20]
 80061f8:	b2f6      	uxtb	r6, r6
 80061fa:	4283      	cmp	r3, r0
 80061fc:	4637      	mov	r7, r6
 80061fe:	dc04      	bgt.n	800620a <__swbuf_r+0x42>
 8006200:	4621      	mov	r1, r4
 8006202:	4628      	mov	r0, r5
 8006204:	f000 ffa0 	bl	8007148 <_fflush_r>
 8006208:	bb30      	cbnz	r0, 8006258 <__swbuf_r+0x90>
 800620a:	68a3      	ldr	r3, [r4, #8]
 800620c:	3b01      	subs	r3, #1
 800620e:	60a3      	str	r3, [r4, #8]
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	6022      	str	r2, [r4, #0]
 8006216:	701e      	strb	r6, [r3, #0]
 8006218:	6963      	ldr	r3, [r4, #20]
 800621a:	3001      	adds	r0, #1
 800621c:	4283      	cmp	r3, r0
 800621e:	d004      	beq.n	800622a <__swbuf_r+0x62>
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	07db      	lsls	r3, r3, #31
 8006224:	d506      	bpl.n	8006234 <__swbuf_r+0x6c>
 8006226:	2e0a      	cmp	r6, #10
 8006228:	d104      	bne.n	8006234 <__swbuf_r+0x6c>
 800622a:	4621      	mov	r1, r4
 800622c:	4628      	mov	r0, r5
 800622e:	f000 ff8b 	bl	8007148 <_fflush_r>
 8006232:	b988      	cbnz	r0, 8006258 <__swbuf_r+0x90>
 8006234:	4638      	mov	r0, r7
 8006236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006238:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <__swbuf_r+0x9c>)
 800623a:	429c      	cmp	r4, r3
 800623c:	d101      	bne.n	8006242 <__swbuf_r+0x7a>
 800623e:	68ac      	ldr	r4, [r5, #8]
 8006240:	e7cf      	b.n	80061e2 <__swbuf_r+0x1a>
 8006242:	4b09      	ldr	r3, [pc, #36]	; (8006268 <__swbuf_r+0xa0>)
 8006244:	429c      	cmp	r4, r3
 8006246:	bf08      	it	eq
 8006248:	68ec      	ldreq	r4, [r5, #12]
 800624a:	e7ca      	b.n	80061e2 <__swbuf_r+0x1a>
 800624c:	4621      	mov	r1, r4
 800624e:	4628      	mov	r0, r5
 8006250:	f000 f80c 	bl	800626c <__swsetup_r>
 8006254:	2800      	cmp	r0, #0
 8006256:	d0cb      	beq.n	80061f0 <__swbuf_r+0x28>
 8006258:	f04f 37ff 	mov.w	r7, #4294967295
 800625c:	e7ea      	b.n	8006234 <__swbuf_r+0x6c>
 800625e:	bf00      	nop
 8006260:	080093cc 	.word	0x080093cc
 8006264:	080093ec 	.word	0x080093ec
 8006268:	080093ac 	.word	0x080093ac

0800626c <__swsetup_r>:
 800626c:	4b32      	ldr	r3, [pc, #200]	; (8006338 <__swsetup_r+0xcc>)
 800626e:	b570      	push	{r4, r5, r6, lr}
 8006270:	681d      	ldr	r5, [r3, #0]
 8006272:	4606      	mov	r6, r0
 8006274:	460c      	mov	r4, r1
 8006276:	b125      	cbz	r5, 8006282 <__swsetup_r+0x16>
 8006278:	69ab      	ldr	r3, [r5, #24]
 800627a:	b913      	cbnz	r3, 8006282 <__swsetup_r+0x16>
 800627c:	4628      	mov	r0, r5
 800627e:	f000 fff7 	bl	8007270 <__sinit>
 8006282:	4b2e      	ldr	r3, [pc, #184]	; (800633c <__swsetup_r+0xd0>)
 8006284:	429c      	cmp	r4, r3
 8006286:	d10f      	bne.n	80062a8 <__swsetup_r+0x3c>
 8006288:	686c      	ldr	r4, [r5, #4]
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006290:	0719      	lsls	r1, r3, #28
 8006292:	d42c      	bmi.n	80062ee <__swsetup_r+0x82>
 8006294:	06dd      	lsls	r5, r3, #27
 8006296:	d411      	bmi.n	80062bc <__swsetup_r+0x50>
 8006298:	2309      	movs	r3, #9
 800629a:	6033      	str	r3, [r6, #0]
 800629c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	f04f 30ff 	mov.w	r0, #4294967295
 80062a6:	e03e      	b.n	8006326 <__swsetup_r+0xba>
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <__swsetup_r+0xd4>)
 80062aa:	429c      	cmp	r4, r3
 80062ac:	d101      	bne.n	80062b2 <__swsetup_r+0x46>
 80062ae:	68ac      	ldr	r4, [r5, #8]
 80062b0:	e7eb      	b.n	800628a <__swsetup_r+0x1e>
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <__swsetup_r+0xd8>)
 80062b4:	429c      	cmp	r4, r3
 80062b6:	bf08      	it	eq
 80062b8:	68ec      	ldreq	r4, [r5, #12]
 80062ba:	e7e6      	b.n	800628a <__swsetup_r+0x1e>
 80062bc:	0758      	lsls	r0, r3, #29
 80062be:	d512      	bpl.n	80062e6 <__swsetup_r+0x7a>
 80062c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062c2:	b141      	cbz	r1, 80062d6 <__swsetup_r+0x6a>
 80062c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062c8:	4299      	cmp	r1, r3
 80062ca:	d002      	beq.n	80062d2 <__swsetup_r+0x66>
 80062cc:	4630      	mov	r0, r6
 80062ce:	f002 f947 	bl	8008560 <_free_r>
 80062d2:	2300      	movs	r3, #0
 80062d4:	6363      	str	r3, [r4, #52]	; 0x34
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062dc:	81a3      	strh	r3, [r4, #12]
 80062de:	2300      	movs	r3, #0
 80062e0:	6063      	str	r3, [r4, #4]
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	f043 0308 	orr.w	r3, r3, #8
 80062ec:	81a3      	strh	r3, [r4, #12]
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	b94b      	cbnz	r3, 8006306 <__swsetup_r+0x9a>
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fc:	d003      	beq.n	8006306 <__swsetup_r+0x9a>
 80062fe:	4621      	mov	r1, r4
 8006300:	4630      	mov	r0, r6
 8006302:	f001 fbed 	bl	8007ae0 <__smakebuf_r>
 8006306:	89a0      	ldrh	r0, [r4, #12]
 8006308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800630c:	f010 0301 	ands.w	r3, r0, #1
 8006310:	d00a      	beq.n	8006328 <__swsetup_r+0xbc>
 8006312:	2300      	movs	r3, #0
 8006314:	60a3      	str	r3, [r4, #8]
 8006316:	6963      	ldr	r3, [r4, #20]
 8006318:	425b      	negs	r3, r3
 800631a:	61a3      	str	r3, [r4, #24]
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	b943      	cbnz	r3, 8006332 <__swsetup_r+0xc6>
 8006320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006324:	d1ba      	bne.n	800629c <__swsetup_r+0x30>
 8006326:	bd70      	pop	{r4, r5, r6, pc}
 8006328:	0781      	lsls	r1, r0, #30
 800632a:	bf58      	it	pl
 800632c:	6963      	ldrpl	r3, [r4, #20]
 800632e:	60a3      	str	r3, [r4, #8]
 8006330:	e7f4      	b.n	800631c <__swsetup_r+0xb0>
 8006332:	2000      	movs	r0, #0
 8006334:	e7f7      	b.n	8006326 <__swsetup_r+0xba>
 8006336:	bf00      	nop
 8006338:	20000078 	.word	0x20000078
 800633c:	080093cc 	.word	0x080093cc
 8006340:	080093ec 	.word	0x080093ec
 8006344:	080093ac 	.word	0x080093ac

08006348 <quorem>:
 8006348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634c:	6903      	ldr	r3, [r0, #16]
 800634e:	690c      	ldr	r4, [r1, #16]
 8006350:	42a3      	cmp	r3, r4
 8006352:	4607      	mov	r7, r0
 8006354:	f2c0 8081 	blt.w	800645a <quorem+0x112>
 8006358:	3c01      	subs	r4, #1
 800635a:	f101 0814 	add.w	r8, r1, #20
 800635e:	f100 0514 	add.w	r5, r0, #20
 8006362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800636c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006370:	3301      	adds	r3, #1
 8006372:	429a      	cmp	r2, r3
 8006374:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006378:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800637c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006380:	d331      	bcc.n	80063e6 <quorem+0x9e>
 8006382:	f04f 0e00 	mov.w	lr, #0
 8006386:	4640      	mov	r0, r8
 8006388:	46ac      	mov	ip, r5
 800638a:	46f2      	mov	sl, lr
 800638c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006390:	b293      	uxth	r3, r2
 8006392:	fb06 e303 	mla	r3, r6, r3, lr
 8006396:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800639a:	b29b      	uxth	r3, r3
 800639c:	ebaa 0303 	sub.w	r3, sl, r3
 80063a0:	f8dc a000 	ldr.w	sl, [ip]
 80063a4:	0c12      	lsrs	r2, r2, #16
 80063a6:	fa13 f38a 	uxtah	r3, r3, sl
 80063aa:	fb06 e202 	mla	r2, r6, r2, lr
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	9b00      	ldr	r3, [sp, #0]
 80063b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063b6:	b292      	uxth	r2, r2
 80063b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80063c4:	4581      	cmp	r9, r0
 80063c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ca:	f84c 3b04 	str.w	r3, [ip], #4
 80063ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063d2:	d2db      	bcs.n	800638c <quorem+0x44>
 80063d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80063d8:	b92b      	cbnz	r3, 80063e6 <quorem+0x9e>
 80063da:	9b01      	ldr	r3, [sp, #4]
 80063dc:	3b04      	subs	r3, #4
 80063de:	429d      	cmp	r5, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	d32e      	bcc.n	8006442 <quorem+0xfa>
 80063e4:	613c      	str	r4, [r7, #16]
 80063e6:	4638      	mov	r0, r7
 80063e8:	f001 feae 	bl	8008148 <__mcmp>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	db24      	blt.n	800643a <quorem+0xf2>
 80063f0:	3601      	adds	r6, #1
 80063f2:	4628      	mov	r0, r5
 80063f4:	f04f 0c00 	mov.w	ip, #0
 80063f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80063fc:	f8d0 e000 	ldr.w	lr, [r0]
 8006400:	b293      	uxth	r3, r2
 8006402:	ebac 0303 	sub.w	r3, ip, r3
 8006406:	0c12      	lsrs	r2, r2, #16
 8006408:	fa13 f38e 	uxtah	r3, r3, lr
 800640c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006414:	b29b      	uxth	r3, r3
 8006416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800641a:	45c1      	cmp	r9, r8
 800641c:	f840 3b04 	str.w	r3, [r0], #4
 8006420:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006424:	d2e8      	bcs.n	80063f8 <quorem+0xb0>
 8006426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800642a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800642e:	b922      	cbnz	r2, 800643a <quorem+0xf2>
 8006430:	3b04      	subs	r3, #4
 8006432:	429d      	cmp	r5, r3
 8006434:	461a      	mov	r2, r3
 8006436:	d30a      	bcc.n	800644e <quorem+0x106>
 8006438:	613c      	str	r4, [r7, #16]
 800643a:	4630      	mov	r0, r6
 800643c:	b003      	add	sp, #12
 800643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	3b04      	subs	r3, #4
 8006446:	2a00      	cmp	r2, #0
 8006448:	d1cc      	bne.n	80063e4 <quorem+0x9c>
 800644a:	3c01      	subs	r4, #1
 800644c:	e7c7      	b.n	80063de <quorem+0x96>
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	3b04      	subs	r3, #4
 8006452:	2a00      	cmp	r2, #0
 8006454:	d1f0      	bne.n	8006438 <quorem+0xf0>
 8006456:	3c01      	subs	r4, #1
 8006458:	e7eb      	b.n	8006432 <quorem+0xea>
 800645a:	2000      	movs	r0, #0
 800645c:	e7ee      	b.n	800643c <quorem+0xf4>
	...

08006460 <_dtoa_r>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	ed2d 8b04 	vpush	{d8-d9}
 8006468:	ec57 6b10 	vmov	r6, r7, d0
 800646c:	b093      	sub	sp, #76	; 0x4c
 800646e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006470:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006474:	9106      	str	r1, [sp, #24]
 8006476:	ee10 aa10 	vmov	sl, s0
 800647a:	4604      	mov	r4, r0
 800647c:	9209      	str	r2, [sp, #36]	; 0x24
 800647e:	930c      	str	r3, [sp, #48]	; 0x30
 8006480:	46bb      	mov	fp, r7
 8006482:	b975      	cbnz	r5, 80064a2 <_dtoa_r+0x42>
 8006484:	2010      	movs	r0, #16
 8006486:	f001 fb6b 	bl	8007b60 <malloc>
 800648a:	4602      	mov	r2, r0
 800648c:	6260      	str	r0, [r4, #36]	; 0x24
 800648e:	b920      	cbnz	r0, 800649a <_dtoa_r+0x3a>
 8006490:	4ba7      	ldr	r3, [pc, #668]	; (8006730 <_dtoa_r+0x2d0>)
 8006492:	21ea      	movs	r1, #234	; 0xea
 8006494:	48a7      	ldr	r0, [pc, #668]	; (8006734 <_dtoa_r+0x2d4>)
 8006496:	f002 fcd1 	bl	8008e3c <__assert_func>
 800649a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800649e:	6005      	str	r5, [r0, #0]
 80064a0:	60c5      	str	r5, [r0, #12]
 80064a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a4:	6819      	ldr	r1, [r3, #0]
 80064a6:	b151      	cbz	r1, 80064be <_dtoa_r+0x5e>
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	604a      	str	r2, [r1, #4]
 80064ac:	2301      	movs	r3, #1
 80064ae:	4093      	lsls	r3, r2
 80064b0:	608b      	str	r3, [r1, #8]
 80064b2:	4620      	mov	r0, r4
 80064b4:	f001 fbbc 	bl	8007c30 <_Bfree>
 80064b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	1e3b      	subs	r3, r7, #0
 80064c0:	bfaa      	itet	ge
 80064c2:	2300      	movge	r3, #0
 80064c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064c8:	f8c8 3000 	strge.w	r3, [r8]
 80064cc:	4b9a      	ldr	r3, [pc, #616]	; (8006738 <_dtoa_r+0x2d8>)
 80064ce:	bfbc      	itt	lt
 80064d0:	2201      	movlt	r2, #1
 80064d2:	f8c8 2000 	strlt.w	r2, [r8]
 80064d6:	ea33 030b 	bics.w	r3, r3, fp
 80064da:	d11b      	bne.n	8006514 <_dtoa_r+0xb4>
 80064dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064de:	f242 730f 	movw	r3, #9999	; 0x270f
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064e8:	4333      	orrs	r3, r6
 80064ea:	f000 8592 	beq.w	8007012 <_dtoa_r+0xbb2>
 80064ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064f0:	b963      	cbnz	r3, 800650c <_dtoa_r+0xac>
 80064f2:	4b92      	ldr	r3, [pc, #584]	; (800673c <_dtoa_r+0x2dc>)
 80064f4:	e022      	b.n	800653c <_dtoa_r+0xdc>
 80064f6:	4b92      	ldr	r3, [pc, #584]	; (8006740 <_dtoa_r+0x2e0>)
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	3308      	adds	r3, #8
 80064fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	9801      	ldr	r0, [sp, #4]
 8006502:	b013      	add	sp, #76	; 0x4c
 8006504:	ecbd 8b04 	vpop	{d8-d9}
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	4b8b      	ldr	r3, [pc, #556]	; (800673c <_dtoa_r+0x2dc>)
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	3303      	adds	r3, #3
 8006512:	e7f3      	b.n	80064fc <_dtoa_r+0x9c>
 8006514:	2200      	movs	r2, #0
 8006516:	2300      	movs	r3, #0
 8006518:	4650      	mov	r0, sl
 800651a:	4659      	mov	r1, fp
 800651c:	f7fa fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006520:	ec4b ab19 	vmov	d9, sl, fp
 8006524:	4680      	mov	r8, r0
 8006526:	b158      	cbz	r0, 8006540 <_dtoa_r+0xe0>
 8006528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800652a:	2301      	movs	r3, #1
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 856b 	beq.w	800700c <_dtoa_r+0xbac>
 8006536:	4883      	ldr	r0, [pc, #524]	; (8006744 <_dtoa_r+0x2e4>)
 8006538:	6018      	str	r0, [r3, #0]
 800653a:	1e43      	subs	r3, r0, #1
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	e7df      	b.n	8006500 <_dtoa_r+0xa0>
 8006540:	ec4b ab10 	vmov	d0, sl, fp
 8006544:	aa10      	add	r2, sp, #64	; 0x40
 8006546:	a911      	add	r1, sp, #68	; 0x44
 8006548:	4620      	mov	r0, r4
 800654a:	f001 ff1f 	bl	800838c <__d2b>
 800654e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006552:	ee08 0a10 	vmov	s16, r0
 8006556:	2d00      	cmp	r5, #0
 8006558:	f000 8084 	beq.w	8006664 <_dtoa_r+0x204>
 800655c:	ee19 3a90 	vmov	r3, s19
 8006560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006564:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006568:	4656      	mov	r6, sl
 800656a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800656e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006572:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006576:	4b74      	ldr	r3, [pc, #464]	; (8006748 <_dtoa_r+0x2e8>)
 8006578:	2200      	movs	r2, #0
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	f7f9 fe8b 	bl	8000298 <__aeabi_dsub>
 8006582:	a365      	add	r3, pc, #404	; (adr r3, 8006718 <_dtoa_r+0x2b8>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7fa f83e 	bl	8000608 <__aeabi_dmul>
 800658c:	a364      	add	r3, pc, #400	; (adr r3, 8006720 <_dtoa_r+0x2c0>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fe83 	bl	800029c <__adddf3>
 8006596:	4606      	mov	r6, r0
 8006598:	4628      	mov	r0, r5
 800659a:	460f      	mov	r7, r1
 800659c:	f7f9 ffca 	bl	8000534 <__aeabi_i2d>
 80065a0:	a361      	add	r3, pc, #388	; (adr r3, 8006728 <_dtoa_r+0x2c8>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7fa f82f 	bl	8000608 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 fe73 	bl	800029c <__adddf3>
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	f7fa fad5 	bl	8000b68 <__aeabi_d2iz>
 80065be:	2200      	movs	r2, #0
 80065c0:	9000      	str	r0, [sp, #0]
 80065c2:	2300      	movs	r3, #0
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7fa fa90 	bl	8000aec <__aeabi_dcmplt>
 80065cc:	b150      	cbz	r0, 80065e4 <_dtoa_r+0x184>
 80065ce:	9800      	ldr	r0, [sp, #0]
 80065d0:	f7f9 ffb0 	bl	8000534 <__aeabi_i2d>
 80065d4:	4632      	mov	r2, r6
 80065d6:	463b      	mov	r3, r7
 80065d8:	f7fa fa7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80065dc:	b910      	cbnz	r0, 80065e4 <_dtoa_r+0x184>
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	9b00      	ldr	r3, [sp, #0]
 80065e6:	2b16      	cmp	r3, #22
 80065e8:	d85a      	bhi.n	80066a0 <_dtoa_r+0x240>
 80065ea:	9a00      	ldr	r2, [sp, #0]
 80065ec:	4b57      	ldr	r3, [pc, #348]	; (800674c <_dtoa_r+0x2ec>)
 80065ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	ec51 0b19 	vmov	r0, r1, d9
 80065fa:	f7fa fa77 	bl	8000aec <__aeabi_dcmplt>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d050      	beq.n	80066a4 <_dtoa_r+0x244>
 8006602:	9b00      	ldr	r3, [sp, #0]
 8006604:	3b01      	subs	r3, #1
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	2300      	movs	r3, #0
 800660a:	930b      	str	r3, [sp, #44]	; 0x2c
 800660c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800660e:	1b5d      	subs	r5, r3, r5
 8006610:	1e6b      	subs	r3, r5, #1
 8006612:	9305      	str	r3, [sp, #20]
 8006614:	bf45      	ittet	mi
 8006616:	f1c5 0301 	rsbmi	r3, r5, #1
 800661a:	9304      	strmi	r3, [sp, #16]
 800661c:	2300      	movpl	r3, #0
 800661e:	2300      	movmi	r3, #0
 8006620:	bf4c      	ite	mi
 8006622:	9305      	strmi	r3, [sp, #20]
 8006624:	9304      	strpl	r3, [sp, #16]
 8006626:	9b00      	ldr	r3, [sp, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	db3d      	blt.n	80066a8 <_dtoa_r+0x248>
 800662c:	9b05      	ldr	r3, [sp, #20]
 800662e:	9a00      	ldr	r2, [sp, #0]
 8006630:	920a      	str	r2, [sp, #40]	; 0x28
 8006632:	4413      	add	r3, r2
 8006634:	9305      	str	r3, [sp, #20]
 8006636:	2300      	movs	r3, #0
 8006638:	9307      	str	r3, [sp, #28]
 800663a:	9b06      	ldr	r3, [sp, #24]
 800663c:	2b09      	cmp	r3, #9
 800663e:	f200 8089 	bhi.w	8006754 <_dtoa_r+0x2f4>
 8006642:	2b05      	cmp	r3, #5
 8006644:	bfc4      	itt	gt
 8006646:	3b04      	subgt	r3, #4
 8006648:	9306      	strgt	r3, [sp, #24]
 800664a:	9b06      	ldr	r3, [sp, #24]
 800664c:	f1a3 0302 	sub.w	r3, r3, #2
 8006650:	bfcc      	ite	gt
 8006652:	2500      	movgt	r5, #0
 8006654:	2501      	movle	r5, #1
 8006656:	2b03      	cmp	r3, #3
 8006658:	f200 8087 	bhi.w	800676a <_dtoa_r+0x30a>
 800665c:	e8df f003 	tbb	[pc, r3]
 8006660:	59383a2d 	.word	0x59383a2d
 8006664:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006668:	441d      	add	r5, r3
 800666a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800666e:	2b20      	cmp	r3, #32
 8006670:	bfc1      	itttt	gt
 8006672:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006676:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800667a:	fa0b f303 	lslgt.w	r3, fp, r3
 800667e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006682:	bfda      	itte	le
 8006684:	f1c3 0320 	rsble	r3, r3, #32
 8006688:	fa06 f003 	lslle.w	r0, r6, r3
 800668c:	4318      	orrgt	r0, r3
 800668e:	f7f9 ff41 	bl	8000514 <__aeabi_ui2d>
 8006692:	2301      	movs	r3, #1
 8006694:	4606      	mov	r6, r0
 8006696:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800669a:	3d01      	subs	r5, #1
 800669c:	930e      	str	r3, [sp, #56]	; 0x38
 800669e:	e76a      	b.n	8006576 <_dtoa_r+0x116>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e7b2      	b.n	800660a <_dtoa_r+0x1aa>
 80066a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80066a6:	e7b1      	b.n	800660c <_dtoa_r+0x1ac>
 80066a8:	9b04      	ldr	r3, [sp, #16]
 80066aa:	9a00      	ldr	r2, [sp, #0]
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	9304      	str	r3, [sp, #16]
 80066b0:	4253      	negs	r3, r2
 80066b2:	9307      	str	r3, [sp, #28]
 80066b4:	2300      	movs	r3, #0
 80066b6:	930a      	str	r3, [sp, #40]	; 0x28
 80066b8:	e7bf      	b.n	800663a <_dtoa_r+0x1da>
 80066ba:	2300      	movs	r3, #0
 80066bc:	9308      	str	r3, [sp, #32]
 80066be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	dc55      	bgt.n	8006770 <_dtoa_r+0x310>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066ca:	461a      	mov	r2, r3
 80066cc:	9209      	str	r2, [sp, #36]	; 0x24
 80066ce:	e00c      	b.n	80066ea <_dtoa_r+0x28a>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e7f3      	b.n	80066bc <_dtoa_r+0x25c>
 80066d4:	2300      	movs	r3, #0
 80066d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066d8:	9308      	str	r3, [sp, #32]
 80066da:	9b00      	ldr	r3, [sp, #0]
 80066dc:	4413      	add	r3, r2
 80066de:	9302      	str	r3, [sp, #8]
 80066e0:	3301      	adds	r3, #1
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	bfb8      	it	lt
 80066e8:	2301      	movlt	r3, #1
 80066ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066ec:	2200      	movs	r2, #0
 80066ee:	6042      	str	r2, [r0, #4]
 80066f0:	2204      	movs	r2, #4
 80066f2:	f102 0614 	add.w	r6, r2, #20
 80066f6:	429e      	cmp	r6, r3
 80066f8:	6841      	ldr	r1, [r0, #4]
 80066fa:	d93d      	bls.n	8006778 <_dtoa_r+0x318>
 80066fc:	4620      	mov	r0, r4
 80066fe:	f001 fa57 	bl	8007bb0 <_Balloc>
 8006702:	9001      	str	r0, [sp, #4]
 8006704:	2800      	cmp	r0, #0
 8006706:	d13b      	bne.n	8006780 <_dtoa_r+0x320>
 8006708:	4b11      	ldr	r3, [pc, #68]	; (8006750 <_dtoa_r+0x2f0>)
 800670a:	4602      	mov	r2, r0
 800670c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006710:	e6c0      	b.n	8006494 <_dtoa_r+0x34>
 8006712:	2301      	movs	r3, #1
 8006714:	e7df      	b.n	80066d6 <_dtoa_r+0x276>
 8006716:	bf00      	nop
 8006718:	636f4361 	.word	0x636f4361
 800671c:	3fd287a7 	.word	0x3fd287a7
 8006720:	8b60c8b3 	.word	0x8b60c8b3
 8006724:	3fc68a28 	.word	0x3fc68a28
 8006728:	509f79fb 	.word	0x509f79fb
 800672c:	3fd34413 	.word	0x3fd34413
 8006730:	08009326 	.word	0x08009326
 8006734:	0800933d 	.word	0x0800933d
 8006738:	7ff00000 	.word	0x7ff00000
 800673c:	08009322 	.word	0x08009322
 8006740:	08009319 	.word	0x08009319
 8006744:	0800919d 	.word	0x0800919d
 8006748:	3ff80000 	.word	0x3ff80000
 800674c:	08009510 	.word	0x08009510
 8006750:	08009398 	.word	0x08009398
 8006754:	2501      	movs	r5, #1
 8006756:	2300      	movs	r3, #0
 8006758:	9306      	str	r3, [sp, #24]
 800675a:	9508      	str	r5, [sp, #32]
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
 8006760:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	2312      	movs	r3, #18
 8006768:	e7b0      	b.n	80066cc <_dtoa_r+0x26c>
 800676a:	2301      	movs	r3, #1
 800676c:	9308      	str	r3, [sp, #32]
 800676e:	e7f5      	b.n	800675c <_dtoa_r+0x2fc>
 8006770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006772:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006776:	e7b8      	b.n	80066ea <_dtoa_r+0x28a>
 8006778:	3101      	adds	r1, #1
 800677a:	6041      	str	r1, [r0, #4]
 800677c:	0052      	lsls	r2, r2, #1
 800677e:	e7b8      	b.n	80066f2 <_dtoa_r+0x292>
 8006780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006782:	9a01      	ldr	r2, [sp, #4]
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	2b0e      	cmp	r3, #14
 800678a:	f200 809d 	bhi.w	80068c8 <_dtoa_r+0x468>
 800678e:	2d00      	cmp	r5, #0
 8006790:	f000 809a 	beq.w	80068c8 <_dtoa_r+0x468>
 8006794:	9b00      	ldr	r3, [sp, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	dd32      	ble.n	8006800 <_dtoa_r+0x3a0>
 800679a:	4ab7      	ldr	r2, [pc, #732]	; (8006a78 <_dtoa_r+0x618>)
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067a8:	9b00      	ldr	r3, [sp, #0]
 80067aa:	05d8      	lsls	r0, r3, #23
 80067ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067b0:	d516      	bpl.n	80067e0 <_dtoa_r+0x380>
 80067b2:	4bb2      	ldr	r3, [pc, #712]	; (8006a7c <_dtoa_r+0x61c>)
 80067b4:	ec51 0b19 	vmov	r0, r1, d9
 80067b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067bc:	f7fa f84e 	bl	800085c <__aeabi_ddiv>
 80067c0:	f007 070f 	and.w	r7, r7, #15
 80067c4:	4682      	mov	sl, r0
 80067c6:	468b      	mov	fp, r1
 80067c8:	2503      	movs	r5, #3
 80067ca:	4eac      	ldr	r6, [pc, #688]	; (8006a7c <_dtoa_r+0x61c>)
 80067cc:	b957      	cbnz	r7, 80067e4 <_dtoa_r+0x384>
 80067ce:	4642      	mov	r2, r8
 80067d0:	464b      	mov	r3, r9
 80067d2:	4650      	mov	r0, sl
 80067d4:	4659      	mov	r1, fp
 80067d6:	f7fa f841 	bl	800085c <__aeabi_ddiv>
 80067da:	4682      	mov	sl, r0
 80067dc:	468b      	mov	fp, r1
 80067de:	e028      	b.n	8006832 <_dtoa_r+0x3d2>
 80067e0:	2502      	movs	r5, #2
 80067e2:	e7f2      	b.n	80067ca <_dtoa_r+0x36a>
 80067e4:	07f9      	lsls	r1, r7, #31
 80067e6:	d508      	bpl.n	80067fa <_dtoa_r+0x39a>
 80067e8:	4640      	mov	r0, r8
 80067ea:	4649      	mov	r1, r9
 80067ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067f0:	f7f9 ff0a 	bl	8000608 <__aeabi_dmul>
 80067f4:	3501      	adds	r5, #1
 80067f6:	4680      	mov	r8, r0
 80067f8:	4689      	mov	r9, r1
 80067fa:	107f      	asrs	r7, r7, #1
 80067fc:	3608      	adds	r6, #8
 80067fe:	e7e5      	b.n	80067cc <_dtoa_r+0x36c>
 8006800:	f000 809b 	beq.w	800693a <_dtoa_r+0x4da>
 8006804:	9b00      	ldr	r3, [sp, #0]
 8006806:	4f9d      	ldr	r7, [pc, #628]	; (8006a7c <_dtoa_r+0x61c>)
 8006808:	425e      	negs	r6, r3
 800680a:	4b9b      	ldr	r3, [pc, #620]	; (8006a78 <_dtoa_r+0x618>)
 800680c:	f006 020f 	and.w	r2, r6, #15
 8006810:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	ec51 0b19 	vmov	r0, r1, d9
 800681c:	f7f9 fef4 	bl	8000608 <__aeabi_dmul>
 8006820:	1136      	asrs	r6, r6, #4
 8006822:	4682      	mov	sl, r0
 8006824:	468b      	mov	fp, r1
 8006826:	2300      	movs	r3, #0
 8006828:	2502      	movs	r5, #2
 800682a:	2e00      	cmp	r6, #0
 800682c:	d17a      	bne.n	8006924 <_dtoa_r+0x4c4>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1d3      	bne.n	80067da <_dtoa_r+0x37a>
 8006832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 8082 	beq.w	800693e <_dtoa_r+0x4de>
 800683a:	4b91      	ldr	r3, [pc, #580]	; (8006a80 <_dtoa_r+0x620>)
 800683c:	2200      	movs	r2, #0
 800683e:	4650      	mov	r0, sl
 8006840:	4659      	mov	r1, fp
 8006842:	f7fa f953 	bl	8000aec <__aeabi_dcmplt>
 8006846:	2800      	cmp	r0, #0
 8006848:	d079      	beq.n	800693e <_dtoa_r+0x4de>
 800684a:	9b03      	ldr	r3, [sp, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d076      	beq.n	800693e <_dtoa_r+0x4de>
 8006850:	9b02      	ldr	r3, [sp, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	dd36      	ble.n	80068c4 <_dtoa_r+0x464>
 8006856:	9b00      	ldr	r3, [sp, #0]
 8006858:	4650      	mov	r0, sl
 800685a:	4659      	mov	r1, fp
 800685c:	1e5f      	subs	r7, r3, #1
 800685e:	2200      	movs	r2, #0
 8006860:	4b88      	ldr	r3, [pc, #544]	; (8006a84 <_dtoa_r+0x624>)
 8006862:	f7f9 fed1 	bl	8000608 <__aeabi_dmul>
 8006866:	9e02      	ldr	r6, [sp, #8]
 8006868:	4682      	mov	sl, r0
 800686a:	468b      	mov	fp, r1
 800686c:	3501      	adds	r5, #1
 800686e:	4628      	mov	r0, r5
 8006870:	f7f9 fe60 	bl	8000534 <__aeabi_i2d>
 8006874:	4652      	mov	r2, sl
 8006876:	465b      	mov	r3, fp
 8006878:	f7f9 fec6 	bl	8000608 <__aeabi_dmul>
 800687c:	4b82      	ldr	r3, [pc, #520]	; (8006a88 <_dtoa_r+0x628>)
 800687e:	2200      	movs	r2, #0
 8006880:	f7f9 fd0c 	bl	800029c <__adddf3>
 8006884:	46d0      	mov	r8, sl
 8006886:	46d9      	mov	r9, fp
 8006888:	4682      	mov	sl, r0
 800688a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800688e:	2e00      	cmp	r6, #0
 8006890:	d158      	bne.n	8006944 <_dtoa_r+0x4e4>
 8006892:	4b7e      	ldr	r3, [pc, #504]	; (8006a8c <_dtoa_r+0x62c>)
 8006894:	2200      	movs	r2, #0
 8006896:	4640      	mov	r0, r8
 8006898:	4649      	mov	r1, r9
 800689a:	f7f9 fcfd 	bl	8000298 <__aeabi_dsub>
 800689e:	4652      	mov	r2, sl
 80068a0:	465b      	mov	r3, fp
 80068a2:	4680      	mov	r8, r0
 80068a4:	4689      	mov	r9, r1
 80068a6:	f7fa f93f 	bl	8000b28 <__aeabi_dcmpgt>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	f040 8295 	bne.w	8006dda <_dtoa_r+0x97a>
 80068b0:	4652      	mov	r2, sl
 80068b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068b6:	4640      	mov	r0, r8
 80068b8:	4649      	mov	r1, r9
 80068ba:	f7fa f917 	bl	8000aec <__aeabi_dcmplt>
 80068be:	2800      	cmp	r0, #0
 80068c0:	f040 8289 	bne.w	8006dd6 <_dtoa_r+0x976>
 80068c4:	ec5b ab19 	vmov	sl, fp, d9
 80068c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f2c0 8148 	blt.w	8006b60 <_dtoa_r+0x700>
 80068d0:	9a00      	ldr	r2, [sp, #0]
 80068d2:	2a0e      	cmp	r2, #14
 80068d4:	f300 8144 	bgt.w	8006b60 <_dtoa_r+0x700>
 80068d8:	4b67      	ldr	r3, [pc, #412]	; (8006a78 <_dtoa_r+0x618>)
 80068da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f280 80d5 	bge.w	8006a94 <_dtoa_r+0x634>
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f300 80d1 	bgt.w	8006a94 <_dtoa_r+0x634>
 80068f2:	f040 826f 	bne.w	8006dd4 <_dtoa_r+0x974>
 80068f6:	4b65      	ldr	r3, [pc, #404]	; (8006a8c <_dtoa_r+0x62c>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	f7f9 fe83 	bl	8000608 <__aeabi_dmul>
 8006902:	4652      	mov	r2, sl
 8006904:	465b      	mov	r3, fp
 8006906:	f7fa f905 	bl	8000b14 <__aeabi_dcmpge>
 800690a:	9e03      	ldr	r6, [sp, #12]
 800690c:	4637      	mov	r7, r6
 800690e:	2800      	cmp	r0, #0
 8006910:	f040 8245 	bne.w	8006d9e <_dtoa_r+0x93e>
 8006914:	9d01      	ldr	r5, [sp, #4]
 8006916:	2331      	movs	r3, #49	; 0x31
 8006918:	f805 3b01 	strb.w	r3, [r5], #1
 800691c:	9b00      	ldr	r3, [sp, #0]
 800691e:	3301      	adds	r3, #1
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	e240      	b.n	8006da6 <_dtoa_r+0x946>
 8006924:	07f2      	lsls	r2, r6, #31
 8006926:	d505      	bpl.n	8006934 <_dtoa_r+0x4d4>
 8006928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692c:	f7f9 fe6c 	bl	8000608 <__aeabi_dmul>
 8006930:	3501      	adds	r5, #1
 8006932:	2301      	movs	r3, #1
 8006934:	1076      	asrs	r6, r6, #1
 8006936:	3708      	adds	r7, #8
 8006938:	e777      	b.n	800682a <_dtoa_r+0x3ca>
 800693a:	2502      	movs	r5, #2
 800693c:	e779      	b.n	8006832 <_dtoa_r+0x3d2>
 800693e:	9f00      	ldr	r7, [sp, #0]
 8006940:	9e03      	ldr	r6, [sp, #12]
 8006942:	e794      	b.n	800686e <_dtoa_r+0x40e>
 8006944:	9901      	ldr	r1, [sp, #4]
 8006946:	4b4c      	ldr	r3, [pc, #304]	; (8006a78 <_dtoa_r+0x618>)
 8006948:	4431      	add	r1, r6
 800694a:	910d      	str	r1, [sp, #52]	; 0x34
 800694c:	9908      	ldr	r1, [sp, #32]
 800694e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006952:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006956:	2900      	cmp	r1, #0
 8006958:	d043      	beq.n	80069e2 <_dtoa_r+0x582>
 800695a:	494d      	ldr	r1, [pc, #308]	; (8006a90 <_dtoa_r+0x630>)
 800695c:	2000      	movs	r0, #0
 800695e:	f7f9 ff7d 	bl	800085c <__aeabi_ddiv>
 8006962:	4652      	mov	r2, sl
 8006964:	465b      	mov	r3, fp
 8006966:	f7f9 fc97 	bl	8000298 <__aeabi_dsub>
 800696a:	9d01      	ldr	r5, [sp, #4]
 800696c:	4682      	mov	sl, r0
 800696e:	468b      	mov	fp, r1
 8006970:	4649      	mov	r1, r9
 8006972:	4640      	mov	r0, r8
 8006974:	f7fa f8f8 	bl	8000b68 <__aeabi_d2iz>
 8006978:	4606      	mov	r6, r0
 800697a:	f7f9 fddb 	bl	8000534 <__aeabi_i2d>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4640      	mov	r0, r8
 8006984:	4649      	mov	r1, r9
 8006986:	f7f9 fc87 	bl	8000298 <__aeabi_dsub>
 800698a:	3630      	adds	r6, #48	; 0x30
 800698c:	f805 6b01 	strb.w	r6, [r5], #1
 8006990:	4652      	mov	r2, sl
 8006992:	465b      	mov	r3, fp
 8006994:	4680      	mov	r8, r0
 8006996:	4689      	mov	r9, r1
 8006998:	f7fa f8a8 	bl	8000aec <__aeabi_dcmplt>
 800699c:	2800      	cmp	r0, #0
 800699e:	d163      	bne.n	8006a68 <_dtoa_r+0x608>
 80069a0:	4642      	mov	r2, r8
 80069a2:	464b      	mov	r3, r9
 80069a4:	4936      	ldr	r1, [pc, #216]	; (8006a80 <_dtoa_r+0x620>)
 80069a6:	2000      	movs	r0, #0
 80069a8:	f7f9 fc76 	bl	8000298 <__aeabi_dsub>
 80069ac:	4652      	mov	r2, sl
 80069ae:	465b      	mov	r3, fp
 80069b0:	f7fa f89c 	bl	8000aec <__aeabi_dcmplt>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f040 80b5 	bne.w	8006b24 <_dtoa_r+0x6c4>
 80069ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069bc:	429d      	cmp	r5, r3
 80069be:	d081      	beq.n	80068c4 <_dtoa_r+0x464>
 80069c0:	4b30      	ldr	r3, [pc, #192]	; (8006a84 <_dtoa_r+0x624>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	4650      	mov	r0, sl
 80069c6:	4659      	mov	r1, fp
 80069c8:	f7f9 fe1e 	bl	8000608 <__aeabi_dmul>
 80069cc:	4b2d      	ldr	r3, [pc, #180]	; (8006a84 <_dtoa_r+0x624>)
 80069ce:	4682      	mov	sl, r0
 80069d0:	468b      	mov	fp, r1
 80069d2:	4640      	mov	r0, r8
 80069d4:	4649      	mov	r1, r9
 80069d6:	2200      	movs	r2, #0
 80069d8:	f7f9 fe16 	bl	8000608 <__aeabi_dmul>
 80069dc:	4680      	mov	r8, r0
 80069de:	4689      	mov	r9, r1
 80069e0:	e7c6      	b.n	8006970 <_dtoa_r+0x510>
 80069e2:	4650      	mov	r0, sl
 80069e4:	4659      	mov	r1, fp
 80069e6:	f7f9 fe0f 	bl	8000608 <__aeabi_dmul>
 80069ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ec:	9d01      	ldr	r5, [sp, #4]
 80069ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80069f0:	4682      	mov	sl, r0
 80069f2:	468b      	mov	fp, r1
 80069f4:	4649      	mov	r1, r9
 80069f6:	4640      	mov	r0, r8
 80069f8:	f7fa f8b6 	bl	8000b68 <__aeabi_d2iz>
 80069fc:	4606      	mov	r6, r0
 80069fe:	f7f9 fd99 	bl	8000534 <__aeabi_i2d>
 8006a02:	3630      	adds	r6, #48	; 0x30
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	f7f9 fc44 	bl	8000298 <__aeabi_dsub>
 8006a10:	f805 6b01 	strb.w	r6, [r5], #1
 8006a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a16:	429d      	cmp	r5, r3
 8006a18:	4680      	mov	r8, r0
 8006a1a:	4689      	mov	r9, r1
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	d124      	bne.n	8006a6c <_dtoa_r+0x60c>
 8006a22:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <_dtoa_r+0x630>)
 8006a24:	4650      	mov	r0, sl
 8006a26:	4659      	mov	r1, fp
 8006a28:	f7f9 fc38 	bl	800029c <__adddf3>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4640      	mov	r0, r8
 8006a32:	4649      	mov	r1, r9
 8006a34:	f7fa f878 	bl	8000b28 <__aeabi_dcmpgt>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d173      	bne.n	8006b24 <_dtoa_r+0x6c4>
 8006a3c:	4652      	mov	r2, sl
 8006a3e:	465b      	mov	r3, fp
 8006a40:	4913      	ldr	r1, [pc, #76]	; (8006a90 <_dtoa_r+0x630>)
 8006a42:	2000      	movs	r0, #0
 8006a44:	f7f9 fc28 	bl	8000298 <__aeabi_dsub>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	4649      	mov	r1, r9
 8006a50:	f7fa f84c 	bl	8000aec <__aeabi_dcmplt>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	f43f af35 	beq.w	80068c4 <_dtoa_r+0x464>
 8006a5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a5c:	1e6b      	subs	r3, r5, #1
 8006a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a64:	2b30      	cmp	r3, #48	; 0x30
 8006a66:	d0f8      	beq.n	8006a5a <_dtoa_r+0x5fa>
 8006a68:	9700      	str	r7, [sp, #0]
 8006a6a:	e049      	b.n	8006b00 <_dtoa_r+0x6a0>
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <_dtoa_r+0x624>)
 8006a6e:	f7f9 fdcb 	bl	8000608 <__aeabi_dmul>
 8006a72:	4680      	mov	r8, r0
 8006a74:	4689      	mov	r9, r1
 8006a76:	e7bd      	b.n	80069f4 <_dtoa_r+0x594>
 8006a78:	08009510 	.word	0x08009510
 8006a7c:	080094e8 	.word	0x080094e8
 8006a80:	3ff00000 	.word	0x3ff00000
 8006a84:	40240000 	.word	0x40240000
 8006a88:	401c0000 	.word	0x401c0000
 8006a8c:	40140000 	.word	0x40140000
 8006a90:	3fe00000 	.word	0x3fe00000
 8006a94:	9d01      	ldr	r5, [sp, #4]
 8006a96:	4656      	mov	r6, sl
 8006a98:	465f      	mov	r7, fp
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	f7f9 fedb 	bl	800085c <__aeabi_ddiv>
 8006aa6:	f7fa f85f 	bl	8000b68 <__aeabi_d2iz>
 8006aaa:	4682      	mov	sl, r0
 8006aac:	f7f9 fd42 	bl	8000534 <__aeabi_i2d>
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	f7f9 fda8 	bl	8000608 <__aeabi_dmul>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4630      	mov	r0, r6
 8006abe:	4639      	mov	r1, r7
 8006ac0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ac4:	f7f9 fbe8 	bl	8000298 <__aeabi_dsub>
 8006ac8:	f805 6b01 	strb.w	r6, [r5], #1
 8006acc:	9e01      	ldr	r6, [sp, #4]
 8006ace:	9f03      	ldr	r7, [sp, #12]
 8006ad0:	1bae      	subs	r6, r5, r6
 8006ad2:	42b7      	cmp	r7, r6
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	d135      	bne.n	8006b46 <_dtoa_r+0x6e6>
 8006ada:	f7f9 fbdf 	bl	800029c <__adddf3>
 8006ade:	4642      	mov	r2, r8
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	f7fa f81f 	bl	8000b28 <__aeabi_dcmpgt>
 8006aea:	b9d0      	cbnz	r0, 8006b22 <_dtoa_r+0x6c2>
 8006aec:	4642      	mov	r2, r8
 8006aee:	464b      	mov	r3, r9
 8006af0:	4630      	mov	r0, r6
 8006af2:	4639      	mov	r1, r7
 8006af4:	f7f9 fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af8:	b110      	cbz	r0, 8006b00 <_dtoa_r+0x6a0>
 8006afa:	f01a 0f01 	tst.w	sl, #1
 8006afe:	d110      	bne.n	8006b22 <_dtoa_r+0x6c2>
 8006b00:	4620      	mov	r0, r4
 8006b02:	ee18 1a10 	vmov	r1, s16
 8006b06:	f001 f893 	bl	8007c30 <_Bfree>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9800      	ldr	r0, [sp, #0]
 8006b0e:	702b      	strb	r3, [r5, #0]
 8006b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b12:	3001      	adds	r0, #1
 8006b14:	6018      	str	r0, [r3, #0]
 8006b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f43f acf1 	beq.w	8006500 <_dtoa_r+0xa0>
 8006b1e:	601d      	str	r5, [r3, #0]
 8006b20:	e4ee      	b.n	8006500 <_dtoa_r+0xa0>
 8006b22:	9f00      	ldr	r7, [sp, #0]
 8006b24:	462b      	mov	r3, r5
 8006b26:	461d      	mov	r5, r3
 8006b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b2c:	2a39      	cmp	r2, #57	; 0x39
 8006b2e:	d106      	bne.n	8006b3e <_dtoa_r+0x6de>
 8006b30:	9a01      	ldr	r2, [sp, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d1f7      	bne.n	8006b26 <_dtoa_r+0x6c6>
 8006b36:	9901      	ldr	r1, [sp, #4]
 8006b38:	2230      	movs	r2, #48	; 0x30
 8006b3a:	3701      	adds	r7, #1
 8006b3c:	700a      	strb	r2, [r1, #0]
 8006b3e:	781a      	ldrb	r2, [r3, #0]
 8006b40:	3201      	adds	r2, #1
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	e790      	b.n	8006a68 <_dtoa_r+0x608>
 8006b46:	4ba6      	ldr	r3, [pc, #664]	; (8006de0 <_dtoa_r+0x980>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f7f9 fd5d 	bl	8000608 <__aeabi_dmul>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2300      	movs	r3, #0
 8006b52:	4606      	mov	r6, r0
 8006b54:	460f      	mov	r7, r1
 8006b56:	f7f9 ffbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d09d      	beq.n	8006a9a <_dtoa_r+0x63a>
 8006b5e:	e7cf      	b.n	8006b00 <_dtoa_r+0x6a0>
 8006b60:	9a08      	ldr	r2, [sp, #32]
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	f000 80d7 	beq.w	8006d16 <_dtoa_r+0x8b6>
 8006b68:	9a06      	ldr	r2, [sp, #24]
 8006b6a:	2a01      	cmp	r2, #1
 8006b6c:	f300 80ba 	bgt.w	8006ce4 <_dtoa_r+0x884>
 8006b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	f000 80b2 	beq.w	8006cdc <_dtoa_r+0x87c>
 8006b78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b7c:	9e07      	ldr	r6, [sp, #28]
 8006b7e:	9d04      	ldr	r5, [sp, #16]
 8006b80:	9a04      	ldr	r2, [sp, #16]
 8006b82:	441a      	add	r2, r3
 8006b84:	9204      	str	r2, [sp, #16]
 8006b86:	9a05      	ldr	r2, [sp, #20]
 8006b88:	2101      	movs	r1, #1
 8006b8a:	441a      	add	r2, r3
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	9205      	str	r2, [sp, #20]
 8006b90:	f001 f950 	bl	8007e34 <__i2b>
 8006b94:	4607      	mov	r7, r0
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	dd0c      	ble.n	8006bb4 <_dtoa_r+0x754>
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dd09      	ble.n	8006bb4 <_dtoa_r+0x754>
 8006ba0:	42ab      	cmp	r3, r5
 8006ba2:	9a04      	ldr	r2, [sp, #16]
 8006ba4:	bfa8      	it	ge
 8006ba6:	462b      	movge	r3, r5
 8006ba8:	1ad2      	subs	r2, r2, r3
 8006baa:	9204      	str	r2, [sp, #16]
 8006bac:	9a05      	ldr	r2, [sp, #20]
 8006bae:	1aed      	subs	r5, r5, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	9305      	str	r3, [sp, #20]
 8006bb4:	9b07      	ldr	r3, [sp, #28]
 8006bb6:	b31b      	cbz	r3, 8006c00 <_dtoa_r+0x7a0>
 8006bb8:	9b08      	ldr	r3, [sp, #32]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80af 	beq.w	8006d1e <_dtoa_r+0x8be>
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	dd13      	ble.n	8006bec <_dtoa_r+0x78c>
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f001 f9f3 	bl	8007fb4 <__pow5mult>
 8006bce:	ee18 2a10 	vmov	r2, s16
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f001 f942 	bl	8007e60 <__multiply>
 8006bdc:	ee18 1a10 	vmov	r1, s16
 8006be0:	4680      	mov	r8, r0
 8006be2:	4620      	mov	r0, r4
 8006be4:	f001 f824 	bl	8007c30 <_Bfree>
 8006be8:	ee08 8a10 	vmov	s16, r8
 8006bec:	9b07      	ldr	r3, [sp, #28]
 8006bee:	1b9a      	subs	r2, r3, r6
 8006bf0:	d006      	beq.n	8006c00 <_dtoa_r+0x7a0>
 8006bf2:	ee18 1a10 	vmov	r1, s16
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f001 f9dc 	bl	8007fb4 <__pow5mult>
 8006bfc:	ee08 0a10 	vmov	s16, r0
 8006c00:	2101      	movs	r1, #1
 8006c02:	4620      	mov	r0, r4
 8006c04:	f001 f916 	bl	8007e34 <__i2b>
 8006c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	f340 8088 	ble.w	8006d22 <_dtoa_r+0x8c2>
 8006c12:	461a      	mov	r2, r3
 8006c14:	4601      	mov	r1, r0
 8006c16:	4620      	mov	r0, r4
 8006c18:	f001 f9cc 	bl	8007fb4 <__pow5mult>
 8006c1c:	9b06      	ldr	r3, [sp, #24]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	4606      	mov	r6, r0
 8006c22:	f340 8081 	ble.w	8006d28 <_dtoa_r+0x8c8>
 8006c26:	f04f 0800 	mov.w	r8, #0
 8006c2a:	6933      	ldr	r3, [r6, #16]
 8006c2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c30:	6918      	ldr	r0, [r3, #16]
 8006c32:	f001 f8af 	bl	8007d94 <__hi0bits>
 8006c36:	f1c0 0020 	rsb	r0, r0, #32
 8006c3a:	9b05      	ldr	r3, [sp, #20]
 8006c3c:	4418      	add	r0, r3
 8006c3e:	f010 001f 	ands.w	r0, r0, #31
 8006c42:	f000 8092 	beq.w	8006d6a <_dtoa_r+0x90a>
 8006c46:	f1c0 0320 	rsb	r3, r0, #32
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	f340 808a 	ble.w	8006d64 <_dtoa_r+0x904>
 8006c50:	f1c0 001c 	rsb	r0, r0, #28
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	4403      	add	r3, r0
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	9b05      	ldr	r3, [sp, #20]
 8006c5c:	4403      	add	r3, r0
 8006c5e:	4405      	add	r5, r0
 8006c60:	9305      	str	r3, [sp, #20]
 8006c62:	9b04      	ldr	r3, [sp, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dd07      	ble.n	8006c78 <_dtoa_r+0x818>
 8006c68:	ee18 1a10 	vmov	r1, s16
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f001 f9fa 	bl	8008068 <__lshift>
 8006c74:	ee08 0a10 	vmov	s16, r0
 8006c78:	9b05      	ldr	r3, [sp, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	dd05      	ble.n	8006c8a <_dtoa_r+0x82a>
 8006c7e:	4631      	mov	r1, r6
 8006c80:	461a      	mov	r2, r3
 8006c82:	4620      	mov	r0, r4
 8006c84:	f001 f9f0 	bl	8008068 <__lshift>
 8006c88:	4606      	mov	r6, r0
 8006c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d06e      	beq.n	8006d6e <_dtoa_r+0x90e>
 8006c90:	ee18 0a10 	vmov	r0, s16
 8006c94:	4631      	mov	r1, r6
 8006c96:	f001 fa57 	bl	8008148 <__mcmp>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	da67      	bge.n	8006d6e <_dtoa_r+0x90e>
 8006c9e:	9b00      	ldr	r3, [sp, #0]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	ee18 1a10 	vmov	r1, s16
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	220a      	movs	r2, #10
 8006caa:	2300      	movs	r3, #0
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 ffe1 	bl	8007c74 <__multadd>
 8006cb2:	9b08      	ldr	r3, [sp, #32]
 8006cb4:	ee08 0a10 	vmov	s16, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 81b1 	beq.w	8007020 <_dtoa_r+0xbc0>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	220a      	movs	r2, #10
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f000 ffd5 	bl	8007c74 <__multadd>
 8006cca:	9b02      	ldr	r3, [sp, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	4607      	mov	r7, r0
 8006cd0:	f300 808e 	bgt.w	8006df0 <_dtoa_r+0x990>
 8006cd4:	9b06      	ldr	r3, [sp, #24]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	dc51      	bgt.n	8006d7e <_dtoa_r+0x91e>
 8006cda:	e089      	b.n	8006df0 <_dtoa_r+0x990>
 8006cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ce2:	e74b      	b.n	8006b7c <_dtoa_r+0x71c>
 8006ce4:	9b03      	ldr	r3, [sp, #12]
 8006ce6:	1e5e      	subs	r6, r3, #1
 8006ce8:	9b07      	ldr	r3, [sp, #28]
 8006cea:	42b3      	cmp	r3, r6
 8006cec:	bfbf      	itttt	lt
 8006cee:	9b07      	ldrlt	r3, [sp, #28]
 8006cf0:	9607      	strlt	r6, [sp, #28]
 8006cf2:	1af2      	sublt	r2, r6, r3
 8006cf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cf6:	bfb6      	itet	lt
 8006cf8:	189b      	addlt	r3, r3, r2
 8006cfa:	1b9e      	subge	r6, r3, r6
 8006cfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	bfb8      	it	lt
 8006d02:	2600      	movlt	r6, #0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	bfb7      	itett	lt
 8006d08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d10:	1a9d      	sublt	r5, r3, r2
 8006d12:	2300      	movlt	r3, #0
 8006d14:	e734      	b.n	8006b80 <_dtoa_r+0x720>
 8006d16:	9e07      	ldr	r6, [sp, #28]
 8006d18:	9d04      	ldr	r5, [sp, #16]
 8006d1a:	9f08      	ldr	r7, [sp, #32]
 8006d1c:	e73b      	b.n	8006b96 <_dtoa_r+0x736>
 8006d1e:	9a07      	ldr	r2, [sp, #28]
 8006d20:	e767      	b.n	8006bf2 <_dtoa_r+0x792>
 8006d22:	9b06      	ldr	r3, [sp, #24]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	dc18      	bgt.n	8006d5a <_dtoa_r+0x8fa>
 8006d28:	f1ba 0f00 	cmp.w	sl, #0
 8006d2c:	d115      	bne.n	8006d5a <_dtoa_r+0x8fa>
 8006d2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d32:	b993      	cbnz	r3, 8006d5a <_dtoa_r+0x8fa>
 8006d34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d38:	0d1b      	lsrs	r3, r3, #20
 8006d3a:	051b      	lsls	r3, r3, #20
 8006d3c:	b183      	cbz	r3, 8006d60 <_dtoa_r+0x900>
 8006d3e:	9b04      	ldr	r3, [sp, #16]
 8006d40:	3301      	adds	r3, #1
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	9b05      	ldr	r3, [sp, #20]
 8006d46:	3301      	adds	r3, #1
 8006d48:	9305      	str	r3, [sp, #20]
 8006d4a:	f04f 0801 	mov.w	r8, #1
 8006d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f47f af6a 	bne.w	8006c2a <_dtoa_r+0x7ca>
 8006d56:	2001      	movs	r0, #1
 8006d58:	e76f      	b.n	8006c3a <_dtoa_r+0x7da>
 8006d5a:	f04f 0800 	mov.w	r8, #0
 8006d5e:	e7f6      	b.n	8006d4e <_dtoa_r+0x8ee>
 8006d60:	4698      	mov	r8, r3
 8006d62:	e7f4      	b.n	8006d4e <_dtoa_r+0x8ee>
 8006d64:	f43f af7d 	beq.w	8006c62 <_dtoa_r+0x802>
 8006d68:	4618      	mov	r0, r3
 8006d6a:	301c      	adds	r0, #28
 8006d6c:	e772      	b.n	8006c54 <_dtoa_r+0x7f4>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dc37      	bgt.n	8006de4 <_dtoa_r+0x984>
 8006d74:	9b06      	ldr	r3, [sp, #24]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	dd34      	ble.n	8006de4 <_dtoa_r+0x984>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	9302      	str	r3, [sp, #8]
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	b96b      	cbnz	r3, 8006d9e <_dtoa_r+0x93e>
 8006d82:	4631      	mov	r1, r6
 8006d84:	2205      	movs	r2, #5
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 ff74 	bl	8007c74 <__multadd>
 8006d8c:	4601      	mov	r1, r0
 8006d8e:	4606      	mov	r6, r0
 8006d90:	ee18 0a10 	vmov	r0, s16
 8006d94:	f001 f9d8 	bl	8008148 <__mcmp>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f73f adbb 	bgt.w	8006914 <_dtoa_r+0x4b4>
 8006d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da0:	9d01      	ldr	r5, [sp, #4]
 8006da2:	43db      	mvns	r3, r3
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	f04f 0800 	mov.w	r8, #0
 8006daa:	4631      	mov	r1, r6
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 ff3f 	bl	8007c30 <_Bfree>
 8006db2:	2f00      	cmp	r7, #0
 8006db4:	f43f aea4 	beq.w	8006b00 <_dtoa_r+0x6a0>
 8006db8:	f1b8 0f00 	cmp.w	r8, #0
 8006dbc:	d005      	beq.n	8006dca <_dtoa_r+0x96a>
 8006dbe:	45b8      	cmp	r8, r7
 8006dc0:	d003      	beq.n	8006dca <_dtoa_r+0x96a>
 8006dc2:	4641      	mov	r1, r8
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 ff33 	bl	8007c30 <_Bfree>
 8006dca:	4639      	mov	r1, r7
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 ff2f 	bl	8007c30 <_Bfree>
 8006dd2:	e695      	b.n	8006b00 <_dtoa_r+0x6a0>
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	4637      	mov	r7, r6
 8006dd8:	e7e1      	b.n	8006d9e <_dtoa_r+0x93e>
 8006dda:	9700      	str	r7, [sp, #0]
 8006ddc:	4637      	mov	r7, r6
 8006dde:	e599      	b.n	8006914 <_dtoa_r+0x4b4>
 8006de0:	40240000 	.word	0x40240000
 8006de4:	9b08      	ldr	r3, [sp, #32]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 80ca 	beq.w	8006f80 <_dtoa_r+0xb20>
 8006dec:	9b03      	ldr	r3, [sp, #12]
 8006dee:	9302      	str	r3, [sp, #8]
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	dd05      	ble.n	8006e00 <_dtoa_r+0x9a0>
 8006df4:	4639      	mov	r1, r7
 8006df6:	462a      	mov	r2, r5
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f001 f935 	bl	8008068 <__lshift>
 8006dfe:	4607      	mov	r7, r0
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	d05b      	beq.n	8006ebe <_dtoa_r+0xa5e>
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fed1 	bl	8007bb0 <_Balloc>
 8006e0e:	4605      	mov	r5, r0
 8006e10:	b928      	cbnz	r0, 8006e1e <_dtoa_r+0x9be>
 8006e12:	4b87      	ldr	r3, [pc, #540]	; (8007030 <_dtoa_r+0xbd0>)
 8006e14:	4602      	mov	r2, r0
 8006e16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e1a:	f7ff bb3b 	b.w	8006494 <_dtoa_r+0x34>
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	3202      	adds	r2, #2
 8006e22:	0092      	lsls	r2, r2, #2
 8006e24:	f107 010c 	add.w	r1, r7, #12
 8006e28:	300c      	adds	r0, #12
 8006e2a:	f000 feb3 	bl	8007b94 <memcpy>
 8006e2e:	2201      	movs	r2, #1
 8006e30:	4629      	mov	r1, r5
 8006e32:	4620      	mov	r0, r4
 8006e34:	f001 f918 	bl	8008068 <__lshift>
 8006e38:	9b01      	ldr	r3, [sp, #4]
 8006e3a:	f103 0901 	add.w	r9, r3, #1
 8006e3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e42:	4413      	add	r3, r2
 8006e44:	9305      	str	r3, [sp, #20]
 8006e46:	f00a 0301 	and.w	r3, sl, #1
 8006e4a:	46b8      	mov	r8, r7
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	4607      	mov	r7, r0
 8006e50:	4631      	mov	r1, r6
 8006e52:	ee18 0a10 	vmov	r0, s16
 8006e56:	f7ff fa77 	bl	8006348 <quorem>
 8006e5a:	4641      	mov	r1, r8
 8006e5c:	9002      	str	r0, [sp, #8]
 8006e5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e62:	ee18 0a10 	vmov	r0, s16
 8006e66:	f001 f96f 	bl	8008148 <__mcmp>
 8006e6a:	463a      	mov	r2, r7
 8006e6c:	9003      	str	r0, [sp, #12]
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4620      	mov	r0, r4
 8006e72:	f001 f985 	bl	8008180 <__mdiff>
 8006e76:	68c2      	ldr	r2, [r0, #12]
 8006e78:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	bb02      	cbnz	r2, 8006ec2 <_dtoa_r+0xa62>
 8006e80:	4601      	mov	r1, r0
 8006e82:	ee18 0a10 	vmov	r0, s16
 8006e86:	f001 f95f 	bl	8008148 <__mcmp>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	4620      	mov	r0, r4
 8006e90:	9207      	str	r2, [sp, #28]
 8006e92:	f000 fecd 	bl	8007c30 <_Bfree>
 8006e96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e9a:	ea43 0102 	orr.w	r1, r3, r2
 8006e9e:	9b04      	ldr	r3, [sp, #16]
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	464d      	mov	r5, r9
 8006ea4:	d10f      	bne.n	8006ec6 <_dtoa_r+0xa66>
 8006ea6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006eaa:	d02a      	beq.n	8006f02 <_dtoa_r+0xaa2>
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	dd02      	ble.n	8006eb8 <_dtoa_r+0xa58>
 8006eb2:	9b02      	ldr	r3, [sp, #8]
 8006eb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006eb8:	f88b a000 	strb.w	sl, [fp]
 8006ebc:	e775      	b.n	8006daa <_dtoa_r+0x94a>
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	e7ba      	b.n	8006e38 <_dtoa_r+0x9d8>
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	e7e2      	b.n	8006e8c <_dtoa_r+0xa2c>
 8006ec6:	9b03      	ldr	r3, [sp, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	db04      	blt.n	8006ed6 <_dtoa_r+0xa76>
 8006ecc:	9906      	ldr	r1, [sp, #24]
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	9904      	ldr	r1, [sp, #16]
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	d122      	bne.n	8006f1c <_dtoa_r+0xabc>
 8006ed6:	2a00      	cmp	r2, #0
 8006ed8:	ddee      	ble.n	8006eb8 <_dtoa_r+0xa58>
 8006eda:	ee18 1a10 	vmov	r1, s16
 8006ede:	2201      	movs	r2, #1
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f001 f8c1 	bl	8008068 <__lshift>
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	ee08 0a10 	vmov	s16, r0
 8006eec:	f001 f92c 	bl	8008148 <__mcmp>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	dc03      	bgt.n	8006efc <_dtoa_r+0xa9c>
 8006ef4:	d1e0      	bne.n	8006eb8 <_dtoa_r+0xa58>
 8006ef6:	f01a 0f01 	tst.w	sl, #1
 8006efa:	d0dd      	beq.n	8006eb8 <_dtoa_r+0xa58>
 8006efc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f00:	d1d7      	bne.n	8006eb2 <_dtoa_r+0xa52>
 8006f02:	2339      	movs	r3, #57	; 0x39
 8006f04:	f88b 3000 	strb.w	r3, [fp]
 8006f08:	462b      	mov	r3, r5
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f12:	2a39      	cmp	r2, #57	; 0x39
 8006f14:	d071      	beq.n	8006ffa <_dtoa_r+0xb9a>
 8006f16:	3201      	adds	r2, #1
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	e746      	b.n	8006daa <_dtoa_r+0x94a>
 8006f1c:	2a00      	cmp	r2, #0
 8006f1e:	dd07      	ble.n	8006f30 <_dtoa_r+0xad0>
 8006f20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f24:	d0ed      	beq.n	8006f02 <_dtoa_r+0xaa2>
 8006f26:	f10a 0301 	add.w	r3, sl, #1
 8006f2a:	f88b 3000 	strb.w	r3, [fp]
 8006f2e:	e73c      	b.n	8006daa <_dtoa_r+0x94a>
 8006f30:	9b05      	ldr	r3, [sp, #20]
 8006f32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f36:	4599      	cmp	r9, r3
 8006f38:	d047      	beq.n	8006fca <_dtoa_r+0xb6a>
 8006f3a:	ee18 1a10 	vmov	r1, s16
 8006f3e:	2300      	movs	r3, #0
 8006f40:	220a      	movs	r2, #10
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 fe96 	bl	8007c74 <__multadd>
 8006f48:	45b8      	cmp	r8, r7
 8006f4a:	ee08 0a10 	vmov	s16, r0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	f04f 020a 	mov.w	r2, #10
 8006f56:	4641      	mov	r1, r8
 8006f58:	4620      	mov	r0, r4
 8006f5a:	d106      	bne.n	8006f6a <_dtoa_r+0xb0a>
 8006f5c:	f000 fe8a 	bl	8007c74 <__multadd>
 8006f60:	4680      	mov	r8, r0
 8006f62:	4607      	mov	r7, r0
 8006f64:	f109 0901 	add.w	r9, r9, #1
 8006f68:	e772      	b.n	8006e50 <_dtoa_r+0x9f0>
 8006f6a:	f000 fe83 	bl	8007c74 <__multadd>
 8006f6e:	4639      	mov	r1, r7
 8006f70:	4680      	mov	r8, r0
 8006f72:	2300      	movs	r3, #0
 8006f74:	220a      	movs	r2, #10
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 fe7c 	bl	8007c74 <__multadd>
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	e7f1      	b.n	8006f64 <_dtoa_r+0xb04>
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	9d01      	ldr	r5, [sp, #4]
 8006f86:	ee18 0a10 	vmov	r0, s16
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	f7ff f9dc 	bl	8006348 <quorem>
 8006f90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f94:	9b01      	ldr	r3, [sp, #4]
 8006f96:	f805 ab01 	strb.w	sl, [r5], #1
 8006f9a:	1aea      	subs	r2, r5, r3
 8006f9c:	9b02      	ldr	r3, [sp, #8]
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	dd09      	ble.n	8006fb6 <_dtoa_r+0xb56>
 8006fa2:	ee18 1a10 	vmov	r1, s16
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	220a      	movs	r2, #10
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 fe62 	bl	8007c74 <__multadd>
 8006fb0:	ee08 0a10 	vmov	s16, r0
 8006fb4:	e7e7      	b.n	8006f86 <_dtoa_r+0xb26>
 8006fb6:	9b02      	ldr	r3, [sp, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bfc8      	it	gt
 8006fbc:	461d      	movgt	r5, r3
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	bfd8      	it	le
 8006fc2:	2501      	movle	r5, #1
 8006fc4:	441d      	add	r5, r3
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	ee18 1a10 	vmov	r1, s16
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f001 f849 	bl	8008068 <__lshift>
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	ee08 0a10 	vmov	s16, r0
 8006fdc:	f001 f8b4 	bl	8008148 <__mcmp>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	dc91      	bgt.n	8006f08 <_dtoa_r+0xaa8>
 8006fe4:	d102      	bne.n	8006fec <_dtoa_r+0xb8c>
 8006fe6:	f01a 0f01 	tst.w	sl, #1
 8006fea:	d18d      	bne.n	8006f08 <_dtoa_r+0xaa8>
 8006fec:	462b      	mov	r3, r5
 8006fee:	461d      	mov	r5, r3
 8006ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ff4:	2a30      	cmp	r2, #48	; 0x30
 8006ff6:	d0fa      	beq.n	8006fee <_dtoa_r+0xb8e>
 8006ff8:	e6d7      	b.n	8006daa <_dtoa_r+0x94a>
 8006ffa:	9a01      	ldr	r2, [sp, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d184      	bne.n	8006f0a <_dtoa_r+0xaaa>
 8007000:	9b00      	ldr	r3, [sp, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	2331      	movs	r3, #49	; 0x31
 8007008:	7013      	strb	r3, [r2, #0]
 800700a:	e6ce      	b.n	8006daa <_dtoa_r+0x94a>
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <_dtoa_r+0xbd4>)
 800700e:	f7ff ba95 	b.w	800653c <_dtoa_r+0xdc>
 8007012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007014:	2b00      	cmp	r3, #0
 8007016:	f47f aa6e 	bne.w	80064f6 <_dtoa_r+0x96>
 800701a:	4b07      	ldr	r3, [pc, #28]	; (8007038 <_dtoa_r+0xbd8>)
 800701c:	f7ff ba8e 	b.w	800653c <_dtoa_r+0xdc>
 8007020:	9b02      	ldr	r3, [sp, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	dcae      	bgt.n	8006f84 <_dtoa_r+0xb24>
 8007026:	9b06      	ldr	r3, [sp, #24]
 8007028:	2b02      	cmp	r3, #2
 800702a:	f73f aea8 	bgt.w	8006d7e <_dtoa_r+0x91e>
 800702e:	e7a9      	b.n	8006f84 <_dtoa_r+0xb24>
 8007030:	08009398 	.word	0x08009398
 8007034:	0800919c 	.word	0x0800919c
 8007038:	08009319 	.word	0x08009319

0800703c <__sflush_r>:
 800703c:	898a      	ldrh	r2, [r1, #12]
 800703e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007042:	4605      	mov	r5, r0
 8007044:	0710      	lsls	r0, r2, #28
 8007046:	460c      	mov	r4, r1
 8007048:	d458      	bmi.n	80070fc <__sflush_r+0xc0>
 800704a:	684b      	ldr	r3, [r1, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	dc05      	bgt.n	800705c <__sflush_r+0x20>
 8007050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	dc02      	bgt.n	800705c <__sflush_r+0x20>
 8007056:	2000      	movs	r0, #0
 8007058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800705c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800705e:	2e00      	cmp	r6, #0
 8007060:	d0f9      	beq.n	8007056 <__sflush_r+0x1a>
 8007062:	2300      	movs	r3, #0
 8007064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007068:	682f      	ldr	r7, [r5, #0]
 800706a:	602b      	str	r3, [r5, #0]
 800706c:	d032      	beq.n	80070d4 <__sflush_r+0x98>
 800706e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	075a      	lsls	r2, r3, #29
 8007074:	d505      	bpl.n	8007082 <__sflush_r+0x46>
 8007076:	6863      	ldr	r3, [r4, #4]
 8007078:	1ac0      	subs	r0, r0, r3
 800707a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800707c:	b10b      	cbz	r3, 8007082 <__sflush_r+0x46>
 800707e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007080:	1ac0      	subs	r0, r0, r3
 8007082:	2300      	movs	r3, #0
 8007084:	4602      	mov	r2, r0
 8007086:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007088:	6a21      	ldr	r1, [r4, #32]
 800708a:	4628      	mov	r0, r5
 800708c:	47b0      	blx	r6
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	d106      	bne.n	80070a2 <__sflush_r+0x66>
 8007094:	6829      	ldr	r1, [r5, #0]
 8007096:	291d      	cmp	r1, #29
 8007098:	d82c      	bhi.n	80070f4 <__sflush_r+0xb8>
 800709a:	4a2a      	ldr	r2, [pc, #168]	; (8007144 <__sflush_r+0x108>)
 800709c:	40ca      	lsrs	r2, r1
 800709e:	07d6      	lsls	r6, r2, #31
 80070a0:	d528      	bpl.n	80070f4 <__sflush_r+0xb8>
 80070a2:	2200      	movs	r2, #0
 80070a4:	6062      	str	r2, [r4, #4]
 80070a6:	04d9      	lsls	r1, r3, #19
 80070a8:	6922      	ldr	r2, [r4, #16]
 80070aa:	6022      	str	r2, [r4, #0]
 80070ac:	d504      	bpl.n	80070b8 <__sflush_r+0x7c>
 80070ae:	1c42      	adds	r2, r0, #1
 80070b0:	d101      	bne.n	80070b6 <__sflush_r+0x7a>
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	b903      	cbnz	r3, 80070b8 <__sflush_r+0x7c>
 80070b6:	6560      	str	r0, [r4, #84]	; 0x54
 80070b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ba:	602f      	str	r7, [r5, #0]
 80070bc:	2900      	cmp	r1, #0
 80070be:	d0ca      	beq.n	8007056 <__sflush_r+0x1a>
 80070c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070c4:	4299      	cmp	r1, r3
 80070c6:	d002      	beq.n	80070ce <__sflush_r+0x92>
 80070c8:	4628      	mov	r0, r5
 80070ca:	f001 fa49 	bl	8008560 <_free_r>
 80070ce:	2000      	movs	r0, #0
 80070d0:	6360      	str	r0, [r4, #52]	; 0x34
 80070d2:	e7c1      	b.n	8007058 <__sflush_r+0x1c>
 80070d4:	6a21      	ldr	r1, [r4, #32]
 80070d6:	2301      	movs	r3, #1
 80070d8:	4628      	mov	r0, r5
 80070da:	47b0      	blx	r6
 80070dc:	1c41      	adds	r1, r0, #1
 80070de:	d1c7      	bne.n	8007070 <__sflush_r+0x34>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0c4      	beq.n	8007070 <__sflush_r+0x34>
 80070e6:	2b1d      	cmp	r3, #29
 80070e8:	d001      	beq.n	80070ee <__sflush_r+0xb2>
 80070ea:	2b16      	cmp	r3, #22
 80070ec:	d101      	bne.n	80070f2 <__sflush_r+0xb6>
 80070ee:	602f      	str	r7, [r5, #0]
 80070f0:	e7b1      	b.n	8007056 <__sflush_r+0x1a>
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	e7ad      	b.n	8007058 <__sflush_r+0x1c>
 80070fc:	690f      	ldr	r7, [r1, #16]
 80070fe:	2f00      	cmp	r7, #0
 8007100:	d0a9      	beq.n	8007056 <__sflush_r+0x1a>
 8007102:	0793      	lsls	r3, r2, #30
 8007104:	680e      	ldr	r6, [r1, #0]
 8007106:	bf08      	it	eq
 8007108:	694b      	ldreq	r3, [r1, #20]
 800710a:	600f      	str	r7, [r1, #0]
 800710c:	bf18      	it	ne
 800710e:	2300      	movne	r3, #0
 8007110:	eba6 0807 	sub.w	r8, r6, r7
 8007114:	608b      	str	r3, [r1, #8]
 8007116:	f1b8 0f00 	cmp.w	r8, #0
 800711a:	dd9c      	ble.n	8007056 <__sflush_r+0x1a>
 800711c:	6a21      	ldr	r1, [r4, #32]
 800711e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007120:	4643      	mov	r3, r8
 8007122:	463a      	mov	r2, r7
 8007124:	4628      	mov	r0, r5
 8007126:	47b0      	blx	r6
 8007128:	2800      	cmp	r0, #0
 800712a:	dc06      	bgt.n	800713a <__sflush_r+0xfe>
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	e78e      	b.n	8007058 <__sflush_r+0x1c>
 800713a:	4407      	add	r7, r0
 800713c:	eba8 0800 	sub.w	r8, r8, r0
 8007140:	e7e9      	b.n	8007116 <__sflush_r+0xda>
 8007142:	bf00      	nop
 8007144:	20400001 	.word	0x20400001

08007148 <_fflush_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	690b      	ldr	r3, [r1, #16]
 800714c:	4605      	mov	r5, r0
 800714e:	460c      	mov	r4, r1
 8007150:	b913      	cbnz	r3, 8007158 <_fflush_r+0x10>
 8007152:	2500      	movs	r5, #0
 8007154:	4628      	mov	r0, r5
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	b118      	cbz	r0, 8007162 <_fflush_r+0x1a>
 800715a:	6983      	ldr	r3, [r0, #24]
 800715c:	b90b      	cbnz	r3, 8007162 <_fflush_r+0x1a>
 800715e:	f000 f887 	bl	8007270 <__sinit>
 8007162:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <_fflush_r+0x6c>)
 8007164:	429c      	cmp	r4, r3
 8007166:	d11b      	bne.n	80071a0 <_fflush_r+0x58>
 8007168:	686c      	ldr	r4, [r5, #4]
 800716a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0ef      	beq.n	8007152 <_fflush_r+0xa>
 8007172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007174:	07d0      	lsls	r0, r2, #31
 8007176:	d404      	bmi.n	8007182 <_fflush_r+0x3a>
 8007178:	0599      	lsls	r1, r3, #22
 800717a:	d402      	bmi.n	8007182 <_fflush_r+0x3a>
 800717c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800717e:	f000 fc88 	bl	8007a92 <__retarget_lock_acquire_recursive>
 8007182:	4628      	mov	r0, r5
 8007184:	4621      	mov	r1, r4
 8007186:	f7ff ff59 	bl	800703c <__sflush_r>
 800718a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800718c:	07da      	lsls	r2, r3, #31
 800718e:	4605      	mov	r5, r0
 8007190:	d4e0      	bmi.n	8007154 <_fflush_r+0xc>
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	059b      	lsls	r3, r3, #22
 8007196:	d4dd      	bmi.n	8007154 <_fflush_r+0xc>
 8007198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800719a:	f000 fc7b 	bl	8007a94 <__retarget_lock_release_recursive>
 800719e:	e7d9      	b.n	8007154 <_fflush_r+0xc>
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <_fflush_r+0x70>)
 80071a2:	429c      	cmp	r4, r3
 80071a4:	d101      	bne.n	80071aa <_fflush_r+0x62>
 80071a6:	68ac      	ldr	r4, [r5, #8]
 80071a8:	e7df      	b.n	800716a <_fflush_r+0x22>
 80071aa:	4b04      	ldr	r3, [pc, #16]	; (80071bc <_fflush_r+0x74>)
 80071ac:	429c      	cmp	r4, r3
 80071ae:	bf08      	it	eq
 80071b0:	68ec      	ldreq	r4, [r5, #12]
 80071b2:	e7da      	b.n	800716a <_fflush_r+0x22>
 80071b4:	080093cc 	.word	0x080093cc
 80071b8:	080093ec 	.word	0x080093ec
 80071bc:	080093ac 	.word	0x080093ac

080071c0 <std>:
 80071c0:	2300      	movs	r3, #0
 80071c2:	b510      	push	{r4, lr}
 80071c4:	4604      	mov	r4, r0
 80071c6:	e9c0 3300 	strd	r3, r3, [r0]
 80071ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ce:	6083      	str	r3, [r0, #8]
 80071d0:	8181      	strh	r1, [r0, #12]
 80071d2:	6643      	str	r3, [r0, #100]	; 0x64
 80071d4:	81c2      	strh	r2, [r0, #14]
 80071d6:	6183      	str	r3, [r0, #24]
 80071d8:	4619      	mov	r1, r3
 80071da:	2208      	movs	r2, #8
 80071dc:	305c      	adds	r0, #92	; 0x5c
 80071de:	f7fd f9fb 	bl	80045d8 <memset>
 80071e2:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <std+0x38>)
 80071e4:	6263      	str	r3, [r4, #36]	; 0x24
 80071e6:	4b05      	ldr	r3, [pc, #20]	; (80071fc <std+0x3c>)
 80071e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80071ea:	4b05      	ldr	r3, [pc, #20]	; (8007200 <std+0x40>)
 80071ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ee:	4b05      	ldr	r3, [pc, #20]	; (8007204 <std+0x44>)
 80071f0:	6224      	str	r4, [r4, #32]
 80071f2:	6323      	str	r3, [r4, #48]	; 0x30
 80071f4:	bd10      	pop	{r4, pc}
 80071f6:	bf00      	nop
 80071f8:	08008d51 	.word	0x08008d51
 80071fc:	08008d73 	.word	0x08008d73
 8007200:	08008dab 	.word	0x08008dab
 8007204:	08008dcf 	.word	0x08008dcf

08007208 <_cleanup_r>:
 8007208:	4901      	ldr	r1, [pc, #4]	; (8007210 <_cleanup_r+0x8>)
 800720a:	f000 b8af 	b.w	800736c <_fwalk_reent>
 800720e:	bf00      	nop
 8007210:	08007149 	.word	0x08007149

08007214 <__sfmoreglue>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	2268      	movs	r2, #104	; 0x68
 8007218:	1e4d      	subs	r5, r1, #1
 800721a:	4355      	muls	r5, r2
 800721c:	460e      	mov	r6, r1
 800721e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007222:	f001 fa09 	bl	8008638 <_malloc_r>
 8007226:	4604      	mov	r4, r0
 8007228:	b140      	cbz	r0, 800723c <__sfmoreglue+0x28>
 800722a:	2100      	movs	r1, #0
 800722c:	e9c0 1600 	strd	r1, r6, [r0]
 8007230:	300c      	adds	r0, #12
 8007232:	60a0      	str	r0, [r4, #8]
 8007234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007238:	f7fd f9ce 	bl	80045d8 <memset>
 800723c:	4620      	mov	r0, r4
 800723e:	bd70      	pop	{r4, r5, r6, pc}

08007240 <__sfp_lock_acquire>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__sfp_lock_acquire+0x8>)
 8007242:	f000 bc26 	b.w	8007a92 <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	2000037d 	.word	0x2000037d

0800724c <__sfp_lock_release>:
 800724c:	4801      	ldr	r0, [pc, #4]	; (8007254 <__sfp_lock_release+0x8>)
 800724e:	f000 bc21 	b.w	8007a94 <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	2000037d 	.word	0x2000037d

08007258 <__sinit_lock_acquire>:
 8007258:	4801      	ldr	r0, [pc, #4]	; (8007260 <__sinit_lock_acquire+0x8>)
 800725a:	f000 bc1a 	b.w	8007a92 <__retarget_lock_acquire_recursive>
 800725e:	bf00      	nop
 8007260:	2000037e 	.word	0x2000037e

08007264 <__sinit_lock_release>:
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <__sinit_lock_release+0x8>)
 8007266:	f000 bc15 	b.w	8007a94 <__retarget_lock_release_recursive>
 800726a:	bf00      	nop
 800726c:	2000037e 	.word	0x2000037e

08007270 <__sinit>:
 8007270:	b510      	push	{r4, lr}
 8007272:	4604      	mov	r4, r0
 8007274:	f7ff fff0 	bl	8007258 <__sinit_lock_acquire>
 8007278:	69a3      	ldr	r3, [r4, #24]
 800727a:	b11b      	cbz	r3, 8007284 <__sinit+0x14>
 800727c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007280:	f7ff bff0 	b.w	8007264 <__sinit_lock_release>
 8007284:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007288:	6523      	str	r3, [r4, #80]	; 0x50
 800728a:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <__sinit+0x68>)
 800728c:	4a13      	ldr	r2, [pc, #76]	; (80072dc <__sinit+0x6c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	62a2      	str	r2, [r4, #40]	; 0x28
 8007292:	42a3      	cmp	r3, r4
 8007294:	bf04      	itt	eq
 8007296:	2301      	moveq	r3, #1
 8007298:	61a3      	streq	r3, [r4, #24]
 800729a:	4620      	mov	r0, r4
 800729c:	f000 f820 	bl	80072e0 <__sfp>
 80072a0:	6060      	str	r0, [r4, #4]
 80072a2:	4620      	mov	r0, r4
 80072a4:	f000 f81c 	bl	80072e0 <__sfp>
 80072a8:	60a0      	str	r0, [r4, #8]
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 f818 	bl	80072e0 <__sfp>
 80072b0:	2200      	movs	r2, #0
 80072b2:	60e0      	str	r0, [r4, #12]
 80072b4:	2104      	movs	r1, #4
 80072b6:	6860      	ldr	r0, [r4, #4]
 80072b8:	f7ff ff82 	bl	80071c0 <std>
 80072bc:	68a0      	ldr	r0, [r4, #8]
 80072be:	2201      	movs	r2, #1
 80072c0:	2109      	movs	r1, #9
 80072c2:	f7ff ff7d 	bl	80071c0 <std>
 80072c6:	68e0      	ldr	r0, [r4, #12]
 80072c8:	2202      	movs	r2, #2
 80072ca:	2112      	movs	r1, #18
 80072cc:	f7ff ff78 	bl	80071c0 <std>
 80072d0:	2301      	movs	r3, #1
 80072d2:	61a3      	str	r3, [r4, #24]
 80072d4:	e7d2      	b.n	800727c <__sinit+0xc>
 80072d6:	bf00      	nop
 80072d8:	08009188 	.word	0x08009188
 80072dc:	08007209 	.word	0x08007209

080072e0 <__sfp>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	4607      	mov	r7, r0
 80072e4:	f7ff ffac 	bl	8007240 <__sfp_lock_acquire>
 80072e8:	4b1e      	ldr	r3, [pc, #120]	; (8007364 <__sfp+0x84>)
 80072ea:	681e      	ldr	r6, [r3, #0]
 80072ec:	69b3      	ldr	r3, [r6, #24]
 80072ee:	b913      	cbnz	r3, 80072f6 <__sfp+0x16>
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7ff ffbd 	bl	8007270 <__sinit>
 80072f6:	3648      	adds	r6, #72	; 0x48
 80072f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	d503      	bpl.n	8007308 <__sfp+0x28>
 8007300:	6833      	ldr	r3, [r6, #0]
 8007302:	b30b      	cbz	r3, 8007348 <__sfp+0x68>
 8007304:	6836      	ldr	r6, [r6, #0]
 8007306:	e7f7      	b.n	80072f8 <__sfp+0x18>
 8007308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800730c:	b9d5      	cbnz	r5, 8007344 <__sfp+0x64>
 800730e:	4b16      	ldr	r3, [pc, #88]	; (8007368 <__sfp+0x88>)
 8007310:	60e3      	str	r3, [r4, #12]
 8007312:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007316:	6665      	str	r5, [r4, #100]	; 0x64
 8007318:	f000 fbba 	bl	8007a90 <__retarget_lock_init_recursive>
 800731c:	f7ff ff96 	bl	800724c <__sfp_lock_release>
 8007320:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007324:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007328:	6025      	str	r5, [r4, #0]
 800732a:	61a5      	str	r5, [r4, #24]
 800732c:	2208      	movs	r2, #8
 800732e:	4629      	mov	r1, r5
 8007330:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007334:	f7fd f950 	bl	80045d8 <memset>
 8007338:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800733c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007340:	4620      	mov	r0, r4
 8007342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007344:	3468      	adds	r4, #104	; 0x68
 8007346:	e7d9      	b.n	80072fc <__sfp+0x1c>
 8007348:	2104      	movs	r1, #4
 800734a:	4638      	mov	r0, r7
 800734c:	f7ff ff62 	bl	8007214 <__sfmoreglue>
 8007350:	4604      	mov	r4, r0
 8007352:	6030      	str	r0, [r6, #0]
 8007354:	2800      	cmp	r0, #0
 8007356:	d1d5      	bne.n	8007304 <__sfp+0x24>
 8007358:	f7ff ff78 	bl	800724c <__sfp_lock_release>
 800735c:	230c      	movs	r3, #12
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	e7ee      	b.n	8007340 <__sfp+0x60>
 8007362:	bf00      	nop
 8007364:	08009188 	.word	0x08009188
 8007368:	ffff0001 	.word	0xffff0001

0800736c <_fwalk_reent>:
 800736c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007370:	4606      	mov	r6, r0
 8007372:	4688      	mov	r8, r1
 8007374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007378:	2700      	movs	r7, #0
 800737a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800737e:	f1b9 0901 	subs.w	r9, r9, #1
 8007382:	d505      	bpl.n	8007390 <_fwalk_reent+0x24>
 8007384:	6824      	ldr	r4, [r4, #0]
 8007386:	2c00      	cmp	r4, #0
 8007388:	d1f7      	bne.n	800737a <_fwalk_reent+0xe>
 800738a:	4638      	mov	r0, r7
 800738c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007390:	89ab      	ldrh	r3, [r5, #12]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d907      	bls.n	80073a6 <_fwalk_reent+0x3a>
 8007396:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800739a:	3301      	adds	r3, #1
 800739c:	d003      	beq.n	80073a6 <_fwalk_reent+0x3a>
 800739e:	4629      	mov	r1, r5
 80073a0:	4630      	mov	r0, r6
 80073a2:	47c0      	blx	r8
 80073a4:	4307      	orrs	r7, r0
 80073a6:	3568      	adds	r5, #104	; 0x68
 80073a8:	e7e9      	b.n	800737e <_fwalk_reent+0x12>

080073aa <rshift>:
 80073aa:	6903      	ldr	r3, [r0, #16]
 80073ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80073b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80073b8:	f100 0414 	add.w	r4, r0, #20
 80073bc:	dd45      	ble.n	800744a <rshift+0xa0>
 80073be:	f011 011f 	ands.w	r1, r1, #31
 80073c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80073c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80073ca:	d10c      	bne.n	80073e6 <rshift+0x3c>
 80073cc:	f100 0710 	add.w	r7, r0, #16
 80073d0:	4629      	mov	r1, r5
 80073d2:	42b1      	cmp	r1, r6
 80073d4:	d334      	bcc.n	8007440 <rshift+0x96>
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	1eea      	subs	r2, r5, #3
 80073dc:	4296      	cmp	r6, r2
 80073de:	bf38      	it	cc
 80073e0:	2300      	movcc	r3, #0
 80073e2:	4423      	add	r3, r4
 80073e4:	e015      	b.n	8007412 <rshift+0x68>
 80073e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80073ea:	f1c1 0820 	rsb	r8, r1, #32
 80073ee:	40cf      	lsrs	r7, r1
 80073f0:	f105 0e04 	add.w	lr, r5, #4
 80073f4:	46a1      	mov	r9, r4
 80073f6:	4576      	cmp	r6, lr
 80073f8:	46f4      	mov	ip, lr
 80073fa:	d815      	bhi.n	8007428 <rshift+0x7e>
 80073fc:	1a9a      	subs	r2, r3, r2
 80073fe:	0092      	lsls	r2, r2, #2
 8007400:	3a04      	subs	r2, #4
 8007402:	3501      	adds	r5, #1
 8007404:	42ae      	cmp	r6, r5
 8007406:	bf38      	it	cc
 8007408:	2200      	movcc	r2, #0
 800740a:	18a3      	adds	r3, r4, r2
 800740c:	50a7      	str	r7, [r4, r2]
 800740e:	b107      	cbz	r7, 8007412 <rshift+0x68>
 8007410:	3304      	adds	r3, #4
 8007412:	1b1a      	subs	r2, r3, r4
 8007414:	42a3      	cmp	r3, r4
 8007416:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800741a:	bf08      	it	eq
 800741c:	2300      	moveq	r3, #0
 800741e:	6102      	str	r2, [r0, #16]
 8007420:	bf08      	it	eq
 8007422:	6143      	streq	r3, [r0, #20]
 8007424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007428:	f8dc c000 	ldr.w	ip, [ip]
 800742c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007430:	ea4c 0707 	orr.w	r7, ip, r7
 8007434:	f849 7b04 	str.w	r7, [r9], #4
 8007438:	f85e 7b04 	ldr.w	r7, [lr], #4
 800743c:	40cf      	lsrs	r7, r1
 800743e:	e7da      	b.n	80073f6 <rshift+0x4c>
 8007440:	f851 cb04 	ldr.w	ip, [r1], #4
 8007444:	f847 cf04 	str.w	ip, [r7, #4]!
 8007448:	e7c3      	b.n	80073d2 <rshift+0x28>
 800744a:	4623      	mov	r3, r4
 800744c:	e7e1      	b.n	8007412 <rshift+0x68>

0800744e <__hexdig_fun>:
 800744e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007452:	2b09      	cmp	r3, #9
 8007454:	d802      	bhi.n	800745c <__hexdig_fun+0xe>
 8007456:	3820      	subs	r0, #32
 8007458:	b2c0      	uxtb	r0, r0
 800745a:	4770      	bx	lr
 800745c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007460:	2b05      	cmp	r3, #5
 8007462:	d801      	bhi.n	8007468 <__hexdig_fun+0x1a>
 8007464:	3847      	subs	r0, #71	; 0x47
 8007466:	e7f7      	b.n	8007458 <__hexdig_fun+0xa>
 8007468:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800746c:	2b05      	cmp	r3, #5
 800746e:	d801      	bhi.n	8007474 <__hexdig_fun+0x26>
 8007470:	3827      	subs	r0, #39	; 0x27
 8007472:	e7f1      	b.n	8007458 <__hexdig_fun+0xa>
 8007474:	2000      	movs	r0, #0
 8007476:	4770      	bx	lr

08007478 <__gethex>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	ed2d 8b02 	vpush	{d8}
 8007480:	b089      	sub	sp, #36	; 0x24
 8007482:	ee08 0a10 	vmov	s16, r0
 8007486:	9304      	str	r3, [sp, #16]
 8007488:	4bb4      	ldr	r3, [pc, #720]	; (800775c <__gethex+0x2e4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	4618      	mov	r0, r3
 8007490:	468b      	mov	fp, r1
 8007492:	4690      	mov	r8, r2
 8007494:	f7f8 fea4 	bl	80001e0 <strlen>
 8007498:	9b01      	ldr	r3, [sp, #4]
 800749a:	f8db 2000 	ldr.w	r2, [fp]
 800749e:	4403      	add	r3, r0
 80074a0:	4682      	mov	sl, r0
 80074a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80074a6:	9305      	str	r3, [sp, #20]
 80074a8:	1c93      	adds	r3, r2, #2
 80074aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80074ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80074b2:	32fe      	adds	r2, #254	; 0xfe
 80074b4:	18d1      	adds	r1, r2, r3
 80074b6:	461f      	mov	r7, r3
 80074b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80074bc:	9100      	str	r1, [sp, #0]
 80074be:	2830      	cmp	r0, #48	; 0x30
 80074c0:	d0f8      	beq.n	80074b4 <__gethex+0x3c>
 80074c2:	f7ff ffc4 	bl	800744e <__hexdig_fun>
 80074c6:	4604      	mov	r4, r0
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d13a      	bne.n	8007542 <__gethex+0xca>
 80074cc:	9901      	ldr	r1, [sp, #4]
 80074ce:	4652      	mov	r2, sl
 80074d0:	4638      	mov	r0, r7
 80074d2:	f001 fc80 	bl	8008dd6 <strncmp>
 80074d6:	4605      	mov	r5, r0
 80074d8:	2800      	cmp	r0, #0
 80074da:	d168      	bne.n	80075ae <__gethex+0x136>
 80074dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80074e0:	eb07 060a 	add.w	r6, r7, sl
 80074e4:	f7ff ffb3 	bl	800744e <__hexdig_fun>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d062      	beq.n	80075b2 <__gethex+0x13a>
 80074ec:	4633      	mov	r3, r6
 80074ee:	7818      	ldrb	r0, [r3, #0]
 80074f0:	2830      	cmp	r0, #48	; 0x30
 80074f2:	461f      	mov	r7, r3
 80074f4:	f103 0301 	add.w	r3, r3, #1
 80074f8:	d0f9      	beq.n	80074ee <__gethex+0x76>
 80074fa:	f7ff ffa8 	bl	800744e <__hexdig_fun>
 80074fe:	2301      	movs	r3, #1
 8007500:	fab0 f480 	clz	r4, r0
 8007504:	0964      	lsrs	r4, r4, #5
 8007506:	4635      	mov	r5, r6
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	463a      	mov	r2, r7
 800750c:	4616      	mov	r6, r2
 800750e:	3201      	adds	r2, #1
 8007510:	7830      	ldrb	r0, [r6, #0]
 8007512:	f7ff ff9c 	bl	800744e <__hexdig_fun>
 8007516:	2800      	cmp	r0, #0
 8007518:	d1f8      	bne.n	800750c <__gethex+0x94>
 800751a:	9901      	ldr	r1, [sp, #4]
 800751c:	4652      	mov	r2, sl
 800751e:	4630      	mov	r0, r6
 8007520:	f001 fc59 	bl	8008dd6 <strncmp>
 8007524:	b980      	cbnz	r0, 8007548 <__gethex+0xd0>
 8007526:	b94d      	cbnz	r5, 800753c <__gethex+0xc4>
 8007528:	eb06 050a 	add.w	r5, r6, sl
 800752c:	462a      	mov	r2, r5
 800752e:	4616      	mov	r6, r2
 8007530:	3201      	adds	r2, #1
 8007532:	7830      	ldrb	r0, [r6, #0]
 8007534:	f7ff ff8b 	bl	800744e <__hexdig_fun>
 8007538:	2800      	cmp	r0, #0
 800753a:	d1f8      	bne.n	800752e <__gethex+0xb6>
 800753c:	1bad      	subs	r5, r5, r6
 800753e:	00ad      	lsls	r5, r5, #2
 8007540:	e004      	b.n	800754c <__gethex+0xd4>
 8007542:	2400      	movs	r4, #0
 8007544:	4625      	mov	r5, r4
 8007546:	e7e0      	b.n	800750a <__gethex+0x92>
 8007548:	2d00      	cmp	r5, #0
 800754a:	d1f7      	bne.n	800753c <__gethex+0xc4>
 800754c:	7833      	ldrb	r3, [r6, #0]
 800754e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007552:	2b50      	cmp	r3, #80	; 0x50
 8007554:	d13b      	bne.n	80075ce <__gethex+0x156>
 8007556:	7873      	ldrb	r3, [r6, #1]
 8007558:	2b2b      	cmp	r3, #43	; 0x2b
 800755a:	d02c      	beq.n	80075b6 <__gethex+0x13e>
 800755c:	2b2d      	cmp	r3, #45	; 0x2d
 800755e:	d02e      	beq.n	80075be <__gethex+0x146>
 8007560:	1c71      	adds	r1, r6, #1
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	7808      	ldrb	r0, [r1, #0]
 8007568:	f7ff ff71 	bl	800744e <__hexdig_fun>
 800756c:	1e43      	subs	r3, r0, #1
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b18      	cmp	r3, #24
 8007572:	d82c      	bhi.n	80075ce <__gethex+0x156>
 8007574:	f1a0 0210 	sub.w	r2, r0, #16
 8007578:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800757c:	f7ff ff67 	bl	800744e <__hexdig_fun>
 8007580:	1e43      	subs	r3, r0, #1
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b18      	cmp	r3, #24
 8007586:	d91d      	bls.n	80075c4 <__gethex+0x14c>
 8007588:	f1b9 0f00 	cmp.w	r9, #0
 800758c:	d000      	beq.n	8007590 <__gethex+0x118>
 800758e:	4252      	negs	r2, r2
 8007590:	4415      	add	r5, r2
 8007592:	f8cb 1000 	str.w	r1, [fp]
 8007596:	b1e4      	cbz	r4, 80075d2 <__gethex+0x15a>
 8007598:	9b00      	ldr	r3, [sp, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	bf14      	ite	ne
 800759e:	2700      	movne	r7, #0
 80075a0:	2706      	moveq	r7, #6
 80075a2:	4638      	mov	r0, r7
 80075a4:	b009      	add	sp, #36	; 0x24
 80075a6:	ecbd 8b02 	vpop	{d8}
 80075aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ae:	463e      	mov	r6, r7
 80075b0:	4625      	mov	r5, r4
 80075b2:	2401      	movs	r4, #1
 80075b4:	e7ca      	b.n	800754c <__gethex+0xd4>
 80075b6:	f04f 0900 	mov.w	r9, #0
 80075ba:	1cb1      	adds	r1, r6, #2
 80075bc:	e7d3      	b.n	8007566 <__gethex+0xee>
 80075be:	f04f 0901 	mov.w	r9, #1
 80075c2:	e7fa      	b.n	80075ba <__gethex+0x142>
 80075c4:	230a      	movs	r3, #10
 80075c6:	fb03 0202 	mla	r2, r3, r2, r0
 80075ca:	3a10      	subs	r2, #16
 80075cc:	e7d4      	b.n	8007578 <__gethex+0x100>
 80075ce:	4631      	mov	r1, r6
 80075d0:	e7df      	b.n	8007592 <__gethex+0x11a>
 80075d2:	1bf3      	subs	r3, r6, r7
 80075d4:	3b01      	subs	r3, #1
 80075d6:	4621      	mov	r1, r4
 80075d8:	2b07      	cmp	r3, #7
 80075da:	dc0b      	bgt.n	80075f4 <__gethex+0x17c>
 80075dc:	ee18 0a10 	vmov	r0, s16
 80075e0:	f000 fae6 	bl	8007bb0 <_Balloc>
 80075e4:	4604      	mov	r4, r0
 80075e6:	b940      	cbnz	r0, 80075fa <__gethex+0x182>
 80075e8:	4b5d      	ldr	r3, [pc, #372]	; (8007760 <__gethex+0x2e8>)
 80075ea:	4602      	mov	r2, r0
 80075ec:	21de      	movs	r1, #222	; 0xde
 80075ee:	485d      	ldr	r0, [pc, #372]	; (8007764 <__gethex+0x2ec>)
 80075f0:	f001 fc24 	bl	8008e3c <__assert_func>
 80075f4:	3101      	adds	r1, #1
 80075f6:	105b      	asrs	r3, r3, #1
 80075f8:	e7ee      	b.n	80075d8 <__gethex+0x160>
 80075fa:	f100 0914 	add.w	r9, r0, #20
 80075fe:	f04f 0b00 	mov.w	fp, #0
 8007602:	f1ca 0301 	rsb	r3, sl, #1
 8007606:	f8cd 9008 	str.w	r9, [sp, #8]
 800760a:	f8cd b000 	str.w	fp, [sp]
 800760e:	9306      	str	r3, [sp, #24]
 8007610:	42b7      	cmp	r7, r6
 8007612:	d340      	bcc.n	8007696 <__gethex+0x21e>
 8007614:	9802      	ldr	r0, [sp, #8]
 8007616:	9b00      	ldr	r3, [sp, #0]
 8007618:	f840 3b04 	str.w	r3, [r0], #4
 800761c:	eba0 0009 	sub.w	r0, r0, r9
 8007620:	1080      	asrs	r0, r0, #2
 8007622:	0146      	lsls	r6, r0, #5
 8007624:	6120      	str	r0, [r4, #16]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fbb4 	bl	8007d94 <__hi0bits>
 800762c:	1a30      	subs	r0, r6, r0
 800762e:	f8d8 6000 	ldr.w	r6, [r8]
 8007632:	42b0      	cmp	r0, r6
 8007634:	dd63      	ble.n	80076fe <__gethex+0x286>
 8007636:	1b87      	subs	r7, r0, r6
 8007638:	4639      	mov	r1, r7
 800763a:	4620      	mov	r0, r4
 800763c:	f000 ff58 	bl	80084f0 <__any_on>
 8007640:	4682      	mov	sl, r0
 8007642:	b1a8      	cbz	r0, 8007670 <__gethex+0x1f8>
 8007644:	1e7b      	subs	r3, r7, #1
 8007646:	1159      	asrs	r1, r3, #5
 8007648:	f003 021f 	and.w	r2, r3, #31
 800764c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007650:	f04f 0a01 	mov.w	sl, #1
 8007654:	fa0a f202 	lsl.w	r2, sl, r2
 8007658:	420a      	tst	r2, r1
 800765a:	d009      	beq.n	8007670 <__gethex+0x1f8>
 800765c:	4553      	cmp	r3, sl
 800765e:	dd05      	ble.n	800766c <__gethex+0x1f4>
 8007660:	1eb9      	subs	r1, r7, #2
 8007662:	4620      	mov	r0, r4
 8007664:	f000 ff44 	bl	80084f0 <__any_on>
 8007668:	2800      	cmp	r0, #0
 800766a:	d145      	bne.n	80076f8 <__gethex+0x280>
 800766c:	f04f 0a02 	mov.w	sl, #2
 8007670:	4639      	mov	r1, r7
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff fe99 	bl	80073aa <rshift>
 8007678:	443d      	add	r5, r7
 800767a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800767e:	42ab      	cmp	r3, r5
 8007680:	da4c      	bge.n	800771c <__gethex+0x2a4>
 8007682:	ee18 0a10 	vmov	r0, s16
 8007686:	4621      	mov	r1, r4
 8007688:	f000 fad2 	bl	8007c30 <_Bfree>
 800768c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800768e:	2300      	movs	r3, #0
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	27a3      	movs	r7, #163	; 0xa3
 8007694:	e785      	b.n	80075a2 <__gethex+0x12a>
 8007696:	1e73      	subs	r3, r6, #1
 8007698:	9a05      	ldr	r2, [sp, #20]
 800769a:	9303      	str	r3, [sp, #12]
 800769c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d019      	beq.n	80076d8 <__gethex+0x260>
 80076a4:	f1bb 0f20 	cmp.w	fp, #32
 80076a8:	d107      	bne.n	80076ba <__gethex+0x242>
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	9a00      	ldr	r2, [sp, #0]
 80076ae:	f843 2b04 	str.w	r2, [r3], #4
 80076b2:	9302      	str	r3, [sp, #8]
 80076b4:	2300      	movs	r3, #0
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	469b      	mov	fp, r3
 80076ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80076be:	f7ff fec6 	bl	800744e <__hexdig_fun>
 80076c2:	9b00      	ldr	r3, [sp, #0]
 80076c4:	f000 000f 	and.w	r0, r0, #15
 80076c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80076cc:	4303      	orrs	r3, r0
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	f10b 0b04 	add.w	fp, fp, #4
 80076d4:	9b03      	ldr	r3, [sp, #12]
 80076d6:	e00d      	b.n	80076f4 <__gethex+0x27c>
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	9a06      	ldr	r2, [sp, #24]
 80076dc:	4413      	add	r3, r2
 80076de:	42bb      	cmp	r3, r7
 80076e0:	d3e0      	bcc.n	80076a4 <__gethex+0x22c>
 80076e2:	4618      	mov	r0, r3
 80076e4:	9901      	ldr	r1, [sp, #4]
 80076e6:	9307      	str	r3, [sp, #28]
 80076e8:	4652      	mov	r2, sl
 80076ea:	f001 fb74 	bl	8008dd6 <strncmp>
 80076ee:	9b07      	ldr	r3, [sp, #28]
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d1d7      	bne.n	80076a4 <__gethex+0x22c>
 80076f4:	461e      	mov	r6, r3
 80076f6:	e78b      	b.n	8007610 <__gethex+0x198>
 80076f8:	f04f 0a03 	mov.w	sl, #3
 80076fc:	e7b8      	b.n	8007670 <__gethex+0x1f8>
 80076fe:	da0a      	bge.n	8007716 <__gethex+0x29e>
 8007700:	1a37      	subs	r7, r6, r0
 8007702:	4621      	mov	r1, r4
 8007704:	ee18 0a10 	vmov	r0, s16
 8007708:	463a      	mov	r2, r7
 800770a:	f000 fcad 	bl	8008068 <__lshift>
 800770e:	1bed      	subs	r5, r5, r7
 8007710:	4604      	mov	r4, r0
 8007712:	f100 0914 	add.w	r9, r0, #20
 8007716:	f04f 0a00 	mov.w	sl, #0
 800771a:	e7ae      	b.n	800767a <__gethex+0x202>
 800771c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007720:	42a8      	cmp	r0, r5
 8007722:	dd72      	ble.n	800780a <__gethex+0x392>
 8007724:	1b45      	subs	r5, r0, r5
 8007726:	42ae      	cmp	r6, r5
 8007728:	dc36      	bgt.n	8007798 <__gethex+0x320>
 800772a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d02a      	beq.n	8007788 <__gethex+0x310>
 8007732:	2b03      	cmp	r3, #3
 8007734:	d02c      	beq.n	8007790 <__gethex+0x318>
 8007736:	2b01      	cmp	r3, #1
 8007738:	d11c      	bne.n	8007774 <__gethex+0x2fc>
 800773a:	42ae      	cmp	r6, r5
 800773c:	d11a      	bne.n	8007774 <__gethex+0x2fc>
 800773e:	2e01      	cmp	r6, #1
 8007740:	d112      	bne.n	8007768 <__gethex+0x2f0>
 8007742:	9a04      	ldr	r2, [sp, #16]
 8007744:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	2301      	movs	r3, #1
 800774c:	6123      	str	r3, [r4, #16]
 800774e:	f8c9 3000 	str.w	r3, [r9]
 8007752:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007754:	2762      	movs	r7, #98	; 0x62
 8007756:	601c      	str	r4, [r3, #0]
 8007758:	e723      	b.n	80075a2 <__gethex+0x12a>
 800775a:	bf00      	nop
 800775c:	08009474 	.word	0x08009474
 8007760:	08009398 	.word	0x08009398
 8007764:	0800940c 	.word	0x0800940c
 8007768:	1e71      	subs	r1, r6, #1
 800776a:	4620      	mov	r0, r4
 800776c:	f000 fec0 	bl	80084f0 <__any_on>
 8007770:	2800      	cmp	r0, #0
 8007772:	d1e6      	bne.n	8007742 <__gethex+0x2ca>
 8007774:	ee18 0a10 	vmov	r0, s16
 8007778:	4621      	mov	r1, r4
 800777a:	f000 fa59 	bl	8007c30 <_Bfree>
 800777e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007780:	2300      	movs	r3, #0
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	2750      	movs	r7, #80	; 0x50
 8007786:	e70c      	b.n	80075a2 <__gethex+0x12a>
 8007788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1f2      	bne.n	8007774 <__gethex+0x2fc>
 800778e:	e7d8      	b.n	8007742 <__gethex+0x2ca>
 8007790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1d5      	bne.n	8007742 <__gethex+0x2ca>
 8007796:	e7ed      	b.n	8007774 <__gethex+0x2fc>
 8007798:	1e6f      	subs	r7, r5, #1
 800779a:	f1ba 0f00 	cmp.w	sl, #0
 800779e:	d131      	bne.n	8007804 <__gethex+0x38c>
 80077a0:	b127      	cbz	r7, 80077ac <__gethex+0x334>
 80077a2:	4639      	mov	r1, r7
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fea3 	bl	80084f0 <__any_on>
 80077aa:	4682      	mov	sl, r0
 80077ac:	117b      	asrs	r3, r7, #5
 80077ae:	2101      	movs	r1, #1
 80077b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80077b4:	f007 071f 	and.w	r7, r7, #31
 80077b8:	fa01 f707 	lsl.w	r7, r1, r7
 80077bc:	421f      	tst	r7, r3
 80077be:	4629      	mov	r1, r5
 80077c0:	4620      	mov	r0, r4
 80077c2:	bf18      	it	ne
 80077c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80077c8:	1b76      	subs	r6, r6, r5
 80077ca:	f7ff fdee 	bl	80073aa <rshift>
 80077ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80077d2:	2702      	movs	r7, #2
 80077d4:	f1ba 0f00 	cmp.w	sl, #0
 80077d8:	d048      	beq.n	800786c <__gethex+0x3f4>
 80077da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d015      	beq.n	800780e <__gethex+0x396>
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d017      	beq.n	8007816 <__gethex+0x39e>
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d109      	bne.n	80077fe <__gethex+0x386>
 80077ea:	f01a 0f02 	tst.w	sl, #2
 80077ee:	d006      	beq.n	80077fe <__gethex+0x386>
 80077f0:	f8d9 0000 	ldr.w	r0, [r9]
 80077f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80077f8:	f01a 0f01 	tst.w	sl, #1
 80077fc:	d10e      	bne.n	800781c <__gethex+0x3a4>
 80077fe:	f047 0710 	orr.w	r7, r7, #16
 8007802:	e033      	b.n	800786c <__gethex+0x3f4>
 8007804:	f04f 0a01 	mov.w	sl, #1
 8007808:	e7d0      	b.n	80077ac <__gethex+0x334>
 800780a:	2701      	movs	r7, #1
 800780c:	e7e2      	b.n	80077d4 <__gethex+0x35c>
 800780e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007810:	f1c3 0301 	rsb	r3, r3, #1
 8007814:	9315      	str	r3, [sp, #84]	; 0x54
 8007816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0f0      	beq.n	80077fe <__gethex+0x386>
 800781c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007820:	f104 0314 	add.w	r3, r4, #20
 8007824:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007828:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800782c:	f04f 0c00 	mov.w	ip, #0
 8007830:	4618      	mov	r0, r3
 8007832:	f853 2b04 	ldr.w	r2, [r3], #4
 8007836:	f1b2 3fff 	cmp.w	r2, #4294967295
 800783a:	d01c      	beq.n	8007876 <__gethex+0x3fe>
 800783c:	3201      	adds	r2, #1
 800783e:	6002      	str	r2, [r0, #0]
 8007840:	2f02      	cmp	r7, #2
 8007842:	f104 0314 	add.w	r3, r4, #20
 8007846:	d13f      	bne.n	80078c8 <__gethex+0x450>
 8007848:	f8d8 2000 	ldr.w	r2, [r8]
 800784c:	3a01      	subs	r2, #1
 800784e:	42b2      	cmp	r2, r6
 8007850:	d10a      	bne.n	8007868 <__gethex+0x3f0>
 8007852:	1171      	asrs	r1, r6, #5
 8007854:	2201      	movs	r2, #1
 8007856:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800785a:	f006 061f 	and.w	r6, r6, #31
 800785e:	fa02 f606 	lsl.w	r6, r2, r6
 8007862:	421e      	tst	r6, r3
 8007864:	bf18      	it	ne
 8007866:	4617      	movne	r7, r2
 8007868:	f047 0720 	orr.w	r7, r7, #32
 800786c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800786e:	601c      	str	r4, [r3, #0]
 8007870:	9b04      	ldr	r3, [sp, #16]
 8007872:	601d      	str	r5, [r3, #0]
 8007874:	e695      	b.n	80075a2 <__gethex+0x12a>
 8007876:	4299      	cmp	r1, r3
 8007878:	f843 cc04 	str.w	ip, [r3, #-4]
 800787c:	d8d8      	bhi.n	8007830 <__gethex+0x3b8>
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	459b      	cmp	fp, r3
 8007882:	db19      	blt.n	80078b8 <__gethex+0x440>
 8007884:	6861      	ldr	r1, [r4, #4]
 8007886:	ee18 0a10 	vmov	r0, s16
 800788a:	3101      	adds	r1, #1
 800788c:	f000 f990 	bl	8007bb0 <_Balloc>
 8007890:	4681      	mov	r9, r0
 8007892:	b918      	cbnz	r0, 800789c <__gethex+0x424>
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <__gethex+0x488>)
 8007896:	4602      	mov	r2, r0
 8007898:	2184      	movs	r1, #132	; 0x84
 800789a:	e6a8      	b.n	80075ee <__gethex+0x176>
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	3202      	adds	r2, #2
 80078a0:	f104 010c 	add.w	r1, r4, #12
 80078a4:	0092      	lsls	r2, r2, #2
 80078a6:	300c      	adds	r0, #12
 80078a8:	f000 f974 	bl	8007b94 <memcpy>
 80078ac:	4621      	mov	r1, r4
 80078ae:	ee18 0a10 	vmov	r0, s16
 80078b2:	f000 f9bd 	bl	8007c30 <_Bfree>
 80078b6:	464c      	mov	r4, r9
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078c0:	6122      	str	r2, [r4, #16]
 80078c2:	2201      	movs	r2, #1
 80078c4:	615a      	str	r2, [r3, #20]
 80078c6:	e7bb      	b.n	8007840 <__gethex+0x3c8>
 80078c8:	6922      	ldr	r2, [r4, #16]
 80078ca:	455a      	cmp	r2, fp
 80078cc:	dd0b      	ble.n	80078e6 <__gethex+0x46e>
 80078ce:	2101      	movs	r1, #1
 80078d0:	4620      	mov	r0, r4
 80078d2:	f7ff fd6a 	bl	80073aa <rshift>
 80078d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078da:	3501      	adds	r5, #1
 80078dc:	42ab      	cmp	r3, r5
 80078de:	f6ff aed0 	blt.w	8007682 <__gethex+0x20a>
 80078e2:	2701      	movs	r7, #1
 80078e4:	e7c0      	b.n	8007868 <__gethex+0x3f0>
 80078e6:	f016 061f 	ands.w	r6, r6, #31
 80078ea:	d0fa      	beq.n	80078e2 <__gethex+0x46a>
 80078ec:	4453      	add	r3, sl
 80078ee:	f1c6 0620 	rsb	r6, r6, #32
 80078f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80078f6:	f000 fa4d 	bl	8007d94 <__hi0bits>
 80078fa:	42b0      	cmp	r0, r6
 80078fc:	dbe7      	blt.n	80078ce <__gethex+0x456>
 80078fe:	e7f0      	b.n	80078e2 <__gethex+0x46a>
 8007900:	08009398 	.word	0x08009398

08007904 <L_shift>:
 8007904:	f1c2 0208 	rsb	r2, r2, #8
 8007908:	0092      	lsls	r2, r2, #2
 800790a:	b570      	push	{r4, r5, r6, lr}
 800790c:	f1c2 0620 	rsb	r6, r2, #32
 8007910:	6843      	ldr	r3, [r0, #4]
 8007912:	6804      	ldr	r4, [r0, #0]
 8007914:	fa03 f506 	lsl.w	r5, r3, r6
 8007918:	432c      	orrs	r4, r5
 800791a:	40d3      	lsrs	r3, r2
 800791c:	6004      	str	r4, [r0, #0]
 800791e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007922:	4288      	cmp	r0, r1
 8007924:	d3f4      	bcc.n	8007910 <L_shift+0xc>
 8007926:	bd70      	pop	{r4, r5, r6, pc}

08007928 <__match>:
 8007928:	b530      	push	{r4, r5, lr}
 800792a:	6803      	ldr	r3, [r0, #0]
 800792c:	3301      	adds	r3, #1
 800792e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007932:	b914      	cbnz	r4, 800793a <__match+0x12>
 8007934:	6003      	str	r3, [r0, #0]
 8007936:	2001      	movs	r0, #1
 8007938:	bd30      	pop	{r4, r5, pc}
 800793a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800793e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007942:	2d19      	cmp	r5, #25
 8007944:	bf98      	it	ls
 8007946:	3220      	addls	r2, #32
 8007948:	42a2      	cmp	r2, r4
 800794a:	d0f0      	beq.n	800792e <__match+0x6>
 800794c:	2000      	movs	r0, #0
 800794e:	e7f3      	b.n	8007938 <__match+0x10>

08007950 <__hexnan>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	680b      	ldr	r3, [r1, #0]
 8007956:	115e      	asrs	r6, r3, #5
 8007958:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800795c:	f013 031f 	ands.w	r3, r3, #31
 8007960:	b087      	sub	sp, #28
 8007962:	bf18      	it	ne
 8007964:	3604      	addne	r6, #4
 8007966:	2500      	movs	r5, #0
 8007968:	1f37      	subs	r7, r6, #4
 800796a:	4690      	mov	r8, r2
 800796c:	6802      	ldr	r2, [r0, #0]
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	4682      	mov	sl, r0
 8007972:	f846 5c04 	str.w	r5, [r6, #-4]
 8007976:	46b9      	mov	r9, r7
 8007978:	463c      	mov	r4, r7
 800797a:	9502      	str	r5, [sp, #8]
 800797c:	46ab      	mov	fp, r5
 800797e:	7851      	ldrb	r1, [r2, #1]
 8007980:	1c53      	adds	r3, r2, #1
 8007982:	9303      	str	r3, [sp, #12]
 8007984:	b341      	cbz	r1, 80079d8 <__hexnan+0x88>
 8007986:	4608      	mov	r0, r1
 8007988:	9205      	str	r2, [sp, #20]
 800798a:	9104      	str	r1, [sp, #16]
 800798c:	f7ff fd5f 	bl	800744e <__hexdig_fun>
 8007990:	2800      	cmp	r0, #0
 8007992:	d14f      	bne.n	8007a34 <__hexnan+0xe4>
 8007994:	9904      	ldr	r1, [sp, #16]
 8007996:	9a05      	ldr	r2, [sp, #20]
 8007998:	2920      	cmp	r1, #32
 800799a:	d818      	bhi.n	80079ce <__hexnan+0x7e>
 800799c:	9b02      	ldr	r3, [sp, #8]
 800799e:	459b      	cmp	fp, r3
 80079a0:	dd13      	ble.n	80079ca <__hexnan+0x7a>
 80079a2:	454c      	cmp	r4, r9
 80079a4:	d206      	bcs.n	80079b4 <__hexnan+0x64>
 80079a6:	2d07      	cmp	r5, #7
 80079a8:	dc04      	bgt.n	80079b4 <__hexnan+0x64>
 80079aa:	462a      	mov	r2, r5
 80079ac:	4649      	mov	r1, r9
 80079ae:	4620      	mov	r0, r4
 80079b0:	f7ff ffa8 	bl	8007904 <L_shift>
 80079b4:	4544      	cmp	r4, r8
 80079b6:	d950      	bls.n	8007a5a <__hexnan+0x10a>
 80079b8:	2300      	movs	r3, #0
 80079ba:	f1a4 0904 	sub.w	r9, r4, #4
 80079be:	f844 3c04 	str.w	r3, [r4, #-4]
 80079c2:	f8cd b008 	str.w	fp, [sp, #8]
 80079c6:	464c      	mov	r4, r9
 80079c8:	461d      	mov	r5, r3
 80079ca:	9a03      	ldr	r2, [sp, #12]
 80079cc:	e7d7      	b.n	800797e <__hexnan+0x2e>
 80079ce:	2929      	cmp	r1, #41	; 0x29
 80079d0:	d156      	bne.n	8007a80 <__hexnan+0x130>
 80079d2:	3202      	adds	r2, #2
 80079d4:	f8ca 2000 	str.w	r2, [sl]
 80079d8:	f1bb 0f00 	cmp.w	fp, #0
 80079dc:	d050      	beq.n	8007a80 <__hexnan+0x130>
 80079de:	454c      	cmp	r4, r9
 80079e0:	d206      	bcs.n	80079f0 <__hexnan+0xa0>
 80079e2:	2d07      	cmp	r5, #7
 80079e4:	dc04      	bgt.n	80079f0 <__hexnan+0xa0>
 80079e6:	462a      	mov	r2, r5
 80079e8:	4649      	mov	r1, r9
 80079ea:	4620      	mov	r0, r4
 80079ec:	f7ff ff8a 	bl	8007904 <L_shift>
 80079f0:	4544      	cmp	r4, r8
 80079f2:	d934      	bls.n	8007a5e <__hexnan+0x10e>
 80079f4:	f1a8 0204 	sub.w	r2, r8, #4
 80079f8:	4623      	mov	r3, r4
 80079fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80079fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a02:	429f      	cmp	r7, r3
 8007a04:	d2f9      	bcs.n	80079fa <__hexnan+0xaa>
 8007a06:	1b3b      	subs	r3, r7, r4
 8007a08:	f023 0303 	bic.w	r3, r3, #3
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	3401      	adds	r4, #1
 8007a10:	3e03      	subs	r6, #3
 8007a12:	42b4      	cmp	r4, r6
 8007a14:	bf88      	it	hi
 8007a16:	2304      	movhi	r3, #4
 8007a18:	4443      	add	r3, r8
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f843 2b04 	str.w	r2, [r3], #4
 8007a20:	429f      	cmp	r7, r3
 8007a22:	d2fb      	bcs.n	8007a1c <__hexnan+0xcc>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	b91b      	cbnz	r3, 8007a30 <__hexnan+0xe0>
 8007a28:	4547      	cmp	r7, r8
 8007a2a:	d127      	bne.n	8007a7c <__hexnan+0x12c>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	2005      	movs	r0, #5
 8007a32:	e026      	b.n	8007a82 <__hexnan+0x132>
 8007a34:	3501      	adds	r5, #1
 8007a36:	2d08      	cmp	r5, #8
 8007a38:	f10b 0b01 	add.w	fp, fp, #1
 8007a3c:	dd06      	ble.n	8007a4c <__hexnan+0xfc>
 8007a3e:	4544      	cmp	r4, r8
 8007a40:	d9c3      	bls.n	80079ca <__hexnan+0x7a>
 8007a42:	2300      	movs	r3, #0
 8007a44:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a48:	2501      	movs	r5, #1
 8007a4a:	3c04      	subs	r4, #4
 8007a4c:	6822      	ldr	r2, [r4, #0]
 8007a4e:	f000 000f 	and.w	r0, r0, #15
 8007a52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007a56:	6022      	str	r2, [r4, #0]
 8007a58:	e7b7      	b.n	80079ca <__hexnan+0x7a>
 8007a5a:	2508      	movs	r5, #8
 8007a5c:	e7b5      	b.n	80079ca <__hexnan+0x7a>
 8007a5e:	9b01      	ldr	r3, [sp, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0df      	beq.n	8007a24 <__hexnan+0xd4>
 8007a64:	f04f 32ff 	mov.w	r2, #4294967295
 8007a68:	f1c3 0320 	rsb	r3, r3, #32
 8007a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007a74:	401a      	ands	r2, r3
 8007a76:	f846 2c04 	str.w	r2, [r6, #-4]
 8007a7a:	e7d3      	b.n	8007a24 <__hexnan+0xd4>
 8007a7c:	3f04      	subs	r7, #4
 8007a7e:	e7d1      	b.n	8007a24 <__hexnan+0xd4>
 8007a80:	2004      	movs	r0, #4
 8007a82:	b007      	add	sp, #28
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a88 <_localeconv_r>:
 8007a88:	4800      	ldr	r0, [pc, #0]	; (8007a8c <_localeconv_r+0x4>)
 8007a8a:	4770      	bx	lr
 8007a8c:	200001d0 	.word	0x200001d0

08007a90 <__retarget_lock_init_recursive>:
 8007a90:	4770      	bx	lr

08007a92 <__retarget_lock_acquire_recursive>:
 8007a92:	4770      	bx	lr

08007a94 <__retarget_lock_release_recursive>:
 8007a94:	4770      	bx	lr

08007a96 <__swhatbuf_r>:
 8007a96:	b570      	push	{r4, r5, r6, lr}
 8007a98:	460e      	mov	r6, r1
 8007a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a9e:	2900      	cmp	r1, #0
 8007aa0:	b096      	sub	sp, #88	; 0x58
 8007aa2:	4614      	mov	r4, r2
 8007aa4:	461d      	mov	r5, r3
 8007aa6:	da08      	bge.n	8007aba <__swhatbuf_r+0x24>
 8007aa8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	602a      	str	r2, [r5, #0]
 8007ab0:	061a      	lsls	r2, r3, #24
 8007ab2:	d410      	bmi.n	8007ad6 <__swhatbuf_r+0x40>
 8007ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab8:	e00e      	b.n	8007ad8 <__swhatbuf_r+0x42>
 8007aba:	466a      	mov	r2, sp
 8007abc:	f001 f9fe 	bl	8008ebc <_fstat_r>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	dbf1      	blt.n	8007aa8 <__swhatbuf_r+0x12>
 8007ac4:	9a01      	ldr	r2, [sp, #4]
 8007ac6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007aca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ace:	425a      	negs	r2, r3
 8007ad0:	415a      	adcs	r2, r3
 8007ad2:	602a      	str	r2, [r5, #0]
 8007ad4:	e7ee      	b.n	8007ab4 <__swhatbuf_r+0x1e>
 8007ad6:	2340      	movs	r3, #64	; 0x40
 8007ad8:	2000      	movs	r0, #0
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	b016      	add	sp, #88	; 0x58
 8007ade:	bd70      	pop	{r4, r5, r6, pc}

08007ae0 <__smakebuf_r>:
 8007ae0:	898b      	ldrh	r3, [r1, #12]
 8007ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ae4:	079d      	lsls	r5, r3, #30
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	460c      	mov	r4, r1
 8007aea:	d507      	bpl.n	8007afc <__smakebuf_r+0x1c>
 8007aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	2301      	movs	r3, #1
 8007af6:	6163      	str	r3, [r4, #20]
 8007af8:	b002      	add	sp, #8
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	ab01      	add	r3, sp, #4
 8007afe:	466a      	mov	r2, sp
 8007b00:	f7ff ffc9 	bl	8007a96 <__swhatbuf_r>
 8007b04:	9900      	ldr	r1, [sp, #0]
 8007b06:	4605      	mov	r5, r0
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f000 fd95 	bl	8008638 <_malloc_r>
 8007b0e:	b948      	cbnz	r0, 8007b24 <__smakebuf_r+0x44>
 8007b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b14:	059a      	lsls	r2, r3, #22
 8007b16:	d4ef      	bmi.n	8007af8 <__smakebuf_r+0x18>
 8007b18:	f023 0303 	bic.w	r3, r3, #3
 8007b1c:	f043 0302 	orr.w	r3, r3, #2
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	e7e3      	b.n	8007aec <__smakebuf_r+0xc>
 8007b24:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <__smakebuf_r+0x7c>)
 8007b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	6020      	str	r0, [r4, #0]
 8007b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	9b00      	ldr	r3, [sp, #0]
 8007b34:	6163      	str	r3, [r4, #20]
 8007b36:	9b01      	ldr	r3, [sp, #4]
 8007b38:	6120      	str	r0, [r4, #16]
 8007b3a:	b15b      	cbz	r3, 8007b54 <__smakebuf_r+0x74>
 8007b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b40:	4630      	mov	r0, r6
 8007b42:	f001 f9cd 	bl	8008ee0 <_isatty_r>
 8007b46:	b128      	cbz	r0, 8007b54 <__smakebuf_r+0x74>
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	89a0      	ldrh	r0, [r4, #12]
 8007b56:	4305      	orrs	r5, r0
 8007b58:	81a5      	strh	r5, [r4, #12]
 8007b5a:	e7cd      	b.n	8007af8 <__smakebuf_r+0x18>
 8007b5c:	08007209 	.word	0x08007209

08007b60 <malloc>:
 8007b60:	4b02      	ldr	r3, [pc, #8]	; (8007b6c <malloc+0xc>)
 8007b62:	4601      	mov	r1, r0
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	f000 bd67 	b.w	8008638 <_malloc_r>
 8007b6a:	bf00      	nop
 8007b6c:	20000078 	.word	0x20000078

08007b70 <__ascii_mbtowc>:
 8007b70:	b082      	sub	sp, #8
 8007b72:	b901      	cbnz	r1, 8007b76 <__ascii_mbtowc+0x6>
 8007b74:	a901      	add	r1, sp, #4
 8007b76:	b142      	cbz	r2, 8007b8a <__ascii_mbtowc+0x1a>
 8007b78:	b14b      	cbz	r3, 8007b8e <__ascii_mbtowc+0x1e>
 8007b7a:	7813      	ldrb	r3, [r2, #0]
 8007b7c:	600b      	str	r3, [r1, #0]
 8007b7e:	7812      	ldrb	r2, [r2, #0]
 8007b80:	1e10      	subs	r0, r2, #0
 8007b82:	bf18      	it	ne
 8007b84:	2001      	movne	r0, #1
 8007b86:	b002      	add	sp, #8
 8007b88:	4770      	bx	lr
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	e7fb      	b.n	8007b86 <__ascii_mbtowc+0x16>
 8007b8e:	f06f 0001 	mvn.w	r0, #1
 8007b92:	e7f8      	b.n	8007b86 <__ascii_mbtowc+0x16>

08007b94 <memcpy>:
 8007b94:	440a      	add	r2, r1
 8007b96:	4291      	cmp	r1, r2
 8007b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b9c:	d100      	bne.n	8007ba0 <memcpy+0xc>
 8007b9e:	4770      	bx	lr
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007baa:	4291      	cmp	r1, r2
 8007bac:	d1f9      	bne.n	8007ba2 <memcpy+0xe>
 8007bae:	bd10      	pop	{r4, pc}

08007bb0 <_Balloc>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	460d      	mov	r5, r1
 8007bb8:	b976      	cbnz	r6, 8007bd8 <_Balloc+0x28>
 8007bba:	2010      	movs	r0, #16
 8007bbc:	f7ff ffd0 	bl	8007b60 <malloc>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	6260      	str	r0, [r4, #36]	; 0x24
 8007bc4:	b920      	cbnz	r0, 8007bd0 <_Balloc+0x20>
 8007bc6:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <_Balloc+0x78>)
 8007bc8:	4818      	ldr	r0, [pc, #96]	; (8007c2c <_Balloc+0x7c>)
 8007bca:	2166      	movs	r1, #102	; 0x66
 8007bcc:	f001 f936 	bl	8008e3c <__assert_func>
 8007bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bd4:	6006      	str	r6, [r0, #0]
 8007bd6:	60c6      	str	r6, [r0, #12]
 8007bd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007bda:	68f3      	ldr	r3, [r6, #12]
 8007bdc:	b183      	cbz	r3, 8007c00 <_Balloc+0x50>
 8007bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007be6:	b9b8      	cbnz	r0, 8007c18 <_Balloc+0x68>
 8007be8:	2101      	movs	r1, #1
 8007bea:	fa01 f605 	lsl.w	r6, r1, r5
 8007bee:	1d72      	adds	r2, r6, #5
 8007bf0:	0092      	lsls	r2, r2, #2
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f000 fc9d 	bl	8008532 <_calloc_r>
 8007bf8:	b160      	cbz	r0, 8007c14 <_Balloc+0x64>
 8007bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bfe:	e00e      	b.n	8007c1e <_Balloc+0x6e>
 8007c00:	2221      	movs	r2, #33	; 0x21
 8007c02:	2104      	movs	r1, #4
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 fc94 	bl	8008532 <_calloc_r>
 8007c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c0c:	60f0      	str	r0, [r6, #12]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e4      	bne.n	8007bde <_Balloc+0x2e>
 8007c14:	2000      	movs	r0, #0
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	6802      	ldr	r2, [r0, #0]
 8007c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c24:	e7f7      	b.n	8007c16 <_Balloc+0x66>
 8007c26:	bf00      	nop
 8007c28:	08009326 	.word	0x08009326
 8007c2c:	08009488 	.word	0x08009488

08007c30 <_Bfree>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c34:	4605      	mov	r5, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	b976      	cbnz	r6, 8007c58 <_Bfree+0x28>
 8007c3a:	2010      	movs	r0, #16
 8007c3c:	f7ff ff90 	bl	8007b60 <malloc>
 8007c40:	4602      	mov	r2, r0
 8007c42:	6268      	str	r0, [r5, #36]	; 0x24
 8007c44:	b920      	cbnz	r0, 8007c50 <_Bfree+0x20>
 8007c46:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <_Bfree+0x3c>)
 8007c48:	4809      	ldr	r0, [pc, #36]	; (8007c70 <_Bfree+0x40>)
 8007c4a:	218a      	movs	r1, #138	; 0x8a
 8007c4c:	f001 f8f6 	bl	8008e3c <__assert_func>
 8007c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c54:	6006      	str	r6, [r0, #0]
 8007c56:	60c6      	str	r6, [r0, #12]
 8007c58:	b13c      	cbz	r4, 8007c6a <_Bfree+0x3a>
 8007c5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c5c:	6862      	ldr	r2, [r4, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c64:	6021      	str	r1, [r4, #0]
 8007c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	08009326 	.word	0x08009326
 8007c70:	08009488 	.word	0x08009488

08007c74 <__multadd>:
 8007c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c78:	690d      	ldr	r5, [r1, #16]
 8007c7a:	4607      	mov	r7, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	461e      	mov	r6, r3
 8007c80:	f101 0c14 	add.w	ip, r1, #20
 8007c84:	2000      	movs	r0, #0
 8007c86:	f8dc 3000 	ldr.w	r3, [ip]
 8007c8a:	b299      	uxth	r1, r3
 8007c8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007c90:	0c1e      	lsrs	r6, r3, #16
 8007c92:	0c0b      	lsrs	r3, r1, #16
 8007c94:	fb02 3306 	mla	r3, r2, r6, r3
 8007c98:	b289      	uxth	r1, r1
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ca0:	4285      	cmp	r5, r0
 8007ca2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007caa:	dcec      	bgt.n	8007c86 <__multadd+0x12>
 8007cac:	b30e      	cbz	r6, 8007cf2 <__multadd+0x7e>
 8007cae:	68a3      	ldr	r3, [r4, #8]
 8007cb0:	42ab      	cmp	r3, r5
 8007cb2:	dc19      	bgt.n	8007ce8 <__multadd+0x74>
 8007cb4:	6861      	ldr	r1, [r4, #4]
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	3101      	adds	r1, #1
 8007cba:	f7ff ff79 	bl	8007bb0 <_Balloc>
 8007cbe:	4680      	mov	r8, r0
 8007cc0:	b928      	cbnz	r0, 8007cce <__multadd+0x5a>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <__multadd+0x84>)
 8007cc6:	480d      	ldr	r0, [pc, #52]	; (8007cfc <__multadd+0x88>)
 8007cc8:	21b5      	movs	r1, #181	; 0xb5
 8007cca:	f001 f8b7 	bl	8008e3c <__assert_func>
 8007cce:	6922      	ldr	r2, [r4, #16]
 8007cd0:	3202      	adds	r2, #2
 8007cd2:	f104 010c 	add.w	r1, r4, #12
 8007cd6:	0092      	lsls	r2, r2, #2
 8007cd8:	300c      	adds	r0, #12
 8007cda:	f7ff ff5b 	bl	8007b94 <memcpy>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f7ff ffa5 	bl	8007c30 <_Bfree>
 8007ce6:	4644      	mov	r4, r8
 8007ce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cec:	3501      	adds	r5, #1
 8007cee:	615e      	str	r6, [r3, #20]
 8007cf0:	6125      	str	r5, [r4, #16]
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf8:	08009398 	.word	0x08009398
 8007cfc:	08009488 	.word	0x08009488

08007d00 <__s2b>:
 8007d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d04:	460c      	mov	r4, r1
 8007d06:	4615      	mov	r5, r2
 8007d08:	461f      	mov	r7, r3
 8007d0a:	2209      	movs	r2, #9
 8007d0c:	3308      	adds	r3, #8
 8007d0e:	4606      	mov	r6, r0
 8007d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d14:	2100      	movs	r1, #0
 8007d16:	2201      	movs	r2, #1
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	db09      	blt.n	8007d30 <__s2b+0x30>
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f7ff ff47 	bl	8007bb0 <_Balloc>
 8007d22:	b940      	cbnz	r0, 8007d36 <__s2b+0x36>
 8007d24:	4602      	mov	r2, r0
 8007d26:	4b19      	ldr	r3, [pc, #100]	; (8007d8c <__s2b+0x8c>)
 8007d28:	4819      	ldr	r0, [pc, #100]	; (8007d90 <__s2b+0x90>)
 8007d2a:	21ce      	movs	r1, #206	; 0xce
 8007d2c:	f001 f886 	bl	8008e3c <__assert_func>
 8007d30:	0052      	lsls	r2, r2, #1
 8007d32:	3101      	adds	r1, #1
 8007d34:	e7f0      	b.n	8007d18 <__s2b+0x18>
 8007d36:	9b08      	ldr	r3, [sp, #32]
 8007d38:	6143      	str	r3, [r0, #20]
 8007d3a:	2d09      	cmp	r5, #9
 8007d3c:	f04f 0301 	mov.w	r3, #1
 8007d40:	6103      	str	r3, [r0, #16]
 8007d42:	dd16      	ble.n	8007d72 <__s2b+0x72>
 8007d44:	f104 0909 	add.w	r9, r4, #9
 8007d48:	46c8      	mov	r8, r9
 8007d4a:	442c      	add	r4, r5
 8007d4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d50:	4601      	mov	r1, r0
 8007d52:	3b30      	subs	r3, #48	; 0x30
 8007d54:	220a      	movs	r2, #10
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7ff ff8c 	bl	8007c74 <__multadd>
 8007d5c:	45a0      	cmp	r8, r4
 8007d5e:	d1f5      	bne.n	8007d4c <__s2b+0x4c>
 8007d60:	f1a5 0408 	sub.w	r4, r5, #8
 8007d64:	444c      	add	r4, r9
 8007d66:	1b2d      	subs	r5, r5, r4
 8007d68:	1963      	adds	r3, r4, r5
 8007d6a:	42bb      	cmp	r3, r7
 8007d6c:	db04      	blt.n	8007d78 <__s2b+0x78>
 8007d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d72:	340a      	adds	r4, #10
 8007d74:	2509      	movs	r5, #9
 8007d76:	e7f6      	b.n	8007d66 <__s2b+0x66>
 8007d78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d7c:	4601      	mov	r1, r0
 8007d7e:	3b30      	subs	r3, #48	; 0x30
 8007d80:	220a      	movs	r2, #10
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff ff76 	bl	8007c74 <__multadd>
 8007d88:	e7ee      	b.n	8007d68 <__s2b+0x68>
 8007d8a:	bf00      	nop
 8007d8c:	08009398 	.word	0x08009398
 8007d90:	08009488 	.word	0x08009488

08007d94 <__hi0bits>:
 8007d94:	0c03      	lsrs	r3, r0, #16
 8007d96:	041b      	lsls	r3, r3, #16
 8007d98:	b9d3      	cbnz	r3, 8007dd0 <__hi0bits+0x3c>
 8007d9a:	0400      	lsls	r0, r0, #16
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007da2:	bf04      	itt	eq
 8007da4:	0200      	lsleq	r0, r0, #8
 8007da6:	3308      	addeq	r3, #8
 8007da8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007dac:	bf04      	itt	eq
 8007dae:	0100      	lsleq	r0, r0, #4
 8007db0:	3304      	addeq	r3, #4
 8007db2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007db6:	bf04      	itt	eq
 8007db8:	0080      	lsleq	r0, r0, #2
 8007dba:	3302      	addeq	r3, #2
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	db05      	blt.n	8007dcc <__hi0bits+0x38>
 8007dc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007dc4:	f103 0301 	add.w	r3, r3, #1
 8007dc8:	bf08      	it	eq
 8007dca:	2320      	moveq	r3, #32
 8007dcc:	4618      	mov	r0, r3
 8007dce:	4770      	bx	lr
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	e7e4      	b.n	8007d9e <__hi0bits+0xa>

08007dd4 <__lo0bits>:
 8007dd4:	6803      	ldr	r3, [r0, #0]
 8007dd6:	f013 0207 	ands.w	r2, r3, #7
 8007dda:	4601      	mov	r1, r0
 8007ddc:	d00b      	beq.n	8007df6 <__lo0bits+0x22>
 8007dde:	07da      	lsls	r2, r3, #31
 8007de0:	d423      	bmi.n	8007e2a <__lo0bits+0x56>
 8007de2:	0798      	lsls	r0, r3, #30
 8007de4:	bf49      	itett	mi
 8007de6:	085b      	lsrmi	r3, r3, #1
 8007de8:	089b      	lsrpl	r3, r3, #2
 8007dea:	2001      	movmi	r0, #1
 8007dec:	600b      	strmi	r3, [r1, #0]
 8007dee:	bf5c      	itt	pl
 8007df0:	600b      	strpl	r3, [r1, #0]
 8007df2:	2002      	movpl	r0, #2
 8007df4:	4770      	bx	lr
 8007df6:	b298      	uxth	r0, r3
 8007df8:	b9a8      	cbnz	r0, 8007e26 <__lo0bits+0x52>
 8007dfa:	0c1b      	lsrs	r3, r3, #16
 8007dfc:	2010      	movs	r0, #16
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	b90a      	cbnz	r2, 8007e06 <__lo0bits+0x32>
 8007e02:	3008      	adds	r0, #8
 8007e04:	0a1b      	lsrs	r3, r3, #8
 8007e06:	071a      	lsls	r2, r3, #28
 8007e08:	bf04      	itt	eq
 8007e0a:	091b      	lsreq	r3, r3, #4
 8007e0c:	3004      	addeq	r0, #4
 8007e0e:	079a      	lsls	r2, r3, #30
 8007e10:	bf04      	itt	eq
 8007e12:	089b      	lsreq	r3, r3, #2
 8007e14:	3002      	addeq	r0, #2
 8007e16:	07da      	lsls	r2, r3, #31
 8007e18:	d403      	bmi.n	8007e22 <__lo0bits+0x4e>
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	f100 0001 	add.w	r0, r0, #1
 8007e20:	d005      	beq.n	8007e2e <__lo0bits+0x5a>
 8007e22:	600b      	str	r3, [r1, #0]
 8007e24:	4770      	bx	lr
 8007e26:	4610      	mov	r0, r2
 8007e28:	e7e9      	b.n	8007dfe <__lo0bits+0x2a>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	4770      	bx	lr
 8007e2e:	2020      	movs	r0, #32
 8007e30:	4770      	bx	lr
	...

08007e34 <__i2b>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	460c      	mov	r4, r1
 8007e38:	2101      	movs	r1, #1
 8007e3a:	f7ff feb9 	bl	8007bb0 <_Balloc>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	b928      	cbnz	r0, 8007e4e <__i2b+0x1a>
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <__i2b+0x24>)
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <__i2b+0x28>)
 8007e46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e4a:	f000 fff7 	bl	8008e3c <__assert_func>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	6144      	str	r4, [r0, #20]
 8007e52:	6103      	str	r3, [r0, #16]
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	bf00      	nop
 8007e58:	08009398 	.word	0x08009398
 8007e5c:	08009488 	.word	0x08009488

08007e60 <__multiply>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	4691      	mov	r9, r2
 8007e66:	690a      	ldr	r2, [r1, #16]
 8007e68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	bfb8      	it	lt
 8007e70:	460b      	movlt	r3, r1
 8007e72:	460c      	mov	r4, r1
 8007e74:	bfbc      	itt	lt
 8007e76:	464c      	movlt	r4, r9
 8007e78:	4699      	movlt	r9, r3
 8007e7a:	6927      	ldr	r7, [r4, #16]
 8007e7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e80:	68a3      	ldr	r3, [r4, #8]
 8007e82:	6861      	ldr	r1, [r4, #4]
 8007e84:	eb07 060a 	add.w	r6, r7, sl
 8007e88:	42b3      	cmp	r3, r6
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	bfb8      	it	lt
 8007e8e:	3101      	addlt	r1, #1
 8007e90:	f7ff fe8e 	bl	8007bb0 <_Balloc>
 8007e94:	b930      	cbnz	r0, 8007ea4 <__multiply+0x44>
 8007e96:	4602      	mov	r2, r0
 8007e98:	4b44      	ldr	r3, [pc, #272]	; (8007fac <__multiply+0x14c>)
 8007e9a:	4845      	ldr	r0, [pc, #276]	; (8007fb0 <__multiply+0x150>)
 8007e9c:	f240 115d 	movw	r1, #349	; 0x15d
 8007ea0:	f000 ffcc 	bl	8008e3c <__assert_func>
 8007ea4:	f100 0514 	add.w	r5, r0, #20
 8007ea8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007eac:	462b      	mov	r3, r5
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4543      	cmp	r3, r8
 8007eb2:	d321      	bcc.n	8007ef8 <__multiply+0x98>
 8007eb4:	f104 0314 	add.w	r3, r4, #20
 8007eb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ebc:	f109 0314 	add.w	r3, r9, #20
 8007ec0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ec4:	9202      	str	r2, [sp, #8]
 8007ec6:	1b3a      	subs	r2, r7, r4
 8007ec8:	3a15      	subs	r2, #21
 8007eca:	f022 0203 	bic.w	r2, r2, #3
 8007ece:	3204      	adds	r2, #4
 8007ed0:	f104 0115 	add.w	r1, r4, #21
 8007ed4:	428f      	cmp	r7, r1
 8007ed6:	bf38      	it	cc
 8007ed8:	2204      	movcc	r2, #4
 8007eda:	9201      	str	r2, [sp, #4]
 8007edc:	9a02      	ldr	r2, [sp, #8]
 8007ede:	9303      	str	r3, [sp, #12]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d80c      	bhi.n	8007efe <__multiply+0x9e>
 8007ee4:	2e00      	cmp	r6, #0
 8007ee6:	dd03      	ble.n	8007ef0 <__multiply+0x90>
 8007ee8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d05a      	beq.n	8007fa6 <__multiply+0x146>
 8007ef0:	6106      	str	r6, [r0, #16]
 8007ef2:	b005      	add	sp, #20
 8007ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef8:	f843 2b04 	str.w	r2, [r3], #4
 8007efc:	e7d8      	b.n	8007eb0 <__multiply+0x50>
 8007efe:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f02:	f1ba 0f00 	cmp.w	sl, #0
 8007f06:	d024      	beq.n	8007f52 <__multiply+0xf2>
 8007f08:	f104 0e14 	add.w	lr, r4, #20
 8007f0c:	46a9      	mov	r9, r5
 8007f0e:	f04f 0c00 	mov.w	ip, #0
 8007f12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f16:	f8d9 1000 	ldr.w	r1, [r9]
 8007f1a:	fa1f fb82 	uxth.w	fp, r2
 8007f1e:	b289      	uxth	r1, r1
 8007f20:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f28:	f8d9 2000 	ldr.w	r2, [r9]
 8007f2c:	4461      	add	r1, ip
 8007f2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f32:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f3a:	b289      	uxth	r1, r1
 8007f3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f40:	4577      	cmp	r7, lr
 8007f42:	f849 1b04 	str.w	r1, [r9], #4
 8007f46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f4a:	d8e2      	bhi.n	8007f12 <__multiply+0xb2>
 8007f4c:	9a01      	ldr	r2, [sp, #4]
 8007f4e:	f845 c002 	str.w	ip, [r5, r2]
 8007f52:	9a03      	ldr	r2, [sp, #12]
 8007f54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	f1b9 0f00 	cmp.w	r9, #0
 8007f5e:	d020      	beq.n	8007fa2 <__multiply+0x142>
 8007f60:	6829      	ldr	r1, [r5, #0]
 8007f62:	f104 0c14 	add.w	ip, r4, #20
 8007f66:	46ae      	mov	lr, r5
 8007f68:	f04f 0a00 	mov.w	sl, #0
 8007f6c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f74:	fb09 220b 	mla	r2, r9, fp, r2
 8007f78:	4492      	add	sl, r2
 8007f7a:	b289      	uxth	r1, r1
 8007f7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f80:	f84e 1b04 	str.w	r1, [lr], #4
 8007f84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f88:	f8be 1000 	ldrh.w	r1, [lr]
 8007f8c:	0c12      	lsrs	r2, r2, #16
 8007f8e:	fb09 1102 	mla	r1, r9, r2, r1
 8007f92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f96:	4567      	cmp	r7, ip
 8007f98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f9c:	d8e6      	bhi.n	8007f6c <__multiply+0x10c>
 8007f9e:	9a01      	ldr	r2, [sp, #4]
 8007fa0:	50a9      	str	r1, [r5, r2]
 8007fa2:	3504      	adds	r5, #4
 8007fa4:	e79a      	b.n	8007edc <__multiply+0x7c>
 8007fa6:	3e01      	subs	r6, #1
 8007fa8:	e79c      	b.n	8007ee4 <__multiply+0x84>
 8007faa:	bf00      	nop
 8007fac:	08009398 	.word	0x08009398
 8007fb0:	08009488 	.word	0x08009488

08007fb4 <__pow5mult>:
 8007fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb8:	4615      	mov	r5, r2
 8007fba:	f012 0203 	ands.w	r2, r2, #3
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	d007      	beq.n	8007fd4 <__pow5mult+0x20>
 8007fc4:	4c25      	ldr	r4, [pc, #148]	; (800805c <__pow5mult+0xa8>)
 8007fc6:	3a01      	subs	r2, #1
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fce:	f7ff fe51 	bl	8007c74 <__multadd>
 8007fd2:	4607      	mov	r7, r0
 8007fd4:	10ad      	asrs	r5, r5, #2
 8007fd6:	d03d      	beq.n	8008054 <__pow5mult+0xa0>
 8007fd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fda:	b97c      	cbnz	r4, 8007ffc <__pow5mult+0x48>
 8007fdc:	2010      	movs	r0, #16
 8007fde:	f7ff fdbf 	bl	8007b60 <malloc>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	6270      	str	r0, [r6, #36]	; 0x24
 8007fe6:	b928      	cbnz	r0, 8007ff4 <__pow5mult+0x40>
 8007fe8:	4b1d      	ldr	r3, [pc, #116]	; (8008060 <__pow5mult+0xac>)
 8007fea:	481e      	ldr	r0, [pc, #120]	; (8008064 <__pow5mult+0xb0>)
 8007fec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ff0:	f000 ff24 	bl	8008e3c <__assert_func>
 8007ff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ff8:	6004      	str	r4, [r0, #0]
 8007ffa:	60c4      	str	r4, [r0, #12]
 8007ffc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008004:	b94c      	cbnz	r4, 800801a <__pow5mult+0x66>
 8008006:	f240 2171 	movw	r1, #625	; 0x271
 800800a:	4630      	mov	r0, r6
 800800c:	f7ff ff12 	bl	8007e34 <__i2b>
 8008010:	2300      	movs	r3, #0
 8008012:	f8c8 0008 	str.w	r0, [r8, #8]
 8008016:	4604      	mov	r4, r0
 8008018:	6003      	str	r3, [r0, #0]
 800801a:	f04f 0900 	mov.w	r9, #0
 800801e:	07eb      	lsls	r3, r5, #31
 8008020:	d50a      	bpl.n	8008038 <__pow5mult+0x84>
 8008022:	4639      	mov	r1, r7
 8008024:	4622      	mov	r2, r4
 8008026:	4630      	mov	r0, r6
 8008028:	f7ff ff1a 	bl	8007e60 <__multiply>
 800802c:	4639      	mov	r1, r7
 800802e:	4680      	mov	r8, r0
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff fdfd 	bl	8007c30 <_Bfree>
 8008036:	4647      	mov	r7, r8
 8008038:	106d      	asrs	r5, r5, #1
 800803a:	d00b      	beq.n	8008054 <__pow5mult+0xa0>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	b938      	cbnz	r0, 8008050 <__pow5mult+0x9c>
 8008040:	4622      	mov	r2, r4
 8008042:	4621      	mov	r1, r4
 8008044:	4630      	mov	r0, r6
 8008046:	f7ff ff0b 	bl	8007e60 <__multiply>
 800804a:	6020      	str	r0, [r4, #0]
 800804c:	f8c0 9000 	str.w	r9, [r0]
 8008050:	4604      	mov	r4, r0
 8008052:	e7e4      	b.n	800801e <__pow5mult+0x6a>
 8008054:	4638      	mov	r0, r7
 8008056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805a:	bf00      	nop
 800805c:	080095d8 	.word	0x080095d8
 8008060:	08009326 	.word	0x08009326
 8008064:	08009488 	.word	0x08009488

08008068 <__lshift>:
 8008068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806c:	460c      	mov	r4, r1
 800806e:	6849      	ldr	r1, [r1, #4]
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	4607      	mov	r7, r0
 800807a:	4691      	mov	r9, r2
 800807c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008080:	f108 0601 	add.w	r6, r8, #1
 8008084:	42b3      	cmp	r3, r6
 8008086:	db0b      	blt.n	80080a0 <__lshift+0x38>
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff fd91 	bl	8007bb0 <_Balloc>
 800808e:	4605      	mov	r5, r0
 8008090:	b948      	cbnz	r0, 80080a6 <__lshift+0x3e>
 8008092:	4602      	mov	r2, r0
 8008094:	4b2a      	ldr	r3, [pc, #168]	; (8008140 <__lshift+0xd8>)
 8008096:	482b      	ldr	r0, [pc, #172]	; (8008144 <__lshift+0xdc>)
 8008098:	f240 11d9 	movw	r1, #473	; 0x1d9
 800809c:	f000 fece 	bl	8008e3c <__assert_func>
 80080a0:	3101      	adds	r1, #1
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	e7ee      	b.n	8008084 <__lshift+0x1c>
 80080a6:	2300      	movs	r3, #0
 80080a8:	f100 0114 	add.w	r1, r0, #20
 80080ac:	f100 0210 	add.w	r2, r0, #16
 80080b0:	4618      	mov	r0, r3
 80080b2:	4553      	cmp	r3, sl
 80080b4:	db37      	blt.n	8008126 <__lshift+0xbe>
 80080b6:	6920      	ldr	r0, [r4, #16]
 80080b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080bc:	f104 0314 	add.w	r3, r4, #20
 80080c0:	f019 091f 	ands.w	r9, r9, #31
 80080c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080cc:	d02f      	beq.n	800812e <__lshift+0xc6>
 80080ce:	f1c9 0e20 	rsb	lr, r9, #32
 80080d2:	468a      	mov	sl, r1
 80080d4:	f04f 0c00 	mov.w	ip, #0
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	fa02 f209 	lsl.w	r2, r2, r9
 80080de:	ea42 020c 	orr.w	r2, r2, ip
 80080e2:	f84a 2b04 	str.w	r2, [sl], #4
 80080e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ea:	4298      	cmp	r0, r3
 80080ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080f0:	d8f2      	bhi.n	80080d8 <__lshift+0x70>
 80080f2:	1b03      	subs	r3, r0, r4
 80080f4:	3b15      	subs	r3, #21
 80080f6:	f023 0303 	bic.w	r3, r3, #3
 80080fa:	3304      	adds	r3, #4
 80080fc:	f104 0215 	add.w	r2, r4, #21
 8008100:	4290      	cmp	r0, r2
 8008102:	bf38      	it	cc
 8008104:	2304      	movcc	r3, #4
 8008106:	f841 c003 	str.w	ip, [r1, r3]
 800810a:	f1bc 0f00 	cmp.w	ip, #0
 800810e:	d001      	beq.n	8008114 <__lshift+0xac>
 8008110:	f108 0602 	add.w	r6, r8, #2
 8008114:	3e01      	subs	r6, #1
 8008116:	4638      	mov	r0, r7
 8008118:	612e      	str	r6, [r5, #16]
 800811a:	4621      	mov	r1, r4
 800811c:	f7ff fd88 	bl	8007c30 <_Bfree>
 8008120:	4628      	mov	r0, r5
 8008122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008126:	f842 0f04 	str.w	r0, [r2, #4]!
 800812a:	3301      	adds	r3, #1
 800812c:	e7c1      	b.n	80080b2 <__lshift+0x4a>
 800812e:	3904      	subs	r1, #4
 8008130:	f853 2b04 	ldr.w	r2, [r3], #4
 8008134:	f841 2f04 	str.w	r2, [r1, #4]!
 8008138:	4298      	cmp	r0, r3
 800813a:	d8f9      	bhi.n	8008130 <__lshift+0xc8>
 800813c:	e7ea      	b.n	8008114 <__lshift+0xac>
 800813e:	bf00      	nop
 8008140:	08009398 	.word	0x08009398
 8008144:	08009488 	.word	0x08009488

08008148 <__mcmp>:
 8008148:	b530      	push	{r4, r5, lr}
 800814a:	6902      	ldr	r2, [r0, #16]
 800814c:	690c      	ldr	r4, [r1, #16]
 800814e:	1b12      	subs	r2, r2, r4
 8008150:	d10e      	bne.n	8008170 <__mcmp+0x28>
 8008152:	f100 0314 	add.w	r3, r0, #20
 8008156:	3114      	adds	r1, #20
 8008158:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800815c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008160:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008164:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008168:	42a5      	cmp	r5, r4
 800816a:	d003      	beq.n	8008174 <__mcmp+0x2c>
 800816c:	d305      	bcc.n	800817a <__mcmp+0x32>
 800816e:	2201      	movs	r2, #1
 8008170:	4610      	mov	r0, r2
 8008172:	bd30      	pop	{r4, r5, pc}
 8008174:	4283      	cmp	r3, r0
 8008176:	d3f3      	bcc.n	8008160 <__mcmp+0x18>
 8008178:	e7fa      	b.n	8008170 <__mcmp+0x28>
 800817a:	f04f 32ff 	mov.w	r2, #4294967295
 800817e:	e7f7      	b.n	8008170 <__mcmp+0x28>

08008180 <__mdiff>:
 8008180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	460c      	mov	r4, r1
 8008186:	4606      	mov	r6, r0
 8008188:	4611      	mov	r1, r2
 800818a:	4620      	mov	r0, r4
 800818c:	4690      	mov	r8, r2
 800818e:	f7ff ffdb 	bl	8008148 <__mcmp>
 8008192:	1e05      	subs	r5, r0, #0
 8008194:	d110      	bne.n	80081b8 <__mdiff+0x38>
 8008196:	4629      	mov	r1, r5
 8008198:	4630      	mov	r0, r6
 800819a:	f7ff fd09 	bl	8007bb0 <_Balloc>
 800819e:	b930      	cbnz	r0, 80081ae <__mdiff+0x2e>
 80081a0:	4b3a      	ldr	r3, [pc, #232]	; (800828c <__mdiff+0x10c>)
 80081a2:	4602      	mov	r2, r0
 80081a4:	f240 2132 	movw	r1, #562	; 0x232
 80081a8:	4839      	ldr	r0, [pc, #228]	; (8008290 <__mdiff+0x110>)
 80081aa:	f000 fe47 	bl	8008e3c <__assert_func>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b8:	bfa4      	itt	ge
 80081ba:	4643      	movge	r3, r8
 80081bc:	46a0      	movge	r8, r4
 80081be:	4630      	mov	r0, r6
 80081c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081c4:	bfa6      	itte	ge
 80081c6:	461c      	movge	r4, r3
 80081c8:	2500      	movge	r5, #0
 80081ca:	2501      	movlt	r5, #1
 80081cc:	f7ff fcf0 	bl	8007bb0 <_Balloc>
 80081d0:	b920      	cbnz	r0, 80081dc <__mdiff+0x5c>
 80081d2:	4b2e      	ldr	r3, [pc, #184]	; (800828c <__mdiff+0x10c>)
 80081d4:	4602      	mov	r2, r0
 80081d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081da:	e7e5      	b.n	80081a8 <__mdiff+0x28>
 80081dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081e0:	6926      	ldr	r6, [r4, #16]
 80081e2:	60c5      	str	r5, [r0, #12]
 80081e4:	f104 0914 	add.w	r9, r4, #20
 80081e8:	f108 0514 	add.w	r5, r8, #20
 80081ec:	f100 0e14 	add.w	lr, r0, #20
 80081f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081f8:	f108 0210 	add.w	r2, r8, #16
 80081fc:	46f2      	mov	sl, lr
 80081fe:	2100      	movs	r1, #0
 8008200:	f859 3b04 	ldr.w	r3, [r9], #4
 8008204:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008208:	fa1f f883 	uxth.w	r8, r3
 800820c:	fa11 f18b 	uxtah	r1, r1, fp
 8008210:	0c1b      	lsrs	r3, r3, #16
 8008212:	eba1 0808 	sub.w	r8, r1, r8
 8008216:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800821a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800821e:	fa1f f888 	uxth.w	r8, r8
 8008222:	1419      	asrs	r1, r3, #16
 8008224:	454e      	cmp	r6, r9
 8008226:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800822a:	f84a 3b04 	str.w	r3, [sl], #4
 800822e:	d8e7      	bhi.n	8008200 <__mdiff+0x80>
 8008230:	1b33      	subs	r3, r6, r4
 8008232:	3b15      	subs	r3, #21
 8008234:	f023 0303 	bic.w	r3, r3, #3
 8008238:	3304      	adds	r3, #4
 800823a:	3415      	adds	r4, #21
 800823c:	42a6      	cmp	r6, r4
 800823e:	bf38      	it	cc
 8008240:	2304      	movcc	r3, #4
 8008242:	441d      	add	r5, r3
 8008244:	4473      	add	r3, lr
 8008246:	469e      	mov	lr, r3
 8008248:	462e      	mov	r6, r5
 800824a:	4566      	cmp	r6, ip
 800824c:	d30e      	bcc.n	800826c <__mdiff+0xec>
 800824e:	f10c 0203 	add.w	r2, ip, #3
 8008252:	1b52      	subs	r2, r2, r5
 8008254:	f022 0203 	bic.w	r2, r2, #3
 8008258:	3d03      	subs	r5, #3
 800825a:	45ac      	cmp	ip, r5
 800825c:	bf38      	it	cc
 800825e:	2200      	movcc	r2, #0
 8008260:	441a      	add	r2, r3
 8008262:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008266:	b17b      	cbz	r3, 8008288 <__mdiff+0x108>
 8008268:	6107      	str	r7, [r0, #16]
 800826a:	e7a3      	b.n	80081b4 <__mdiff+0x34>
 800826c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008270:	fa11 f288 	uxtah	r2, r1, r8
 8008274:	1414      	asrs	r4, r2, #16
 8008276:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800827a:	b292      	uxth	r2, r2
 800827c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008280:	f84e 2b04 	str.w	r2, [lr], #4
 8008284:	1421      	asrs	r1, r4, #16
 8008286:	e7e0      	b.n	800824a <__mdiff+0xca>
 8008288:	3f01      	subs	r7, #1
 800828a:	e7ea      	b.n	8008262 <__mdiff+0xe2>
 800828c:	08009398 	.word	0x08009398
 8008290:	08009488 	.word	0x08009488

08008294 <__ulp>:
 8008294:	b082      	sub	sp, #8
 8008296:	ed8d 0b00 	vstr	d0, [sp]
 800829a:	9b01      	ldr	r3, [sp, #4]
 800829c:	4912      	ldr	r1, [pc, #72]	; (80082e8 <__ulp+0x54>)
 800829e:	4019      	ands	r1, r3
 80082a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80082a4:	2900      	cmp	r1, #0
 80082a6:	dd05      	ble.n	80082b4 <__ulp+0x20>
 80082a8:	2200      	movs	r2, #0
 80082aa:	460b      	mov	r3, r1
 80082ac:	ec43 2b10 	vmov	d0, r2, r3
 80082b0:	b002      	add	sp, #8
 80082b2:	4770      	bx	lr
 80082b4:	4249      	negs	r1, r1
 80082b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80082ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	f04f 0300 	mov.w	r3, #0
 80082c6:	da04      	bge.n	80082d2 <__ulp+0x3e>
 80082c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80082cc:	fa41 f300 	asr.w	r3, r1, r0
 80082d0:	e7ec      	b.n	80082ac <__ulp+0x18>
 80082d2:	f1a0 0114 	sub.w	r1, r0, #20
 80082d6:	291e      	cmp	r1, #30
 80082d8:	bfda      	itte	le
 80082da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80082de:	fa20 f101 	lsrle.w	r1, r0, r1
 80082e2:	2101      	movgt	r1, #1
 80082e4:	460a      	mov	r2, r1
 80082e6:	e7e1      	b.n	80082ac <__ulp+0x18>
 80082e8:	7ff00000 	.word	0x7ff00000

080082ec <__b2d>:
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	6905      	ldr	r5, [r0, #16]
 80082f0:	f100 0714 	add.w	r7, r0, #20
 80082f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80082f8:	1f2e      	subs	r6, r5, #4
 80082fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff fd48 	bl	8007d94 <__hi0bits>
 8008304:	f1c0 0320 	rsb	r3, r0, #32
 8008308:	280a      	cmp	r0, #10
 800830a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008388 <__b2d+0x9c>
 800830e:	600b      	str	r3, [r1, #0]
 8008310:	dc14      	bgt.n	800833c <__b2d+0x50>
 8008312:	f1c0 0e0b 	rsb	lr, r0, #11
 8008316:	fa24 f10e 	lsr.w	r1, r4, lr
 800831a:	42b7      	cmp	r7, r6
 800831c:	ea41 030c 	orr.w	r3, r1, ip
 8008320:	bf34      	ite	cc
 8008322:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008326:	2100      	movcs	r1, #0
 8008328:	3015      	adds	r0, #21
 800832a:	fa04 f000 	lsl.w	r0, r4, r0
 800832e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008332:	ea40 0201 	orr.w	r2, r0, r1
 8008336:	ec43 2b10 	vmov	d0, r2, r3
 800833a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800833c:	42b7      	cmp	r7, r6
 800833e:	bf3a      	itte	cc
 8008340:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008344:	f1a5 0608 	subcc.w	r6, r5, #8
 8008348:	2100      	movcs	r1, #0
 800834a:	380b      	subs	r0, #11
 800834c:	d017      	beq.n	800837e <__b2d+0x92>
 800834e:	f1c0 0c20 	rsb	ip, r0, #32
 8008352:	fa04 f500 	lsl.w	r5, r4, r0
 8008356:	42be      	cmp	r6, r7
 8008358:	fa21 f40c 	lsr.w	r4, r1, ip
 800835c:	ea45 0504 	orr.w	r5, r5, r4
 8008360:	bf8c      	ite	hi
 8008362:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008366:	2400      	movls	r4, #0
 8008368:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800836c:	fa01 f000 	lsl.w	r0, r1, r0
 8008370:	fa24 f40c 	lsr.w	r4, r4, ip
 8008374:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008378:	ea40 0204 	orr.w	r2, r0, r4
 800837c:	e7db      	b.n	8008336 <__b2d+0x4a>
 800837e:	ea44 030c 	orr.w	r3, r4, ip
 8008382:	460a      	mov	r2, r1
 8008384:	e7d7      	b.n	8008336 <__b2d+0x4a>
 8008386:	bf00      	nop
 8008388:	3ff00000 	.word	0x3ff00000

0800838c <__d2b>:
 800838c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008390:	4689      	mov	r9, r1
 8008392:	2101      	movs	r1, #1
 8008394:	ec57 6b10 	vmov	r6, r7, d0
 8008398:	4690      	mov	r8, r2
 800839a:	f7ff fc09 	bl	8007bb0 <_Balloc>
 800839e:	4604      	mov	r4, r0
 80083a0:	b930      	cbnz	r0, 80083b0 <__d2b+0x24>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b25      	ldr	r3, [pc, #148]	; (800843c <__d2b+0xb0>)
 80083a6:	4826      	ldr	r0, [pc, #152]	; (8008440 <__d2b+0xb4>)
 80083a8:	f240 310a 	movw	r1, #778	; 0x30a
 80083ac:	f000 fd46 	bl	8008e3c <__assert_func>
 80083b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083b8:	bb35      	cbnz	r5, 8008408 <__d2b+0x7c>
 80083ba:	2e00      	cmp	r6, #0
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	d028      	beq.n	8008412 <__d2b+0x86>
 80083c0:	4668      	mov	r0, sp
 80083c2:	9600      	str	r6, [sp, #0]
 80083c4:	f7ff fd06 	bl	8007dd4 <__lo0bits>
 80083c8:	9900      	ldr	r1, [sp, #0]
 80083ca:	b300      	cbz	r0, 800840e <__d2b+0x82>
 80083cc:	9a01      	ldr	r2, [sp, #4]
 80083ce:	f1c0 0320 	rsb	r3, r0, #32
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	430b      	orrs	r3, r1
 80083d8:	40c2      	lsrs	r2, r0
 80083da:	6163      	str	r3, [r4, #20]
 80083dc:	9201      	str	r2, [sp, #4]
 80083de:	9b01      	ldr	r3, [sp, #4]
 80083e0:	61a3      	str	r3, [r4, #24]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	bf14      	ite	ne
 80083e6:	2202      	movne	r2, #2
 80083e8:	2201      	moveq	r2, #1
 80083ea:	6122      	str	r2, [r4, #16]
 80083ec:	b1d5      	cbz	r5, 8008424 <__d2b+0x98>
 80083ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083f2:	4405      	add	r5, r0
 80083f4:	f8c9 5000 	str.w	r5, [r9]
 80083f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083fc:	f8c8 0000 	str.w	r0, [r8]
 8008400:	4620      	mov	r0, r4
 8008402:	b003      	add	sp, #12
 8008404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800840c:	e7d5      	b.n	80083ba <__d2b+0x2e>
 800840e:	6161      	str	r1, [r4, #20]
 8008410:	e7e5      	b.n	80083de <__d2b+0x52>
 8008412:	a801      	add	r0, sp, #4
 8008414:	f7ff fcde 	bl	8007dd4 <__lo0bits>
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	6163      	str	r3, [r4, #20]
 800841c:	2201      	movs	r2, #1
 800841e:	6122      	str	r2, [r4, #16]
 8008420:	3020      	adds	r0, #32
 8008422:	e7e3      	b.n	80083ec <__d2b+0x60>
 8008424:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008428:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800842c:	f8c9 0000 	str.w	r0, [r9]
 8008430:	6918      	ldr	r0, [r3, #16]
 8008432:	f7ff fcaf 	bl	8007d94 <__hi0bits>
 8008436:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800843a:	e7df      	b.n	80083fc <__d2b+0x70>
 800843c:	08009398 	.word	0x08009398
 8008440:	08009488 	.word	0x08009488

08008444 <__ratio>:
 8008444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	4688      	mov	r8, r1
 800844a:	4669      	mov	r1, sp
 800844c:	4681      	mov	r9, r0
 800844e:	f7ff ff4d 	bl	80082ec <__b2d>
 8008452:	a901      	add	r1, sp, #4
 8008454:	4640      	mov	r0, r8
 8008456:	ec55 4b10 	vmov	r4, r5, d0
 800845a:	f7ff ff47 	bl	80082ec <__b2d>
 800845e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008462:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008466:	eba3 0c02 	sub.w	ip, r3, r2
 800846a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800846e:	1a9b      	subs	r3, r3, r2
 8008470:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008474:	ec51 0b10 	vmov	r0, r1, d0
 8008478:	2b00      	cmp	r3, #0
 800847a:	bfd6      	itet	le
 800847c:	460a      	movle	r2, r1
 800847e:	462a      	movgt	r2, r5
 8008480:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008484:	468b      	mov	fp, r1
 8008486:	462f      	mov	r7, r5
 8008488:	bfd4      	ite	le
 800848a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800848e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008492:	4620      	mov	r0, r4
 8008494:	ee10 2a10 	vmov	r2, s0
 8008498:	465b      	mov	r3, fp
 800849a:	4639      	mov	r1, r7
 800849c:	f7f8 f9de 	bl	800085c <__aeabi_ddiv>
 80084a0:	ec41 0b10 	vmov	d0, r0, r1
 80084a4:	b003      	add	sp, #12
 80084a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084aa <__copybits>:
 80084aa:	3901      	subs	r1, #1
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	1149      	asrs	r1, r1, #5
 80084b0:	6914      	ldr	r4, [r2, #16]
 80084b2:	3101      	adds	r1, #1
 80084b4:	f102 0314 	add.w	r3, r2, #20
 80084b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084c0:	1f05      	subs	r5, r0, #4
 80084c2:	42a3      	cmp	r3, r4
 80084c4:	d30c      	bcc.n	80084e0 <__copybits+0x36>
 80084c6:	1aa3      	subs	r3, r4, r2
 80084c8:	3b11      	subs	r3, #17
 80084ca:	f023 0303 	bic.w	r3, r3, #3
 80084ce:	3211      	adds	r2, #17
 80084d0:	42a2      	cmp	r2, r4
 80084d2:	bf88      	it	hi
 80084d4:	2300      	movhi	r3, #0
 80084d6:	4418      	add	r0, r3
 80084d8:	2300      	movs	r3, #0
 80084da:	4288      	cmp	r0, r1
 80084dc:	d305      	bcc.n	80084ea <__copybits+0x40>
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80084e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80084e8:	e7eb      	b.n	80084c2 <__copybits+0x18>
 80084ea:	f840 3b04 	str.w	r3, [r0], #4
 80084ee:	e7f4      	b.n	80084da <__copybits+0x30>

080084f0 <__any_on>:
 80084f0:	f100 0214 	add.w	r2, r0, #20
 80084f4:	6900      	ldr	r0, [r0, #16]
 80084f6:	114b      	asrs	r3, r1, #5
 80084f8:	4298      	cmp	r0, r3
 80084fa:	b510      	push	{r4, lr}
 80084fc:	db11      	blt.n	8008522 <__any_on+0x32>
 80084fe:	dd0a      	ble.n	8008516 <__any_on+0x26>
 8008500:	f011 011f 	ands.w	r1, r1, #31
 8008504:	d007      	beq.n	8008516 <__any_on+0x26>
 8008506:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800850a:	fa24 f001 	lsr.w	r0, r4, r1
 800850e:	fa00 f101 	lsl.w	r1, r0, r1
 8008512:	428c      	cmp	r4, r1
 8008514:	d10b      	bne.n	800852e <__any_on+0x3e>
 8008516:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800851a:	4293      	cmp	r3, r2
 800851c:	d803      	bhi.n	8008526 <__any_on+0x36>
 800851e:	2000      	movs	r0, #0
 8008520:	bd10      	pop	{r4, pc}
 8008522:	4603      	mov	r3, r0
 8008524:	e7f7      	b.n	8008516 <__any_on+0x26>
 8008526:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800852a:	2900      	cmp	r1, #0
 800852c:	d0f5      	beq.n	800851a <__any_on+0x2a>
 800852e:	2001      	movs	r0, #1
 8008530:	e7f6      	b.n	8008520 <__any_on+0x30>

08008532 <_calloc_r>:
 8008532:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008534:	fba1 2402 	umull	r2, r4, r1, r2
 8008538:	b94c      	cbnz	r4, 800854e <_calloc_r+0x1c>
 800853a:	4611      	mov	r1, r2
 800853c:	9201      	str	r2, [sp, #4]
 800853e:	f000 f87b 	bl	8008638 <_malloc_r>
 8008542:	9a01      	ldr	r2, [sp, #4]
 8008544:	4605      	mov	r5, r0
 8008546:	b930      	cbnz	r0, 8008556 <_calloc_r+0x24>
 8008548:	4628      	mov	r0, r5
 800854a:	b003      	add	sp, #12
 800854c:	bd30      	pop	{r4, r5, pc}
 800854e:	220c      	movs	r2, #12
 8008550:	6002      	str	r2, [r0, #0]
 8008552:	2500      	movs	r5, #0
 8008554:	e7f8      	b.n	8008548 <_calloc_r+0x16>
 8008556:	4621      	mov	r1, r4
 8008558:	f7fc f83e 	bl	80045d8 <memset>
 800855c:	e7f4      	b.n	8008548 <_calloc_r+0x16>
	...

08008560 <_free_r>:
 8008560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008562:	2900      	cmp	r1, #0
 8008564:	d044      	beq.n	80085f0 <_free_r+0x90>
 8008566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856a:	9001      	str	r0, [sp, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f1a1 0404 	sub.w	r4, r1, #4
 8008572:	bfb8      	it	lt
 8008574:	18e4      	addlt	r4, r4, r3
 8008576:	f000 fcef 	bl	8008f58 <__malloc_lock>
 800857a:	4a1e      	ldr	r2, [pc, #120]	; (80085f4 <_free_r+0x94>)
 800857c:	9801      	ldr	r0, [sp, #4]
 800857e:	6813      	ldr	r3, [r2, #0]
 8008580:	b933      	cbnz	r3, 8008590 <_free_r+0x30>
 8008582:	6063      	str	r3, [r4, #4]
 8008584:	6014      	str	r4, [r2, #0]
 8008586:	b003      	add	sp, #12
 8008588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800858c:	f000 bcea 	b.w	8008f64 <__malloc_unlock>
 8008590:	42a3      	cmp	r3, r4
 8008592:	d908      	bls.n	80085a6 <_free_r+0x46>
 8008594:	6825      	ldr	r5, [r4, #0]
 8008596:	1961      	adds	r1, r4, r5
 8008598:	428b      	cmp	r3, r1
 800859a:	bf01      	itttt	eq
 800859c:	6819      	ldreq	r1, [r3, #0]
 800859e:	685b      	ldreq	r3, [r3, #4]
 80085a0:	1949      	addeq	r1, r1, r5
 80085a2:	6021      	streq	r1, [r4, #0]
 80085a4:	e7ed      	b.n	8008582 <_free_r+0x22>
 80085a6:	461a      	mov	r2, r3
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	b10b      	cbz	r3, 80085b0 <_free_r+0x50>
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	d9fa      	bls.n	80085a6 <_free_r+0x46>
 80085b0:	6811      	ldr	r1, [r2, #0]
 80085b2:	1855      	adds	r5, r2, r1
 80085b4:	42a5      	cmp	r5, r4
 80085b6:	d10b      	bne.n	80085d0 <_free_r+0x70>
 80085b8:	6824      	ldr	r4, [r4, #0]
 80085ba:	4421      	add	r1, r4
 80085bc:	1854      	adds	r4, r2, r1
 80085be:	42a3      	cmp	r3, r4
 80085c0:	6011      	str	r1, [r2, #0]
 80085c2:	d1e0      	bne.n	8008586 <_free_r+0x26>
 80085c4:	681c      	ldr	r4, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	6053      	str	r3, [r2, #4]
 80085ca:	4421      	add	r1, r4
 80085cc:	6011      	str	r1, [r2, #0]
 80085ce:	e7da      	b.n	8008586 <_free_r+0x26>
 80085d0:	d902      	bls.n	80085d8 <_free_r+0x78>
 80085d2:	230c      	movs	r3, #12
 80085d4:	6003      	str	r3, [r0, #0]
 80085d6:	e7d6      	b.n	8008586 <_free_r+0x26>
 80085d8:	6825      	ldr	r5, [r4, #0]
 80085da:	1961      	adds	r1, r4, r5
 80085dc:	428b      	cmp	r3, r1
 80085de:	bf04      	itt	eq
 80085e0:	6819      	ldreq	r1, [r3, #0]
 80085e2:	685b      	ldreq	r3, [r3, #4]
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	bf04      	itt	eq
 80085e8:	1949      	addeq	r1, r1, r5
 80085ea:	6021      	streq	r1, [r4, #0]
 80085ec:	6054      	str	r4, [r2, #4]
 80085ee:	e7ca      	b.n	8008586 <_free_r+0x26>
 80085f0:	b003      	add	sp, #12
 80085f2:	bd30      	pop	{r4, r5, pc}
 80085f4:	20000380 	.word	0x20000380

080085f8 <sbrk_aligned>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	4e0e      	ldr	r6, [pc, #56]	; (8008634 <sbrk_aligned+0x3c>)
 80085fc:	460c      	mov	r4, r1
 80085fe:	6831      	ldr	r1, [r6, #0]
 8008600:	4605      	mov	r5, r0
 8008602:	b911      	cbnz	r1, 800860a <sbrk_aligned+0x12>
 8008604:	f000 fb94 	bl	8008d30 <_sbrk_r>
 8008608:	6030      	str	r0, [r6, #0]
 800860a:	4621      	mov	r1, r4
 800860c:	4628      	mov	r0, r5
 800860e:	f000 fb8f 	bl	8008d30 <_sbrk_r>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	d00a      	beq.n	800862c <sbrk_aligned+0x34>
 8008616:	1cc4      	adds	r4, r0, #3
 8008618:	f024 0403 	bic.w	r4, r4, #3
 800861c:	42a0      	cmp	r0, r4
 800861e:	d007      	beq.n	8008630 <sbrk_aligned+0x38>
 8008620:	1a21      	subs	r1, r4, r0
 8008622:	4628      	mov	r0, r5
 8008624:	f000 fb84 	bl	8008d30 <_sbrk_r>
 8008628:	3001      	adds	r0, #1
 800862a:	d101      	bne.n	8008630 <sbrk_aligned+0x38>
 800862c:	f04f 34ff 	mov.w	r4, #4294967295
 8008630:	4620      	mov	r0, r4
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	20000384 	.word	0x20000384

08008638 <_malloc_r>:
 8008638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863c:	1ccd      	adds	r5, r1, #3
 800863e:	f025 0503 	bic.w	r5, r5, #3
 8008642:	3508      	adds	r5, #8
 8008644:	2d0c      	cmp	r5, #12
 8008646:	bf38      	it	cc
 8008648:	250c      	movcc	r5, #12
 800864a:	2d00      	cmp	r5, #0
 800864c:	4607      	mov	r7, r0
 800864e:	db01      	blt.n	8008654 <_malloc_r+0x1c>
 8008650:	42a9      	cmp	r1, r5
 8008652:	d905      	bls.n	8008660 <_malloc_r+0x28>
 8008654:	230c      	movs	r3, #12
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	2600      	movs	r6, #0
 800865a:	4630      	mov	r0, r6
 800865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008660:	4e2e      	ldr	r6, [pc, #184]	; (800871c <_malloc_r+0xe4>)
 8008662:	f000 fc79 	bl	8008f58 <__malloc_lock>
 8008666:	6833      	ldr	r3, [r6, #0]
 8008668:	461c      	mov	r4, r3
 800866a:	bb34      	cbnz	r4, 80086ba <_malloc_r+0x82>
 800866c:	4629      	mov	r1, r5
 800866e:	4638      	mov	r0, r7
 8008670:	f7ff ffc2 	bl	80085f8 <sbrk_aligned>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	4604      	mov	r4, r0
 8008678:	d14d      	bne.n	8008716 <_malloc_r+0xde>
 800867a:	6834      	ldr	r4, [r6, #0]
 800867c:	4626      	mov	r6, r4
 800867e:	2e00      	cmp	r6, #0
 8008680:	d140      	bne.n	8008704 <_malloc_r+0xcc>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	4631      	mov	r1, r6
 8008686:	4638      	mov	r0, r7
 8008688:	eb04 0803 	add.w	r8, r4, r3
 800868c:	f000 fb50 	bl	8008d30 <_sbrk_r>
 8008690:	4580      	cmp	r8, r0
 8008692:	d13a      	bne.n	800870a <_malloc_r+0xd2>
 8008694:	6821      	ldr	r1, [r4, #0]
 8008696:	3503      	adds	r5, #3
 8008698:	1a6d      	subs	r5, r5, r1
 800869a:	f025 0503 	bic.w	r5, r5, #3
 800869e:	3508      	adds	r5, #8
 80086a0:	2d0c      	cmp	r5, #12
 80086a2:	bf38      	it	cc
 80086a4:	250c      	movcc	r5, #12
 80086a6:	4629      	mov	r1, r5
 80086a8:	4638      	mov	r0, r7
 80086aa:	f7ff ffa5 	bl	80085f8 <sbrk_aligned>
 80086ae:	3001      	adds	r0, #1
 80086b0:	d02b      	beq.n	800870a <_malloc_r+0xd2>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	442b      	add	r3, r5
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	e00e      	b.n	80086d8 <_malloc_r+0xa0>
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	1b52      	subs	r2, r2, r5
 80086be:	d41e      	bmi.n	80086fe <_malloc_r+0xc6>
 80086c0:	2a0b      	cmp	r2, #11
 80086c2:	d916      	bls.n	80086f2 <_malloc_r+0xba>
 80086c4:	1961      	adds	r1, r4, r5
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	6025      	str	r5, [r4, #0]
 80086ca:	bf18      	it	ne
 80086cc:	6059      	strne	r1, [r3, #4]
 80086ce:	6863      	ldr	r3, [r4, #4]
 80086d0:	bf08      	it	eq
 80086d2:	6031      	streq	r1, [r6, #0]
 80086d4:	5162      	str	r2, [r4, r5]
 80086d6:	604b      	str	r3, [r1, #4]
 80086d8:	4638      	mov	r0, r7
 80086da:	f104 060b 	add.w	r6, r4, #11
 80086de:	f000 fc41 	bl	8008f64 <__malloc_unlock>
 80086e2:	f026 0607 	bic.w	r6, r6, #7
 80086e6:	1d23      	adds	r3, r4, #4
 80086e8:	1af2      	subs	r2, r6, r3
 80086ea:	d0b6      	beq.n	800865a <_malloc_r+0x22>
 80086ec:	1b9b      	subs	r3, r3, r6
 80086ee:	50a3      	str	r3, [r4, r2]
 80086f0:	e7b3      	b.n	800865a <_malloc_r+0x22>
 80086f2:	6862      	ldr	r2, [r4, #4]
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	bf0c      	ite	eq
 80086f8:	6032      	streq	r2, [r6, #0]
 80086fa:	605a      	strne	r2, [r3, #4]
 80086fc:	e7ec      	b.n	80086d8 <_malloc_r+0xa0>
 80086fe:	4623      	mov	r3, r4
 8008700:	6864      	ldr	r4, [r4, #4]
 8008702:	e7b2      	b.n	800866a <_malloc_r+0x32>
 8008704:	4634      	mov	r4, r6
 8008706:	6876      	ldr	r6, [r6, #4]
 8008708:	e7b9      	b.n	800867e <_malloc_r+0x46>
 800870a:	230c      	movs	r3, #12
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	4638      	mov	r0, r7
 8008710:	f000 fc28 	bl	8008f64 <__malloc_unlock>
 8008714:	e7a1      	b.n	800865a <_malloc_r+0x22>
 8008716:	6025      	str	r5, [r4, #0]
 8008718:	e7de      	b.n	80086d8 <_malloc_r+0xa0>
 800871a:	bf00      	nop
 800871c:	20000380 	.word	0x20000380

08008720 <__ssputs_r>:
 8008720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008724:	688e      	ldr	r6, [r1, #8]
 8008726:	429e      	cmp	r6, r3
 8008728:	4682      	mov	sl, r0
 800872a:	460c      	mov	r4, r1
 800872c:	4690      	mov	r8, r2
 800872e:	461f      	mov	r7, r3
 8008730:	d838      	bhi.n	80087a4 <__ssputs_r+0x84>
 8008732:	898a      	ldrh	r2, [r1, #12]
 8008734:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008738:	d032      	beq.n	80087a0 <__ssputs_r+0x80>
 800873a:	6825      	ldr	r5, [r4, #0]
 800873c:	6909      	ldr	r1, [r1, #16]
 800873e:	eba5 0901 	sub.w	r9, r5, r1
 8008742:	6965      	ldr	r5, [r4, #20]
 8008744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800874c:	3301      	adds	r3, #1
 800874e:	444b      	add	r3, r9
 8008750:	106d      	asrs	r5, r5, #1
 8008752:	429d      	cmp	r5, r3
 8008754:	bf38      	it	cc
 8008756:	461d      	movcc	r5, r3
 8008758:	0553      	lsls	r3, r2, #21
 800875a:	d531      	bpl.n	80087c0 <__ssputs_r+0xa0>
 800875c:	4629      	mov	r1, r5
 800875e:	f7ff ff6b 	bl	8008638 <_malloc_r>
 8008762:	4606      	mov	r6, r0
 8008764:	b950      	cbnz	r0, 800877c <__ssputs_r+0x5c>
 8008766:	230c      	movs	r3, #12
 8008768:	f8ca 3000 	str.w	r3, [sl]
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
 8008778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877c:	6921      	ldr	r1, [r4, #16]
 800877e:	464a      	mov	r2, r9
 8008780:	f7ff fa08 	bl	8007b94 <memcpy>
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800878a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	6126      	str	r6, [r4, #16]
 8008792:	6165      	str	r5, [r4, #20]
 8008794:	444e      	add	r6, r9
 8008796:	eba5 0509 	sub.w	r5, r5, r9
 800879a:	6026      	str	r6, [r4, #0]
 800879c:	60a5      	str	r5, [r4, #8]
 800879e:	463e      	mov	r6, r7
 80087a0:	42be      	cmp	r6, r7
 80087a2:	d900      	bls.n	80087a6 <__ssputs_r+0x86>
 80087a4:	463e      	mov	r6, r7
 80087a6:	6820      	ldr	r0, [r4, #0]
 80087a8:	4632      	mov	r2, r6
 80087aa:	4641      	mov	r1, r8
 80087ac:	f000 fbba 	bl	8008f24 <memmove>
 80087b0:	68a3      	ldr	r3, [r4, #8]
 80087b2:	1b9b      	subs	r3, r3, r6
 80087b4:	60a3      	str	r3, [r4, #8]
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	4433      	add	r3, r6
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	2000      	movs	r0, #0
 80087be:	e7db      	b.n	8008778 <__ssputs_r+0x58>
 80087c0:	462a      	mov	r2, r5
 80087c2:	f000 fbd5 	bl	8008f70 <_realloc_r>
 80087c6:	4606      	mov	r6, r0
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d1e1      	bne.n	8008790 <__ssputs_r+0x70>
 80087cc:	6921      	ldr	r1, [r4, #16]
 80087ce:	4650      	mov	r0, sl
 80087d0:	f7ff fec6 	bl	8008560 <_free_r>
 80087d4:	e7c7      	b.n	8008766 <__ssputs_r+0x46>
	...

080087d8 <_svfiprintf_r>:
 80087d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	4698      	mov	r8, r3
 80087de:	898b      	ldrh	r3, [r1, #12]
 80087e0:	061b      	lsls	r3, r3, #24
 80087e2:	b09d      	sub	sp, #116	; 0x74
 80087e4:	4607      	mov	r7, r0
 80087e6:	460d      	mov	r5, r1
 80087e8:	4614      	mov	r4, r2
 80087ea:	d50e      	bpl.n	800880a <_svfiprintf_r+0x32>
 80087ec:	690b      	ldr	r3, [r1, #16]
 80087ee:	b963      	cbnz	r3, 800880a <_svfiprintf_r+0x32>
 80087f0:	2140      	movs	r1, #64	; 0x40
 80087f2:	f7ff ff21 	bl	8008638 <_malloc_r>
 80087f6:	6028      	str	r0, [r5, #0]
 80087f8:	6128      	str	r0, [r5, #16]
 80087fa:	b920      	cbnz	r0, 8008806 <_svfiprintf_r+0x2e>
 80087fc:	230c      	movs	r3, #12
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	e0d1      	b.n	80089aa <_svfiprintf_r+0x1d2>
 8008806:	2340      	movs	r3, #64	; 0x40
 8008808:	616b      	str	r3, [r5, #20]
 800880a:	2300      	movs	r3, #0
 800880c:	9309      	str	r3, [sp, #36]	; 0x24
 800880e:	2320      	movs	r3, #32
 8008810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008814:	f8cd 800c 	str.w	r8, [sp, #12]
 8008818:	2330      	movs	r3, #48	; 0x30
 800881a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089c4 <_svfiprintf_r+0x1ec>
 800881e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008822:	f04f 0901 	mov.w	r9, #1
 8008826:	4623      	mov	r3, r4
 8008828:	469a      	mov	sl, r3
 800882a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800882e:	b10a      	cbz	r2, 8008834 <_svfiprintf_r+0x5c>
 8008830:	2a25      	cmp	r2, #37	; 0x25
 8008832:	d1f9      	bne.n	8008828 <_svfiprintf_r+0x50>
 8008834:	ebba 0b04 	subs.w	fp, sl, r4
 8008838:	d00b      	beq.n	8008852 <_svfiprintf_r+0x7a>
 800883a:	465b      	mov	r3, fp
 800883c:	4622      	mov	r2, r4
 800883e:	4629      	mov	r1, r5
 8008840:	4638      	mov	r0, r7
 8008842:	f7ff ff6d 	bl	8008720 <__ssputs_r>
 8008846:	3001      	adds	r0, #1
 8008848:	f000 80aa 	beq.w	80089a0 <_svfiprintf_r+0x1c8>
 800884c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800884e:	445a      	add	r2, fp
 8008850:	9209      	str	r2, [sp, #36]	; 0x24
 8008852:	f89a 3000 	ldrb.w	r3, [sl]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 80a2 	beq.w	80089a0 <_svfiprintf_r+0x1c8>
 800885c:	2300      	movs	r3, #0
 800885e:	f04f 32ff 	mov.w	r2, #4294967295
 8008862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008866:	f10a 0a01 	add.w	sl, sl, #1
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	9307      	str	r3, [sp, #28]
 800886e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008872:	931a      	str	r3, [sp, #104]	; 0x68
 8008874:	4654      	mov	r4, sl
 8008876:	2205      	movs	r2, #5
 8008878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887c:	4851      	ldr	r0, [pc, #324]	; (80089c4 <_svfiprintf_r+0x1ec>)
 800887e:	f7f7 fcb7 	bl	80001f0 <memchr>
 8008882:	9a04      	ldr	r2, [sp, #16]
 8008884:	b9d8      	cbnz	r0, 80088be <_svfiprintf_r+0xe6>
 8008886:	06d0      	lsls	r0, r2, #27
 8008888:	bf44      	itt	mi
 800888a:	2320      	movmi	r3, #32
 800888c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008890:	0711      	lsls	r1, r2, #28
 8008892:	bf44      	itt	mi
 8008894:	232b      	movmi	r3, #43	; 0x2b
 8008896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800889a:	f89a 3000 	ldrb.w	r3, [sl]
 800889e:	2b2a      	cmp	r3, #42	; 0x2a
 80088a0:	d015      	beq.n	80088ce <_svfiprintf_r+0xf6>
 80088a2:	9a07      	ldr	r2, [sp, #28]
 80088a4:	4654      	mov	r4, sl
 80088a6:	2000      	movs	r0, #0
 80088a8:	f04f 0c0a 	mov.w	ip, #10
 80088ac:	4621      	mov	r1, r4
 80088ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b2:	3b30      	subs	r3, #48	; 0x30
 80088b4:	2b09      	cmp	r3, #9
 80088b6:	d94e      	bls.n	8008956 <_svfiprintf_r+0x17e>
 80088b8:	b1b0      	cbz	r0, 80088e8 <_svfiprintf_r+0x110>
 80088ba:	9207      	str	r2, [sp, #28]
 80088bc:	e014      	b.n	80088e8 <_svfiprintf_r+0x110>
 80088be:	eba0 0308 	sub.w	r3, r0, r8
 80088c2:	fa09 f303 	lsl.w	r3, r9, r3
 80088c6:	4313      	orrs	r3, r2
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	46a2      	mov	sl, r4
 80088cc:	e7d2      	b.n	8008874 <_svfiprintf_r+0x9c>
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	1d19      	adds	r1, r3, #4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	9103      	str	r1, [sp, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bfbb      	ittet	lt
 80088da:	425b      	neglt	r3, r3
 80088dc:	f042 0202 	orrlt.w	r2, r2, #2
 80088e0:	9307      	strge	r3, [sp, #28]
 80088e2:	9307      	strlt	r3, [sp, #28]
 80088e4:	bfb8      	it	lt
 80088e6:	9204      	strlt	r2, [sp, #16]
 80088e8:	7823      	ldrb	r3, [r4, #0]
 80088ea:	2b2e      	cmp	r3, #46	; 0x2e
 80088ec:	d10c      	bne.n	8008908 <_svfiprintf_r+0x130>
 80088ee:	7863      	ldrb	r3, [r4, #1]
 80088f0:	2b2a      	cmp	r3, #42	; 0x2a
 80088f2:	d135      	bne.n	8008960 <_svfiprintf_r+0x188>
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	1d1a      	adds	r2, r3, #4
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	9203      	str	r2, [sp, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bfb8      	it	lt
 8008900:	f04f 33ff 	movlt.w	r3, #4294967295
 8008904:	3402      	adds	r4, #2
 8008906:	9305      	str	r3, [sp, #20]
 8008908:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089d4 <_svfiprintf_r+0x1fc>
 800890c:	7821      	ldrb	r1, [r4, #0]
 800890e:	2203      	movs	r2, #3
 8008910:	4650      	mov	r0, sl
 8008912:	f7f7 fc6d 	bl	80001f0 <memchr>
 8008916:	b140      	cbz	r0, 800892a <_svfiprintf_r+0x152>
 8008918:	2340      	movs	r3, #64	; 0x40
 800891a:	eba0 000a 	sub.w	r0, r0, sl
 800891e:	fa03 f000 	lsl.w	r0, r3, r0
 8008922:	9b04      	ldr	r3, [sp, #16]
 8008924:	4303      	orrs	r3, r0
 8008926:	3401      	adds	r4, #1
 8008928:	9304      	str	r3, [sp, #16]
 800892a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892e:	4826      	ldr	r0, [pc, #152]	; (80089c8 <_svfiprintf_r+0x1f0>)
 8008930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008934:	2206      	movs	r2, #6
 8008936:	f7f7 fc5b 	bl	80001f0 <memchr>
 800893a:	2800      	cmp	r0, #0
 800893c:	d038      	beq.n	80089b0 <_svfiprintf_r+0x1d8>
 800893e:	4b23      	ldr	r3, [pc, #140]	; (80089cc <_svfiprintf_r+0x1f4>)
 8008940:	bb1b      	cbnz	r3, 800898a <_svfiprintf_r+0x1b2>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	3307      	adds	r3, #7
 8008946:	f023 0307 	bic.w	r3, r3, #7
 800894a:	3308      	adds	r3, #8
 800894c:	9303      	str	r3, [sp, #12]
 800894e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008950:	4433      	add	r3, r6
 8008952:	9309      	str	r3, [sp, #36]	; 0x24
 8008954:	e767      	b.n	8008826 <_svfiprintf_r+0x4e>
 8008956:	fb0c 3202 	mla	r2, ip, r2, r3
 800895a:	460c      	mov	r4, r1
 800895c:	2001      	movs	r0, #1
 800895e:	e7a5      	b.n	80088ac <_svfiprintf_r+0xd4>
 8008960:	2300      	movs	r3, #0
 8008962:	3401      	adds	r4, #1
 8008964:	9305      	str	r3, [sp, #20]
 8008966:	4619      	mov	r1, r3
 8008968:	f04f 0c0a 	mov.w	ip, #10
 800896c:	4620      	mov	r0, r4
 800896e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008972:	3a30      	subs	r2, #48	; 0x30
 8008974:	2a09      	cmp	r2, #9
 8008976:	d903      	bls.n	8008980 <_svfiprintf_r+0x1a8>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0c5      	beq.n	8008908 <_svfiprintf_r+0x130>
 800897c:	9105      	str	r1, [sp, #20]
 800897e:	e7c3      	b.n	8008908 <_svfiprintf_r+0x130>
 8008980:	fb0c 2101 	mla	r1, ip, r1, r2
 8008984:	4604      	mov	r4, r0
 8008986:	2301      	movs	r3, #1
 8008988:	e7f0      	b.n	800896c <_svfiprintf_r+0x194>
 800898a:	ab03      	add	r3, sp, #12
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	462a      	mov	r2, r5
 8008990:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <_svfiprintf_r+0x1f8>)
 8008992:	a904      	add	r1, sp, #16
 8008994:	4638      	mov	r0, r7
 8008996:	f7fb fec7 	bl	8004728 <_printf_float>
 800899a:	1c42      	adds	r2, r0, #1
 800899c:	4606      	mov	r6, r0
 800899e:	d1d6      	bne.n	800894e <_svfiprintf_r+0x176>
 80089a0:	89ab      	ldrh	r3, [r5, #12]
 80089a2:	065b      	lsls	r3, r3, #25
 80089a4:	f53f af2c 	bmi.w	8008800 <_svfiprintf_r+0x28>
 80089a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089aa:	b01d      	add	sp, #116	; 0x74
 80089ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b0:	ab03      	add	r3, sp, #12
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	462a      	mov	r2, r5
 80089b6:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <_svfiprintf_r+0x1f8>)
 80089b8:	a904      	add	r1, sp, #16
 80089ba:	4638      	mov	r0, r7
 80089bc:	f7fc f958 	bl	8004c70 <_printf_i>
 80089c0:	e7eb      	b.n	800899a <_svfiprintf_r+0x1c2>
 80089c2:	bf00      	nop
 80089c4:	080095e4 	.word	0x080095e4
 80089c8:	080095ee 	.word	0x080095ee
 80089cc:	08004729 	.word	0x08004729
 80089d0:	08008721 	.word	0x08008721
 80089d4:	080095ea 	.word	0x080095ea

080089d8 <__sfputc_r>:
 80089d8:	6893      	ldr	r3, [r2, #8]
 80089da:	3b01      	subs	r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	b410      	push	{r4}
 80089e0:	6093      	str	r3, [r2, #8]
 80089e2:	da08      	bge.n	80089f6 <__sfputc_r+0x1e>
 80089e4:	6994      	ldr	r4, [r2, #24]
 80089e6:	42a3      	cmp	r3, r4
 80089e8:	db01      	blt.n	80089ee <__sfputc_r+0x16>
 80089ea:	290a      	cmp	r1, #10
 80089ec:	d103      	bne.n	80089f6 <__sfputc_r+0x1e>
 80089ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f2:	f7fd bbe9 	b.w	80061c8 <__swbuf_r>
 80089f6:	6813      	ldr	r3, [r2, #0]
 80089f8:	1c58      	adds	r0, r3, #1
 80089fa:	6010      	str	r0, [r2, #0]
 80089fc:	7019      	strb	r1, [r3, #0]
 80089fe:	4608      	mov	r0, r1
 8008a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <__sfputs_r>:
 8008a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a08:	4606      	mov	r6, r0
 8008a0a:	460f      	mov	r7, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	18d5      	adds	r5, r2, r3
 8008a10:	42ac      	cmp	r4, r5
 8008a12:	d101      	bne.n	8008a18 <__sfputs_r+0x12>
 8008a14:	2000      	movs	r0, #0
 8008a16:	e007      	b.n	8008a28 <__sfputs_r+0x22>
 8008a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1c:	463a      	mov	r2, r7
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff ffda 	bl	80089d8 <__sfputc_r>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d1f3      	bne.n	8008a10 <__sfputs_r+0xa>
 8008a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a2c <_vfiprintf_r>:
 8008a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	460d      	mov	r5, r1
 8008a32:	b09d      	sub	sp, #116	; 0x74
 8008a34:	4614      	mov	r4, r2
 8008a36:	4698      	mov	r8, r3
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b118      	cbz	r0, 8008a44 <_vfiprintf_r+0x18>
 8008a3c:	6983      	ldr	r3, [r0, #24]
 8008a3e:	b90b      	cbnz	r3, 8008a44 <_vfiprintf_r+0x18>
 8008a40:	f7fe fc16 	bl	8007270 <__sinit>
 8008a44:	4b89      	ldr	r3, [pc, #548]	; (8008c6c <_vfiprintf_r+0x240>)
 8008a46:	429d      	cmp	r5, r3
 8008a48:	d11b      	bne.n	8008a82 <_vfiprintf_r+0x56>
 8008a4a:	6875      	ldr	r5, [r6, #4]
 8008a4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a4e:	07d9      	lsls	r1, r3, #31
 8008a50:	d405      	bmi.n	8008a5e <_vfiprintf_r+0x32>
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	059a      	lsls	r2, r3, #22
 8008a56:	d402      	bmi.n	8008a5e <_vfiprintf_r+0x32>
 8008a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a5a:	f7ff f81a 	bl	8007a92 <__retarget_lock_acquire_recursive>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	071b      	lsls	r3, r3, #28
 8008a62:	d501      	bpl.n	8008a68 <_vfiprintf_r+0x3c>
 8008a64:	692b      	ldr	r3, [r5, #16]
 8008a66:	b9eb      	cbnz	r3, 8008aa4 <_vfiprintf_r+0x78>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7fd fbfe 	bl	800626c <__swsetup_r>
 8008a70:	b1c0      	cbz	r0, 8008aa4 <_vfiprintf_r+0x78>
 8008a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a74:	07dc      	lsls	r4, r3, #31
 8008a76:	d50e      	bpl.n	8008a96 <_vfiprintf_r+0x6a>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	b01d      	add	sp, #116	; 0x74
 8008a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a82:	4b7b      	ldr	r3, [pc, #492]	; (8008c70 <_vfiprintf_r+0x244>)
 8008a84:	429d      	cmp	r5, r3
 8008a86:	d101      	bne.n	8008a8c <_vfiprintf_r+0x60>
 8008a88:	68b5      	ldr	r5, [r6, #8]
 8008a8a:	e7df      	b.n	8008a4c <_vfiprintf_r+0x20>
 8008a8c:	4b79      	ldr	r3, [pc, #484]	; (8008c74 <_vfiprintf_r+0x248>)
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	bf08      	it	eq
 8008a92:	68f5      	ldreq	r5, [r6, #12]
 8008a94:	e7da      	b.n	8008a4c <_vfiprintf_r+0x20>
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	0598      	lsls	r0, r3, #22
 8008a9a:	d4ed      	bmi.n	8008a78 <_vfiprintf_r+0x4c>
 8008a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a9e:	f7fe fff9 	bl	8007a94 <__retarget_lock_release_recursive>
 8008aa2:	e7e9      	b.n	8008a78 <_vfiprintf_r+0x4c>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa8:	2320      	movs	r3, #32
 8008aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ab2:	2330      	movs	r3, #48	; 0x30
 8008ab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c78 <_vfiprintf_r+0x24c>
 8008ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008abc:	f04f 0901 	mov.w	r9, #1
 8008ac0:	4623      	mov	r3, r4
 8008ac2:	469a      	mov	sl, r3
 8008ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac8:	b10a      	cbz	r2, 8008ace <_vfiprintf_r+0xa2>
 8008aca:	2a25      	cmp	r2, #37	; 0x25
 8008acc:	d1f9      	bne.n	8008ac2 <_vfiprintf_r+0x96>
 8008ace:	ebba 0b04 	subs.w	fp, sl, r4
 8008ad2:	d00b      	beq.n	8008aec <_vfiprintf_r+0xc0>
 8008ad4:	465b      	mov	r3, fp
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7ff ff93 	bl	8008a06 <__sfputs_r>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f000 80aa 	beq.w	8008c3a <_vfiprintf_r+0x20e>
 8008ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ae8:	445a      	add	r2, fp
 8008aea:	9209      	str	r2, [sp, #36]	; 0x24
 8008aec:	f89a 3000 	ldrb.w	r3, [sl]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 80a2 	beq.w	8008c3a <_vfiprintf_r+0x20e>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f04f 32ff 	mov.w	r2, #4294967295
 8008afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b00:	f10a 0a01 	add.w	sl, sl, #1
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	9307      	str	r3, [sp, #28]
 8008b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b0e:	4654      	mov	r4, sl
 8008b10:	2205      	movs	r2, #5
 8008b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b16:	4858      	ldr	r0, [pc, #352]	; (8008c78 <_vfiprintf_r+0x24c>)
 8008b18:	f7f7 fb6a 	bl	80001f0 <memchr>
 8008b1c:	9a04      	ldr	r2, [sp, #16]
 8008b1e:	b9d8      	cbnz	r0, 8008b58 <_vfiprintf_r+0x12c>
 8008b20:	06d1      	lsls	r1, r2, #27
 8008b22:	bf44      	itt	mi
 8008b24:	2320      	movmi	r3, #32
 8008b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b2a:	0713      	lsls	r3, r2, #28
 8008b2c:	bf44      	itt	mi
 8008b2e:	232b      	movmi	r3, #43	; 0x2b
 8008b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b34:	f89a 3000 	ldrb.w	r3, [sl]
 8008b38:	2b2a      	cmp	r3, #42	; 0x2a
 8008b3a:	d015      	beq.n	8008b68 <_vfiprintf_r+0x13c>
 8008b3c:	9a07      	ldr	r2, [sp, #28]
 8008b3e:	4654      	mov	r4, sl
 8008b40:	2000      	movs	r0, #0
 8008b42:	f04f 0c0a 	mov.w	ip, #10
 8008b46:	4621      	mov	r1, r4
 8008b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b4c:	3b30      	subs	r3, #48	; 0x30
 8008b4e:	2b09      	cmp	r3, #9
 8008b50:	d94e      	bls.n	8008bf0 <_vfiprintf_r+0x1c4>
 8008b52:	b1b0      	cbz	r0, 8008b82 <_vfiprintf_r+0x156>
 8008b54:	9207      	str	r2, [sp, #28]
 8008b56:	e014      	b.n	8008b82 <_vfiprintf_r+0x156>
 8008b58:	eba0 0308 	sub.w	r3, r0, r8
 8008b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b60:	4313      	orrs	r3, r2
 8008b62:	9304      	str	r3, [sp, #16]
 8008b64:	46a2      	mov	sl, r4
 8008b66:	e7d2      	b.n	8008b0e <_vfiprintf_r+0xe2>
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	1d19      	adds	r1, r3, #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	9103      	str	r1, [sp, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bfbb      	ittet	lt
 8008b74:	425b      	neglt	r3, r3
 8008b76:	f042 0202 	orrlt.w	r2, r2, #2
 8008b7a:	9307      	strge	r3, [sp, #28]
 8008b7c:	9307      	strlt	r3, [sp, #28]
 8008b7e:	bfb8      	it	lt
 8008b80:	9204      	strlt	r2, [sp, #16]
 8008b82:	7823      	ldrb	r3, [r4, #0]
 8008b84:	2b2e      	cmp	r3, #46	; 0x2e
 8008b86:	d10c      	bne.n	8008ba2 <_vfiprintf_r+0x176>
 8008b88:	7863      	ldrb	r3, [r4, #1]
 8008b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b8c:	d135      	bne.n	8008bfa <_vfiprintf_r+0x1ce>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	1d1a      	adds	r2, r3, #4
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	9203      	str	r2, [sp, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	bfb8      	it	lt
 8008b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b9e:	3402      	adds	r4, #2
 8008ba0:	9305      	str	r3, [sp, #20]
 8008ba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c88 <_vfiprintf_r+0x25c>
 8008ba6:	7821      	ldrb	r1, [r4, #0]
 8008ba8:	2203      	movs	r2, #3
 8008baa:	4650      	mov	r0, sl
 8008bac:	f7f7 fb20 	bl	80001f0 <memchr>
 8008bb0:	b140      	cbz	r0, 8008bc4 <_vfiprintf_r+0x198>
 8008bb2:	2340      	movs	r3, #64	; 0x40
 8008bb4:	eba0 000a 	sub.w	r0, r0, sl
 8008bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	4303      	orrs	r3, r0
 8008bc0:	3401      	adds	r4, #1
 8008bc2:	9304      	str	r3, [sp, #16]
 8008bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc8:	482c      	ldr	r0, [pc, #176]	; (8008c7c <_vfiprintf_r+0x250>)
 8008bca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bce:	2206      	movs	r2, #6
 8008bd0:	f7f7 fb0e 	bl	80001f0 <memchr>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d03f      	beq.n	8008c58 <_vfiprintf_r+0x22c>
 8008bd8:	4b29      	ldr	r3, [pc, #164]	; (8008c80 <_vfiprintf_r+0x254>)
 8008bda:	bb1b      	cbnz	r3, 8008c24 <_vfiprintf_r+0x1f8>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	3307      	adds	r3, #7
 8008be0:	f023 0307 	bic.w	r3, r3, #7
 8008be4:	3308      	adds	r3, #8
 8008be6:	9303      	str	r3, [sp, #12]
 8008be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bea:	443b      	add	r3, r7
 8008bec:	9309      	str	r3, [sp, #36]	; 0x24
 8008bee:	e767      	b.n	8008ac0 <_vfiprintf_r+0x94>
 8008bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	e7a5      	b.n	8008b46 <_vfiprintf_r+0x11a>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	3401      	adds	r4, #1
 8008bfe:	9305      	str	r3, [sp, #20]
 8008c00:	4619      	mov	r1, r3
 8008c02:	f04f 0c0a 	mov.w	ip, #10
 8008c06:	4620      	mov	r0, r4
 8008c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c0c:	3a30      	subs	r2, #48	; 0x30
 8008c0e:	2a09      	cmp	r2, #9
 8008c10:	d903      	bls.n	8008c1a <_vfiprintf_r+0x1ee>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0c5      	beq.n	8008ba2 <_vfiprintf_r+0x176>
 8008c16:	9105      	str	r1, [sp, #20]
 8008c18:	e7c3      	b.n	8008ba2 <_vfiprintf_r+0x176>
 8008c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c1e:	4604      	mov	r4, r0
 8008c20:	2301      	movs	r3, #1
 8008c22:	e7f0      	b.n	8008c06 <_vfiprintf_r+0x1da>
 8008c24:	ab03      	add	r3, sp, #12
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	462a      	mov	r2, r5
 8008c2a:	4b16      	ldr	r3, [pc, #88]	; (8008c84 <_vfiprintf_r+0x258>)
 8008c2c:	a904      	add	r1, sp, #16
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7fb fd7a 	bl	8004728 <_printf_float>
 8008c34:	4607      	mov	r7, r0
 8008c36:	1c78      	adds	r0, r7, #1
 8008c38:	d1d6      	bne.n	8008be8 <_vfiprintf_r+0x1bc>
 8008c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c3c:	07d9      	lsls	r1, r3, #31
 8008c3e:	d405      	bmi.n	8008c4c <_vfiprintf_r+0x220>
 8008c40:	89ab      	ldrh	r3, [r5, #12]
 8008c42:	059a      	lsls	r2, r3, #22
 8008c44:	d402      	bmi.n	8008c4c <_vfiprintf_r+0x220>
 8008c46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c48:	f7fe ff24 	bl	8007a94 <__retarget_lock_release_recursive>
 8008c4c:	89ab      	ldrh	r3, [r5, #12]
 8008c4e:	065b      	lsls	r3, r3, #25
 8008c50:	f53f af12 	bmi.w	8008a78 <_vfiprintf_r+0x4c>
 8008c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c56:	e711      	b.n	8008a7c <_vfiprintf_r+0x50>
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <_vfiprintf_r+0x258>)
 8008c60:	a904      	add	r1, sp, #16
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7fc f804 	bl	8004c70 <_printf_i>
 8008c68:	e7e4      	b.n	8008c34 <_vfiprintf_r+0x208>
 8008c6a:	bf00      	nop
 8008c6c:	080093cc 	.word	0x080093cc
 8008c70:	080093ec 	.word	0x080093ec
 8008c74:	080093ac 	.word	0x080093ac
 8008c78:	080095e4 	.word	0x080095e4
 8008c7c:	080095ee 	.word	0x080095ee
 8008c80:	08004729 	.word	0x08004729
 8008c84:	08008a07 	.word	0x08008a07
 8008c88:	080095ea 	.word	0x080095ea

08008c8c <_putc_r>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	460d      	mov	r5, r1
 8008c90:	4614      	mov	r4, r2
 8008c92:	4606      	mov	r6, r0
 8008c94:	b118      	cbz	r0, 8008c9e <_putc_r+0x12>
 8008c96:	6983      	ldr	r3, [r0, #24]
 8008c98:	b90b      	cbnz	r3, 8008c9e <_putc_r+0x12>
 8008c9a:	f7fe fae9 	bl	8007270 <__sinit>
 8008c9e:	4b1c      	ldr	r3, [pc, #112]	; (8008d10 <_putc_r+0x84>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d124      	bne.n	8008cee <_putc_r+0x62>
 8008ca4:	6874      	ldr	r4, [r6, #4]
 8008ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ca8:	07d8      	lsls	r0, r3, #31
 8008caa:	d405      	bmi.n	8008cb8 <_putc_r+0x2c>
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	0599      	lsls	r1, r3, #22
 8008cb0:	d402      	bmi.n	8008cb8 <_putc_r+0x2c>
 8008cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb4:	f7fe feed 	bl	8007a92 <__retarget_lock_acquire_recursive>
 8008cb8:	68a3      	ldr	r3, [r4, #8]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	60a3      	str	r3, [r4, #8]
 8008cc0:	da05      	bge.n	8008cce <_putc_r+0x42>
 8008cc2:	69a2      	ldr	r2, [r4, #24]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	db1c      	blt.n	8008d02 <_putc_r+0x76>
 8008cc8:	b2eb      	uxtb	r3, r5
 8008cca:	2b0a      	cmp	r3, #10
 8008ccc:	d019      	beq.n	8008d02 <_putc_r+0x76>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	6022      	str	r2, [r4, #0]
 8008cd4:	701d      	strb	r5, [r3, #0]
 8008cd6:	b2ed      	uxtb	r5, r5
 8008cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cda:	07da      	lsls	r2, r3, #31
 8008cdc:	d405      	bmi.n	8008cea <_putc_r+0x5e>
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	059b      	lsls	r3, r3, #22
 8008ce2:	d402      	bmi.n	8008cea <_putc_r+0x5e>
 8008ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ce6:	f7fe fed5 	bl	8007a94 <__retarget_lock_release_recursive>
 8008cea:	4628      	mov	r0, r5
 8008cec:	bd70      	pop	{r4, r5, r6, pc}
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <_putc_r+0x88>)
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	d101      	bne.n	8008cf8 <_putc_r+0x6c>
 8008cf4:	68b4      	ldr	r4, [r6, #8]
 8008cf6:	e7d6      	b.n	8008ca6 <_putc_r+0x1a>
 8008cf8:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <_putc_r+0x8c>)
 8008cfa:	429c      	cmp	r4, r3
 8008cfc:	bf08      	it	eq
 8008cfe:	68f4      	ldreq	r4, [r6, #12]
 8008d00:	e7d1      	b.n	8008ca6 <_putc_r+0x1a>
 8008d02:	4629      	mov	r1, r5
 8008d04:	4622      	mov	r2, r4
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7fd fa5e 	bl	80061c8 <__swbuf_r>
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	e7e3      	b.n	8008cd8 <_putc_r+0x4c>
 8008d10:	080093cc 	.word	0x080093cc
 8008d14:	080093ec 	.word	0x080093ec
 8008d18:	080093ac 	.word	0x080093ac
 8008d1c:	00000000 	.word	0x00000000

08008d20 <nan>:
 8008d20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008d28 <nan+0x8>
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	00000000 	.word	0x00000000
 8008d2c:	7ff80000 	.word	0x7ff80000

08008d30 <_sbrk_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d06      	ldr	r5, [pc, #24]	; (8008d4c <_sbrk_r+0x1c>)
 8008d34:	2300      	movs	r3, #0
 8008d36:	4604      	mov	r4, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	f7f9 f80e 	bl	8001d5c <_sbrk>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_sbrk_r+0x1a>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_sbrk_r+0x1a>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	20000388 	.word	0x20000388

08008d50 <__sread>:
 8008d50:	b510      	push	{r4, lr}
 8008d52:	460c      	mov	r4, r1
 8008d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d58:	f000 f93a 	bl	8008fd0 <_read_r>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	bfab      	itete	ge
 8008d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d62:	89a3      	ldrhlt	r3, [r4, #12]
 8008d64:	181b      	addge	r3, r3, r0
 8008d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d6a:	bfac      	ite	ge
 8008d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d6e:	81a3      	strhlt	r3, [r4, #12]
 8008d70:	bd10      	pop	{r4, pc}

08008d72 <__swrite>:
 8008d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d76:	461f      	mov	r7, r3
 8008d78:	898b      	ldrh	r3, [r1, #12]
 8008d7a:	05db      	lsls	r3, r3, #23
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	4616      	mov	r6, r2
 8008d82:	d505      	bpl.n	8008d90 <__swrite+0x1e>
 8008d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d88:	2302      	movs	r3, #2
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f000 f8b8 	bl	8008f00 <_lseek_r>
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d9a:	81a3      	strh	r3, [r4, #12]
 8008d9c:	4632      	mov	r2, r6
 8008d9e:	463b      	mov	r3, r7
 8008da0:	4628      	mov	r0, r5
 8008da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008da6:	f000 b837 	b.w	8008e18 <_write_r>

08008daa <__sseek>:
 8008daa:	b510      	push	{r4, lr}
 8008dac:	460c      	mov	r4, r1
 8008dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db2:	f000 f8a5 	bl	8008f00 <_lseek_r>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	bf15      	itete	ne
 8008dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dc6:	81a3      	strheq	r3, [r4, #12]
 8008dc8:	bf18      	it	ne
 8008dca:	81a3      	strhne	r3, [r4, #12]
 8008dcc:	bd10      	pop	{r4, pc}

08008dce <__sclose>:
 8008dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd2:	f000 b851 	b.w	8008e78 <_close_r>

08008dd6 <strncmp>:
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	b17a      	cbz	r2, 8008dfa <strncmp+0x24>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	3901      	subs	r1, #1
 8008dde:	1884      	adds	r4, r0, r2
 8008de0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008de4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008de8:	4290      	cmp	r0, r2
 8008dea:	d101      	bne.n	8008df0 <strncmp+0x1a>
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d101      	bne.n	8008df4 <strncmp+0x1e>
 8008df0:	1a80      	subs	r0, r0, r2
 8008df2:	bd10      	pop	{r4, pc}
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d1f3      	bne.n	8008de0 <strncmp+0xa>
 8008df8:	e7fa      	b.n	8008df0 <strncmp+0x1a>
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	e7f9      	b.n	8008df2 <strncmp+0x1c>

08008dfe <__ascii_wctomb>:
 8008dfe:	b149      	cbz	r1, 8008e14 <__ascii_wctomb+0x16>
 8008e00:	2aff      	cmp	r2, #255	; 0xff
 8008e02:	bf85      	ittet	hi
 8008e04:	238a      	movhi	r3, #138	; 0x8a
 8008e06:	6003      	strhi	r3, [r0, #0]
 8008e08:	700a      	strbls	r2, [r1, #0]
 8008e0a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e0e:	bf98      	it	ls
 8008e10:	2001      	movls	r0, #1
 8008e12:	4770      	bx	lr
 8008e14:	4608      	mov	r0, r1
 8008e16:	4770      	bx	lr

08008e18 <_write_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d07      	ldr	r5, [pc, #28]	; (8008e38 <_write_r+0x20>)
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	602a      	str	r2, [r5, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f7f8 fc7d 	bl	8001726 <_write>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_write_r+0x1e>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_write_r+0x1e>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	20000388 	.word	0x20000388

08008e3c <__assert_func>:
 8008e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e3e:	4614      	mov	r4, r2
 8008e40:	461a      	mov	r2, r3
 8008e42:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <__assert_func+0x2c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4605      	mov	r5, r0
 8008e48:	68d8      	ldr	r0, [r3, #12]
 8008e4a:	b14c      	cbz	r4, 8008e60 <__assert_func+0x24>
 8008e4c:	4b07      	ldr	r3, [pc, #28]	; (8008e6c <__assert_func+0x30>)
 8008e4e:	9100      	str	r1, [sp, #0]
 8008e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e54:	4906      	ldr	r1, [pc, #24]	; (8008e70 <__assert_func+0x34>)
 8008e56:	462b      	mov	r3, r5
 8008e58:	f000 f81e 	bl	8008e98 <fiprintf>
 8008e5c:	f000 f8ca 	bl	8008ff4 <abort>
 8008e60:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <__assert_func+0x38>)
 8008e62:	461c      	mov	r4, r3
 8008e64:	e7f3      	b.n	8008e4e <__assert_func+0x12>
 8008e66:	bf00      	nop
 8008e68:	20000078 	.word	0x20000078
 8008e6c:	080095f5 	.word	0x080095f5
 8008e70:	08009602 	.word	0x08009602
 8008e74:	08009630 	.word	0x08009630

08008e78 <_close_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	; (8008e94 <_close_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f8 ff36 	bl	8001cf4 <_close>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_close_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_close_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20000388 	.word	0x20000388

08008e98 <fiprintf>:
 8008e98:	b40e      	push	{r1, r2, r3}
 8008e9a:	b503      	push	{r0, r1, lr}
 8008e9c:	4601      	mov	r1, r0
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	4805      	ldr	r0, [pc, #20]	; (8008eb8 <fiprintf+0x20>)
 8008ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea6:	6800      	ldr	r0, [r0, #0]
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	f7ff fdbf 	bl	8008a2c <_vfiprintf_r>
 8008eae:	b002      	add	sp, #8
 8008eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb4:	b003      	add	sp, #12
 8008eb6:	4770      	bx	lr
 8008eb8:	20000078 	.word	0x20000078

08008ebc <_fstat_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4d07      	ldr	r5, [pc, #28]	; (8008edc <_fstat_r+0x20>)
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	f7f8 ff1f 	bl	8001d0c <_fstat>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	d102      	bne.n	8008ed8 <_fstat_r+0x1c>
 8008ed2:	682b      	ldr	r3, [r5, #0]
 8008ed4:	b103      	cbz	r3, 8008ed8 <_fstat_r+0x1c>
 8008ed6:	6023      	str	r3, [r4, #0]
 8008ed8:	bd38      	pop	{r3, r4, r5, pc}
 8008eda:	bf00      	nop
 8008edc:	20000388 	.word	0x20000388

08008ee0 <_isatty_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d06      	ldr	r5, [pc, #24]	; (8008efc <_isatty_r+0x1c>)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	4608      	mov	r0, r1
 8008eea:	602b      	str	r3, [r5, #0]
 8008eec:	f7f8 ff1e 	bl	8001d2c <_isatty>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_isatty_r+0x1a>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_isatty_r+0x1a>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20000388 	.word	0x20000388

08008f00 <_lseek_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d07      	ldr	r5, [pc, #28]	; (8008f20 <_lseek_r+0x20>)
 8008f04:	4604      	mov	r4, r0
 8008f06:	4608      	mov	r0, r1
 8008f08:	4611      	mov	r1, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	602a      	str	r2, [r5, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f7f8 ff17 	bl	8001d42 <_lseek>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_lseek_r+0x1e>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_lseek_r+0x1e>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20000388 	.word	0x20000388

08008f24 <memmove>:
 8008f24:	4288      	cmp	r0, r1
 8008f26:	b510      	push	{r4, lr}
 8008f28:	eb01 0402 	add.w	r4, r1, r2
 8008f2c:	d902      	bls.n	8008f34 <memmove+0x10>
 8008f2e:	4284      	cmp	r4, r0
 8008f30:	4623      	mov	r3, r4
 8008f32:	d807      	bhi.n	8008f44 <memmove+0x20>
 8008f34:	1e43      	subs	r3, r0, #1
 8008f36:	42a1      	cmp	r1, r4
 8008f38:	d008      	beq.n	8008f4c <memmove+0x28>
 8008f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f42:	e7f8      	b.n	8008f36 <memmove+0x12>
 8008f44:	4402      	add	r2, r0
 8008f46:	4601      	mov	r1, r0
 8008f48:	428a      	cmp	r2, r1
 8008f4a:	d100      	bne.n	8008f4e <memmove+0x2a>
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f56:	e7f7      	b.n	8008f48 <memmove+0x24>

08008f58 <__malloc_lock>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__malloc_lock+0x8>)
 8008f5a:	f7fe bd9a 	b.w	8007a92 <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	2000037c 	.word	0x2000037c

08008f64 <__malloc_unlock>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__malloc_unlock+0x8>)
 8008f66:	f7fe bd95 	b.w	8007a94 <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	2000037c 	.word	0x2000037c

08008f70 <_realloc_r>:
 8008f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f74:	4680      	mov	r8, r0
 8008f76:	4614      	mov	r4, r2
 8008f78:	460e      	mov	r6, r1
 8008f7a:	b921      	cbnz	r1, 8008f86 <_realloc_r+0x16>
 8008f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f80:	4611      	mov	r1, r2
 8008f82:	f7ff bb59 	b.w	8008638 <_malloc_r>
 8008f86:	b92a      	cbnz	r2, 8008f94 <_realloc_r+0x24>
 8008f88:	f7ff faea 	bl	8008560 <_free_r>
 8008f8c:	4625      	mov	r5, r4
 8008f8e:	4628      	mov	r0, r5
 8008f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f94:	f000 f835 	bl	8009002 <_malloc_usable_size_r>
 8008f98:	4284      	cmp	r4, r0
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	d802      	bhi.n	8008fa4 <_realloc_r+0x34>
 8008f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fa2:	d812      	bhi.n	8008fca <_realloc_r+0x5a>
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	f7ff fb46 	bl	8008638 <_malloc_r>
 8008fac:	4605      	mov	r5, r0
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d0ed      	beq.n	8008f8e <_realloc_r+0x1e>
 8008fb2:	42bc      	cmp	r4, r7
 8008fb4:	4622      	mov	r2, r4
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	bf28      	it	cs
 8008fba:	463a      	movcs	r2, r7
 8008fbc:	f7fe fdea 	bl	8007b94 <memcpy>
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f7ff facc 	bl	8008560 <_free_r>
 8008fc8:	e7e1      	b.n	8008f8e <_realloc_r+0x1e>
 8008fca:	4635      	mov	r5, r6
 8008fcc:	e7df      	b.n	8008f8e <_realloc_r+0x1e>
	...

08008fd0 <_read_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d07      	ldr	r5, [pc, #28]	; (8008ff0 <_read_r+0x20>)
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	4611      	mov	r1, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	602a      	str	r2, [r5, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f7f8 fe6b 	bl	8001cba <_read>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_read_r+0x1e>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_read_r+0x1e>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	20000388 	.word	0x20000388

08008ff4 <abort>:
 8008ff4:	b508      	push	{r3, lr}
 8008ff6:	2006      	movs	r0, #6
 8008ff8:	f000 f834 	bl	8009064 <raise>
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	f7f8 fe52 	bl	8001ca6 <_exit>

08009002 <_malloc_usable_size_r>:
 8009002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009006:	1f18      	subs	r0, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	bfbc      	itt	lt
 800900c:	580b      	ldrlt	r3, [r1, r0]
 800900e:	18c0      	addlt	r0, r0, r3
 8009010:	4770      	bx	lr

08009012 <_raise_r>:
 8009012:	291f      	cmp	r1, #31
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4604      	mov	r4, r0
 8009018:	460d      	mov	r5, r1
 800901a:	d904      	bls.n	8009026 <_raise_r+0x14>
 800901c:	2316      	movs	r3, #22
 800901e:	6003      	str	r3, [r0, #0]
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009028:	b112      	cbz	r2, 8009030 <_raise_r+0x1e>
 800902a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800902e:	b94b      	cbnz	r3, 8009044 <_raise_r+0x32>
 8009030:	4620      	mov	r0, r4
 8009032:	f000 f831 	bl	8009098 <_getpid_r>
 8009036:	462a      	mov	r2, r5
 8009038:	4601      	mov	r1, r0
 800903a:	4620      	mov	r0, r4
 800903c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009040:	f000 b818 	b.w	8009074 <_kill_r>
 8009044:	2b01      	cmp	r3, #1
 8009046:	d00a      	beq.n	800905e <_raise_r+0x4c>
 8009048:	1c59      	adds	r1, r3, #1
 800904a:	d103      	bne.n	8009054 <_raise_r+0x42>
 800904c:	2316      	movs	r3, #22
 800904e:	6003      	str	r3, [r0, #0]
 8009050:	2001      	movs	r0, #1
 8009052:	e7e7      	b.n	8009024 <_raise_r+0x12>
 8009054:	2400      	movs	r4, #0
 8009056:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800905a:	4628      	mov	r0, r5
 800905c:	4798      	blx	r3
 800905e:	2000      	movs	r0, #0
 8009060:	e7e0      	b.n	8009024 <_raise_r+0x12>
	...

08009064 <raise>:
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <raise+0xc>)
 8009066:	4601      	mov	r1, r0
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	f7ff bfd2 	b.w	8009012 <_raise_r>
 800906e:	bf00      	nop
 8009070:	20000078 	.word	0x20000078

08009074 <_kill_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d07      	ldr	r5, [pc, #28]	; (8009094 <_kill_r+0x20>)
 8009078:	2300      	movs	r3, #0
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	4611      	mov	r1, r2
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	f7f8 fe00 	bl	8001c86 <_kill>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d102      	bne.n	8009090 <_kill_r+0x1c>
 800908a:	682b      	ldr	r3, [r5, #0]
 800908c:	b103      	cbz	r3, 8009090 <_kill_r+0x1c>
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	bd38      	pop	{r3, r4, r5, pc}
 8009092:	bf00      	nop
 8009094:	20000388 	.word	0x20000388

08009098 <_getpid_r>:
 8009098:	f7f8 bded 	b.w	8001c76 <_getpid>

0800909c <_init>:
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	bf00      	nop
 80090a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a2:	bc08      	pop	{r3}
 80090a4:	469e      	mov	lr, r3
 80090a6:	4770      	bx	lr

080090a8 <_fini>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	bf00      	nop
 80090ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ae:	bc08      	pop	{r3}
 80090b0:	469e      	mov	lr, r3
 80090b2:	4770      	bx	lr
